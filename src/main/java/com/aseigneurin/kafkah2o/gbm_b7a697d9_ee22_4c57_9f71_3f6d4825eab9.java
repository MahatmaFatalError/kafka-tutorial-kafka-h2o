package com.aseigneurin.kafkah2o;

/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2019-02-11T15:01:40.877-05:00
  3.20.0.6
  
  Standalone prediction code with sample test data for GBMModel named gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://10.103.107.57:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://10.103.107.57:54321/3/Models.java/gbm-b7a697d9-ee22-4c57-9f71-3f6d4825eab9 > gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9", algorithm="gbm")
public class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 14; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* bedrooms */ null,
    /* bathrooms */ null,
    /* sqft_living */ null,
    /* sqft_lot */ null,
    /* floors */ null,
    /* waterfront */ gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_5.VALUES,
    /* view */ gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_6.VALUES,
    /* condition */ gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_7.VALUES,
    /* sqft_above */ null,
    /* sqft_basement */ null,
    /* yr_built */ null,
    /* yr_renovated */ null,
    /* city */ gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_12.VALUES,
    /* statezip */ gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_13.VALUES,
    /* price */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.0};

  public gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9() { super(NAMES,DOMAINS,"price"); }
  public String getUUID() { return Long.toString(-7086145138357386816L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_0.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_1.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_2.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_3.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_4.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_5.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_6.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_7.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_8.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_9.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_10.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_11.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_12.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_13.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_14.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_15.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_16.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_17.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_18.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_19.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_20.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_21.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_22.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_23.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_24.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_25.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_26.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_27.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_28.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_29.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_30.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_31.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_32.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_33.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_34.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_35.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_36.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_37.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_38.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_39.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_40.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_41.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_42.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_43.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_44.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_45.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_46.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_47.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_48.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_49.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_50.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_51.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_52.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_53.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_54.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_55.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_56.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_57.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_58.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_59.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_60.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_61.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_62.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_63.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_64.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_65.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_66.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_67.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_68.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_69.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_70.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_71.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_72.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_73.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_74.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_75.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_76.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_77.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_78.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_79.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_80.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_81.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_82.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_83.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_84.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_85.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_86.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_87.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_88.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_89.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_90.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_91.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_92.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_93.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_94.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_95.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_96.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_97.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_98.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_99.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_100.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_101.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_102.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_103.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_104.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_105.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_106.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_107.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_108.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_109.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_110.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_111.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_112.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_113.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_114.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_115.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_116.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_117.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_118.score0(data,preds);
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_119.score0(data,preds);
    preds[0] += 554345.6955039118;
    preds[0] = preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9 implements java.io.Serializable {
  public static final String[] VALUES = new String[14];
  static {
    NamesHolder_gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "bedrooms";
      sa[1] = "bathrooms";
      sa[2] = "sqft_living";
      sa[3] = "sqft_lot";
      sa[4] = "floors";
      sa[5] = "waterfront";
      sa[6] = "view";
      sa[7] = "condition";
      sa[8] = "sqft_above";
      sa[9] = "sqft_basement";
      sa[10] = "yr_built";
      sa[11] = "yr_renovated";
      sa[12] = "city";
      sa[13] = "statezip";
    }
  }
}
// The class representing column waterfront
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_5_0.fill(VALUES);
  }
  static final class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}
// The class representing column view
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_6_0.fill(VALUES);
  }
  static final class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
      sa[2] = "2";
      sa[3] = "3";
      sa[4] = "4";
    }
  }
}
// The class representing column condition
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_7_0.fill(VALUES);
  }
  static final class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
    }
  }
}
// The class representing column city
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[44];
  static {
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_12_0.fill(VALUES);
  }
  static final class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Algona";
      sa[1] = "Auburn";
      sa[2] = "Beaux Arts Village";
      sa[3] = "Bellevue";
      sa[4] = "Black Diamond";
      sa[5] = "Bothell";
      sa[6] = "Burien";
      sa[7] = "Carnation";
      sa[8] = "Clyde Hill";
      sa[9] = "Covington";
      sa[10] = "Des Moines";
      sa[11] = "Duvall";
      sa[12] = "Enumclaw";
      sa[13] = "Fall City";
      sa[14] = "Federal Way";
      sa[15] = "Inglewood-Finn Hill";
      sa[16] = "Issaquah";
      sa[17] = "Kenmore";
      sa[18] = "Kent";
      sa[19] = "Kirkland";
      sa[20] = "Lake Forest Park";
      sa[21] = "Maple Valley";
      sa[22] = "Medina";
      sa[23] = "Mercer Island";
      sa[24] = "Milton";
      sa[25] = "Newcastle";
      sa[26] = "Normandy Park";
      sa[27] = "North Bend";
      sa[28] = "Pacific";
      sa[29] = "Preston";
      sa[30] = "Ravensdale";
      sa[31] = "Redmond";
      sa[32] = "Renton";
      sa[33] = "Sammamish";
      sa[34] = "SeaTac";
      sa[35] = "Seattle";
      sa[36] = "Shoreline";
      sa[37] = "Skykomish";
      sa[38] = "Snoqualmie";
      sa[39] = "Snoqualmie Pass";
      sa[40] = "Tukwila";
      sa[41] = "Vashon";
      sa[42] = "Woodinville";
      sa[43] = "Yarrow Point";
    }
  }
}
// The class representing column statezip
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[77];
  static {
    gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_13_0.fill(VALUES);
  }
  static final class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "WA 98001";
      sa[1] = "WA 98002";
      sa[2] = "WA 98003";
      sa[3] = "WA 98004";
      sa[4] = "WA 98005";
      sa[5] = "WA 98006";
      sa[6] = "WA 98007";
      sa[7] = "WA 98008";
      sa[8] = "WA 98010";
      sa[9] = "WA 98011";
      sa[10] = "WA 98014";
      sa[11] = "WA 98019";
      sa[12] = "WA 98022";
      sa[13] = "WA 98023";
      sa[14] = "WA 98024";
      sa[15] = "WA 98027";
      sa[16] = "WA 98028";
      sa[17] = "WA 98029";
      sa[18] = "WA 98030";
      sa[19] = "WA 98031";
      sa[20] = "WA 98032";
      sa[21] = "WA 98033";
      sa[22] = "WA 98034";
      sa[23] = "WA 98038";
      sa[24] = "WA 98039";
      sa[25] = "WA 98040";
      sa[26] = "WA 98042";
      sa[27] = "WA 98045";
      sa[28] = "WA 98047";
      sa[29] = "WA 98050";
      sa[30] = "WA 98051";
      sa[31] = "WA 98052";
      sa[32] = "WA 98053";
      sa[33] = "WA 98055";
      sa[34] = "WA 98056";
      sa[35] = "WA 98057";
      sa[36] = "WA 98058";
      sa[37] = "WA 98059";
      sa[38] = "WA 98065";
      sa[39] = "WA 98068";
      sa[40] = "WA 98070";
      sa[41] = "WA 98072";
      sa[42] = "WA 98074";
      sa[43] = "WA 98075";
      sa[44] = "WA 98077";
      sa[45] = "WA 98092";
      sa[46] = "WA 98102";
      sa[47] = "WA 98103";
      sa[48] = "WA 98105";
      sa[49] = "WA 98106";
      sa[50] = "WA 98107";
      sa[51] = "WA 98108";
      sa[52] = "WA 98109";
      sa[53] = "WA 98112";
      sa[54] = "WA 98115";
      sa[55] = "WA 98116";
      sa[56] = "WA 98117";
      sa[57] = "WA 98118";
      sa[58] = "WA 98119";
      sa[59] = "WA 98122";
      sa[60] = "WA 98125";
      sa[61] = "WA 98126";
      sa[62] = "WA 98133";
      sa[63] = "WA 98136";
      sa[64] = "WA 98144";
      sa[65] = "WA 98146";
      sa[66] = "WA 98148";
      sa[67] = "WA 98155";
      sa[68] = "WA 98166";
      sa[69] = "WA 98168";
      sa[70] = "WA 98177";
      sa[71] = "WA 98178";
      sa[72] = "WA 98188";
      sa[73] = "WA 98198";
      sa[74] = "WA 98199";
      sa[75] = "WA 98288";
      sa[76] = "WA 98354";
    }
  }
}

class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_0_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2915.0f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2258.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1525.5f ? 
                        -32355.262f : 
                        -25747.76f) : 
                     (data[2 /* sqft_living */] <1466.5f ? 
                        -23645.34f : 
                        -12902.198f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <20761.5f ? 
                        -21321.043f : 
                        -12294.031f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -3140.5447f : 
                        15772.783f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2040.5f ? 
                     (data[2 /* sqft_living */] <1414.5f ? 
                        -11678.686f : 
                        -1801.823f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(67, 4, data[13]) || (GenModel.bitSetIsInRange(67, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 67, 4, data[13])) ? 
                        10578.741f : 
                        26914.895f)) : 
                 (data[2 /* sqft_living */] <1205.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1103.5f ? 
                        -16125.339f : 
                        259485.42f) : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(42, 2, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 42, 2, data[12])) ? 
                        -27184.732f : 
                        32049.854f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4075.5f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(41, 1, data[12]) || (GenModel.bitSetIsInRange(41, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT9, 41, 1, data[12])) ? 
                        -6996.8096f : 
                        9700.697f) : 
                    34946.82f) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[6])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 77, 0, data[13])) ? 
                        26595.16f : 
                        49007.258f) : 
                    97344.305f)) : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5378.5f ? 
                 (data[2 /* sqft_living */] <3534.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(68, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT12, 68, 3, data[13])) ? 
                        37934.406f : 
                        85405.43f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(68, 3, data[13]) || (GenModel.bitSetIsInRange(68, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT13, 68, 3, data[13])) ? 
                        89353.5f : 
                        154406.95f)) : 
                276303.94f)));
    return pred;
  } // constant pool size = 243B, number of visited nodes = 26, static init size = 822B
  // {00011111 00000000 01010100 11000001 10000000 00110011 10101111 10110001 00000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, 0, 42, -125, 1, -52, -11, -115, 64, 4};
  // {00000000 01010011 10000010 00010100 00000110 11001000 00000000 01001110 10011000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -54, 65, 40, 96, 19, 0, 114, 25, 0};
  // {00011111 01110011 11010110 11011111 10100111 11111011 11101111 11111111 11111010 01101}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -50, 107, -5, -27, -33, -9, -1, 95, 22};
  // {00000000 00100000 00000000 00000010 00000000 10000000 00000000 00000100 11001000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 4, 0, 64, 0, 1, 0, 32, 19, 0};
  // {00010000 00000000 00010000 11000000 00000000 00000000 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 8, 3, 0, 0, 49, 4, 0, 4};
  // {...4 0-bits... 00000000 00000000 01000000 00000000 00000000 00110010 00000000 0000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 2, 0, 0, 76, 0, 0, 0};
  // {...2 0-bits... 11111111 11111111 01111111 11111111 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -2, -1, -1, 3};
  // {00011000 00000000 00000000 11000000 00000000 00000010 10101101 00100000 00000010 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {24, 0, 0, 3, 0, 64, -75, 4, 64, 0};
  // {00000111 00100011 01000110 00000001 10000000 01011001 00000010 11011001 10001000 00100}
  public static final byte[] GRPSPLIT8 = new byte[] {-32, -60, 98, -128, 1, -102, 64, -101, 17, 4};
  // {...1 0-bits... 00000000 01010000 10000000 10100010 10100100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 10, 1, 69, 37, 1};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {00000100 00100010 01000100 00000000 00000000 00000000 00000010 11000000 10000000 00100}
  public static final byte[] GRPSPLIT11 = new byte[] {32, 68, 34, 0, 0, 0, 64, 3, 1, 4};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000100 01100001 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0, 0, 32, -122, 0, 0};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00010101 00000001 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 32, 0, 0, -88, -128, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_1_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3061.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2220.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[1 /* bathrooms */] <1.2421875f ? 
                        -30925.58f : 
                        -24803.715f) : 
                     (data[2 /* sqft_living */] <1501.5f ? 
                        -21969.201f : 
                        -12266.073f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -23756.443f : 
                        -16510.475f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2601.5f ? 
                        -6072.002f : 
                        3272.9673f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2052.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1605.5f ? 
                        -10101.638f : 
                        -231.94f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                        9953.244f : 
                        32305.217f)) : 
                 (data[2 /* sqft_living */] <1201.0f ? 
                    130662.22f : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2178.5f ? 
                        673.8711f : 
                        46601.047f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3989.0f ? 
                        -7229.771f : 
                        9939.084f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.6386719f ? 
                        16435.154f : 
                        -10066.924f)) : 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3777.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(70, 5, data[13]) || (GenModel.bitSetIsInRange(70, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 70, 5, data[13])) ? 
                        19411.674f : 
                        47364.85f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(70, 5, data[13]) || (GenModel.bitSetIsInRange(70, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 70, 5, data[13])) ? 
                        49293.56f : 
                        124261.07f))) : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5366.0f ? 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[6])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4200.5f ? 
                        64937.52f : 
                        124734.45f) : 
                    123247.27f) : 
                237566.52f)));
    return pred;
  } // constant pool size = 224B, number of visited nodes = 26, static init size = 708B
  // {00011111 01000001 01010100 11000001 10000000 00111011 10101111 10110001 10000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, -126, 42, -125, 1, -36, -11, -115, 65, 4};
  // {00000000 00010010 10000010 00010100 00100110 11000000 00010000 01001110 00011000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 72, 65, 40, 100, 3, 8, 114, 24, 0};
  // {00011111 01111011 11010110 11011111 11100111 11111011 11101111 11111111 11111010 01101}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -34, 107, -5, -25, -33, -9, -1, 95, 22};
  // {10111111 01111011 11110111 11111111 11101111 11111111 11111111 11111111 11111110 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, -34, -17, -1, -9, -1, -1, -1, 127, 31};
  // {00010000 00000000 00010000 11000000 00000000 00000000 10001100 00000000 00000000 00100}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 8, 3, 0, 0, 49, 0, 0, 4};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {28, 0, 0, 0};
  // {00011000 00000010 00000000 11000000 00000000 00000010 10101101 00100000 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {24, 64, 0, 3, 0, 64, -75, 4, 0, 0};
  // {00000111 00100001 01000110 00000001 10000100 01011001 00000010 11010001 11000010 00100}
  public static final byte[] GRPSPLIT7 = new byte[] {-32, -124, 98, -128, 33, -102, 64, -117, 67, 4};
  // {10100000 00001000 00000000 00010000 00001010 10100000 00000000 00001100 00001000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {5, 16, 0, 8, 80, 5, 0, 48, 16, 0};
  // {...5 0-bits... 10100000 00000000 10000000 00000000 00000000 00000000 01011010 00010000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {5, 0, 1, 0, 0, 0, 90, 8, 32};
  // {...5 0-bits... 00000100 00101000 01000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {32, 20, 2, 0, 0, 0, 0, 0, 2};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {10, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_2_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2915.0f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2258.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1525.5f ? 
                        -26147.885f : 
                        -20132.932f) : 
                     (data[2 /* sqft_living */] <1407.5f ? 
                        -18803.867f : 
                        -9768.057f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -17029.621f : 
                        -8720.845f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        388.46735f : 
                        24759.375f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2060.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1532.5f ? 
                        -8229.207f : 
                        538.31384f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(67, 4, data[13]) || (GenModel.bitSetIsInRange(67, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 67, 4, data[13])) ? 
                        9231.455f : 
                        27268.568f)) : 
                 (data[2 /* sqft_living */] <1205.0f ? 
                    162615.94f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 72, 3, data[13])) ? 
                        -25593.502f : 
                        30735.072f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4075.5f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(41, 1, data[12]) || (GenModel.bitSetIsInRange(41, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT10, 41, 1, data[12])) ? 
                        -5797.8774f : 
                        9076.11f) : 
                    29590.217f) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[6])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4251.5f ? 
                        25076.867f : 
                        48206.496f) : 
                     (data[2 /* sqft_living */] <3805.5f ? 
                        43455.223f : 
                        118188.99f))) : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5253.5f ? 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[6])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(41, 3, data[12]) && !GenModel.bitSetContains(GRPSPLIT13, 41, 3, data[12])) ? 
                        32359.932f : 
                        75720.78f) : 
                    113523.73f) : 
                216999.6f)));
    return pred;
  } // constant pool size = 234B, number of visited nodes = 25, static init size = 792B
  // {00011110 00000000 01010100 11000001 10000000 00110011 10101111 10110000 00000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 42, -125, 1, -52, -11, 13, 64, 4};
  // {00000001 01000011 10000010 00000100 00000110 11001000 00000000 01001111 10010000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, -62, 65, 32, 96, 19, 0, -14, 9, 0};
  // {00000001 01100001 10000010 00000010 00100010 11001000 00000000 01001111 11011000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {-128, -122, 65, 64, 68, 19, 0, -14, 27, 0};
  // {00000000 00011000 00000001 00010000 01000100 00000000 01010000 00000000 00100000 01010}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 24, -128, 8, 34, 0, 10, 0, 4, 10};
  // {00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000001 10000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 1, 0, -128, 1, 0};
  // {00010000 00000000 00010000 11000000 00000000 00000000 00000100 00000000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 8, 3, 0, 0, 32, 0, 0, 4};
  // {...4 0-bits... 00000000 00000000 01000000 00000000 00000000 00111000 10000010 0000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 2, 0, 0, 28, 65, 0, 0};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, -1};
  // {00011000 00000000 00000000 11000000 00000000 00000010 10101100 00100000 00000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {24, 0, 0, 3, 0, 64, 53, 4, 0, 0};
  // {00000111 00100011 01000110 00000001 10000000 01011001 00000011 11010001 10001010 00100}
  public static final byte[] GRPSPLIT9 = new byte[] {-32, -60, 98, -128, 1, -102, -64, -117, 81, 4};
  // {...1 0-bits... 00000000 01010000 00000000 10100010 10100100}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 10, 0, 69, 37, 1};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {10, 0, 0, 0};
  // {...3 0-bits... 11111011 11111111 11110111 11111111 111111}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, -1, -17, -1, -1, 1};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_3_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2428.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1456.5f ? 
                        -25295.387f : 
                        -19529.986f) : 
                     (data[2 /* sqft_living */] <1528.5f ? 
                        -19270.516f : 
                        -11976.196f)) : 
                 (data[2 /* sqft_living */] <1592.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(65, 6, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 65, 6, data[13])) ? 
                        -13518.06f : 
                        -6241.02f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(65, 6, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 65, 6, data[13])) ? 
                        -4597.543f : 
                        4110.7446f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3736.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 76, 0, data[13])) ? 
                        -11714.1045f : 
                        -2519.6265f) : 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(41, 1, data[12]) || (GenModel.bitSetIsInRange(41, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT7, 41, 1, data[12])) ? 
                        10223.957f : 
                        39984.457f)) : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4769.5f ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[6])) ? 
                        12796.102f : 
                        39192.605f) : 
                    73821.336f))) : 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4128.5f ? 
             (data[8 /* sqft_above */] <1166.5f ? 
                 (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(42, 2, data[12]) && !GenModel.bitSetContains(GRPSPLIT9, 42, 2, data[12])) ? 
                    -46125.402f : 
                     (data[2 /* sqft_living */] <1241.5f ? 
                        -20959.877f : 
                        -4086.5737f)) : 
                 (data[2 /* sqft_living */] <1267.5f ? 
                    253888.31f : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(41, 3, data[12]) && !GenModel.bitSetContains(GRPSPLIT10, 41, 3, data[12])) ? 
                        -22127.062f : 
                        28482.494f))) : 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(33, 3, data[12]) || (GenModel.bitSetIsInRange(33, 3, data[12]) && !GenModel.bitSetContains(GRPSPLIT11, 33, 3, data[12])) ? 
                     (data[2 /* sqft_living */] <4407.5f ? 
                        74733.67f : 
                        30362.883f) : 
                    143722.8f) : 
                185286.1f)));
    return pred;
  } // constant pool size = 205B, number of visited nodes = 24, static init size = 642B
  // {00011100 00000000 00010100 11000000 00000000 00010010 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {56, 0, 40, 3, 0, 72, 49, 4, 0, 4};
  // {00000011 01000001 01000010 00000101 10000010 11100001 00100011 10010101 10000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-64, -126, 66, -96, 65, -121, -60, -87, 65, 0};
  // {00000000 00110010 10000000 00110000 00101100 00001000 01010000 01001010 01011000 00001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 76, 1, 12, 52, 16, 10, 82, 26, 16};
  // {...6 0-bits... 00000000 00010000 00000001 00000000 00000000 01001000 11100100 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, -128, 0, 0, 18, 39, 0, 0};
  // {...6 0-bits... 11000000 00000000 00000000 01100000 00000000 01001000 11100100 000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 0, 6, 0, 18, 39, 0, 0};
  // {00000011 00100011 01000010 00000001 10000000 01101001 00100011 11011101 11001010 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {-64, -60, 66, -128, 1, -106, -60, -69, 83, 0};
  // {00011111 11111011 11010111 11011111 11110111 11111011 10101111 11111111 11111010 0110}
  public static final byte[] GRPSPLIT6 = new byte[] {-8, -33, -21, -5, -17, -33, -11, -1, 95, 6};
  // {...1 0-bits... 00000000 00000000 00000000 10100001 00000100}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, -123, 32, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {24, 0, 0, 0};
  // {...2 0-bits... 11111111 11111111 01111111 11111111 11111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -2, -1, -1, 3};
  // {...3 0-bits... 11111111 11111010 11111111 11111111 111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 95, -1, -1, -1, 1};
  // {...3 0-bits... 00000000 00000000 00010000 000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 8, 0, 1};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_4_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3061.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1936.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -23182.938f : 
                        -18105.115f) : 
                     (data[2 /* sqft_living */] <1377.5f ? 
                        -15527.7f : 
                        -8991.494f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2348.5f ? 
                        -16716.166f : 
                        -11322.943f) : 
                     (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[5])) ? 
                        -3072.0366f : 
                        34007.75f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2052.5f ? 
                     (data[2 /* sqft_living */] <1290.5f ? 
                        -11064.347f : 
                        -1272.4359f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(61, 4, data[13]) || (GenModel.bitSetIsInRange(61, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 61, 4, data[13])) ? 
                        8483.138f : 
                        26520.535f)) : 
                 (data[2 /* sqft_living */] <1201.0f ? 
                    205250.94f : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2178.5f ? 
                        -4956.4507f : 
                        44674.293f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3956.5f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 1, data[12]) || (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT9, 42, 1, data[12])) ? 
                        -1335.1046f : 
                        14077.416f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(74, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 74, 0, data[13])) ? 
                        8083.049f : 
                        44767.79f)) : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3770.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(71, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 71, 4, data[13])) ? 
                        13389.24f : 
                        31818.496f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(71, 4, data[13]) || (GenModel.bitSetIsInRange(71, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT12, 71, 4, data[13])) ? 
                        40360.26f : 
                        75569.4f))) : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5406.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(62, 3, data[13]) || (GenModel.bitSetIsInRange(62, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT13, 62, 3, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1205.5f ? 
                        61030.473f : 
                        26837.166f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3071.5f ? 
                        59478.555f : 
                        122534.75f)) : 
                181560.48f)));
    return pred;
  } // constant pool size = 248B, number of visited nodes = 27, static init size = 828B
  // {00011110 00000000 01010100 11000001 10000000 00110011 10101111 10110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 42, -125, 1, -52, -11, 13, 1, 4};
  // {00000001 11000001 10000010 00010100 00000010 11000000 00000000 01001111 00010010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, -125, 65, 40, 64, 3, 0, -14, 72, 0};
  // {00011111 11111011 11010111 11110111 11101111 11111111 11111111 11111111 11111010 00101}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -33, -21, -17, -9, -1, -1, -1, 95, 20};
  // {00011111 01110011 11010110 11011111 11100111 11111011 11111111 11111111 11111010 01101}
  public static final byte[] GRPSPLIT3 = new byte[] {-8, -50, 107, -5, -25, -33, -1, -1, 95, 22};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00010000 10000000 00000000 00000000 10000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 8, 1, 0, 0, 1, 0, 0, 4};
  // {...4 0-bits... 00000000 00000000 01000000 00000000 00000000 00010000 11000010 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 2, 0, 0, 8, 67, 16};
  // {00010000 00000010 00000000 11000000 00000000 00000010 10101100 00100000 10000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 64, 0, 3, 0, 64, 53, 4, 1, 0};
  // {00001111 00100000 01000110 00000001 10000000 01000000 00000011 11010001 01000010 00100}
  public static final byte[] GRPSPLIT8 = new byte[] {-16, 4, 98, -128, 1, 2, -64, -117, 66, 4};
  // {...1 0-bits... 00000100 00000000 00000000 00000010 10100000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {32, 0, 0, 64, 5, 2};
  // {00000000 00000001 00000000 00000000 00001110 00011000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT10 = new byte[] {0, -128, 0, 0, 112, 24, 0, 0, 0, 0};
  // {...4 0-bits... 11111101 11111011 11011111 11100111 11111011 11111111 11111110 11111111 110}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, -33, -5, -25, -33, -1, 127, -1, 123};
  // {...4 0-bits... 00000010 00000000 01100000 00000000 00000000 00000000 00000000 00000000 001}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 0, 6, 0, 0, 0, 0, 0, 4};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00010001 00100001 000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 32, 0, 0, -120, -124, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_5_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3061.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1978.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[1 /* bathrooms */] <1.2421875f ? 
                        -21042.783f : 
                        -16065.651f) : 
                     (data[2 /* sqft_living */] <1404.5f ? 
                        -14246.81f : 
                        -8268.367f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <30771.5f ? 
                        -14328.201f : 
                        -6891.209f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[6])) ? 
                        -3945.0027f : 
                        13679.977f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2262.5f ? 
                     (data[2 /* sqft_living */] <1523.5f ? 
                        -8251.897f : 
                        660.7407f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(67, 4, data[13]) || (GenModel.bitSetIsInRange(67, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 67, 4, data[13])) ? 
                        9033.038f : 
                        29401.262f)) : 
                 (data[2 /* sqft_living */] <1201.0f ? 
                    184725.86f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[13])) ? 
                        -21174.87f : 
                        29650.979f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4075.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(74, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 74, 0, data[13])) ? 
                        -7826.782f : 
                        3673.4622f) : 
                    18089.023f) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[6])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3597.5f ? 
                        14614.471f : 
                        32542.441f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3418.5f ? 
                        36691.555f : 
                        86223.5f))) : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5297.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1932.5f ? 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[7])) ? 
                        37744.637f : 
                        78400.86f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3857.5f ? 
                        62895.777f : 
                        92815.03f)) : 
                153303.69f)));
    return pred;
  } // constant pool size = 218B, number of visited nodes = 26, static init size = 672B
  // {00011111 00000001 01010100 11000001 10000000 00111011 10101111 10110001 10000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, -128, 42, -125, 1, -36, -11, -115, 65, 4};
  // {00000000 11000000 10000010 00010100 00000010 11000000 00000000 01001110 00010000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 3, 65, 40, 64, 3, 0, 114, 8, 0};
  // {00011111 01110011 11010110 11011111 11100111 11111011 11111111 11111111 11111010 01111}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -50, 107, -5, -25, -33, -1, -1, 95, 30};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {24, 0, 0, 0};
  // {00010000 00000000 00010000 10000000 00000000 00000000 10000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 8, 1, 0, 0, 1, 0, 0, 4};
  // {...4 0-bits... 00000000 00000000 00000000 00000000 00000000 00010000 11000010 0000100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 8, 67, 16, 0};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, -1};
  // {00010000 00000000 00000000 11000000 00000000 00000010 10101101 00100000 10000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 3, 0, 64, -75, 4, 1, 0};
  // {01011111 10110011 01001110 11001111 10000101 01011011 11111111 11111101 11000111 00111}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, -51, 114, -13, -95, -38, -1, -65, -29, 28};
  // {11111111 11111011 11101111 11011111 11011111 11111011 11111111 11111101 11101111 00}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -33, -9, -5, -5, -33, -1, -65, -9, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {24, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_6_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2915.0f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2248.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1685.5f ? 
                        -18153.422f : 
                        -13047.236f) : 
                     (data[2 /* sqft_living */] <1460.5f ? 
                        -13654.294f : 
                        -7582.6265f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -12982.156f : 
                        -6810.0933f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -469.53806f : 
                        9884.612f))) : 
             (data[8 /* sqft_above */] <1176.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[13])) ? 
                     (data[9 /* sqft_basement */] <288.5f ? 
                        -81848.53f : 
                        -12309.246f) : 
                     (data[2 /* sqft_living */] <1243.5f ? 
                        -9955.101f : 
                        -827.98553f)) : 
                 (data[2 /* sqft_living */] <1223.5f ? 
                    238866.5f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[13])) ? 
                        4029.2087f : 
                        61277.273f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3806.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[13]) || (GenModel.bitSetIsInRange(75, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 75, 0, data[13])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT9, 42, 1, data[12])) ? 
                        -2245.7852f : 
                        11154.17f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3760.5f ? 
                        23718.107f : 
                        44493.254f)) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[6])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[13]) || (GenModel.bitSetIsInRange(75, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 75, 0, data[13])) ? 
                        18571.121f : 
                        55281.508f) : 
                    108806.734f)) : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4571.0f ? 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[6])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <18444.5f ? 
                        36970.32f : 
                        78945.086f) : 
                    96872.08f) : 
                139016.22f)));
    return pred;
  } // constant pool size = 227B, number of visited nodes = 25, static init size = 750B
  // {00011110 00000000 01010100 11000001 10000000 00110011 10101111 10110001 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 42, -125, 1, -52, -11, -115, 0, 4};
  // {00011111 11010011 11010110 11010111 10101111 11111011 11111111 11111111 11011010 00101}
  public static final byte[] GRPSPLIT1 = new byte[] {-8, -53, 107, -21, -11, -33, -1, -1, 91, 20};
  // {00000001 01100001 10000010 00000010 00100010 11001000 00000000 01001110 11001010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {-128, -122, 65, 64, 68, 19, 0, 114, 83, 0};
  // {00011111 01111011 11010111 11011111 11101111 11111111 11111111 11111111 11111010 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-8, -34, -21, -5, -9, -1, -1, -1, 95, 31};
  // {00000000 00100000 00000000 00000010 00000000 10000000 00000000 00000100 11001010 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 4, 0, 64, 0, 1, 0, 32, 83, 0};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, 127};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 32, 0, 0, 0, 0, 0, -128};
  // {00010000 00000000 00000000 10000000 00000000 00000010 10101100 00100000 00000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 1, 0, 64, 53, 4, 0, 0};
  // {00000111 00000000 00000100 00000000 00000000 00000001 00000011 11010001 10000000 001}
  public static final byte[] GRPSPLIT8 = new byte[] {-32, 0, 32, 0, 0, -128, -64, -117, 1, 4};
  // {...1 0-bits... 00000100 01001001 00100010 10000010 10010000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {32, -110, 68, 65, 9, 2};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {18, 0, 0, 0};
  // {00001000 00100010 01000100 01000001 00001000 00000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT11 = new byte[] {16, 68, 34, -126, 16, 0, 0, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {26, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_7_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2428.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[6])) ? 
                        -16474.424f : 
                        -7088.9663f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        -11311.117f : 
                        12639.113f)) : 
                 (data[2 /* sqft_living */] <1592.5f ? 
                     (data[2 /* sqft_living */] <1229.5f ? 
                        -9993.746f : 
                        -4950.4116f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(65, 6, data[13]) || (GenModel.bitSetIsInRange(65, 6, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 65, 6, data[13])) ? 
                        -3819.3635f : 
                        2945.7856f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4062.5f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(41, 1, data[12]) || (GenModel.bitSetIsInRange(41, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT7, 41, 1, data[12])) ? 
                        -5823.929f : 
                        2521.3057f) : 
                    16340.683f) : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4306.5f ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[6])) ? 
                        7646.048f : 
                        22163.846f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(65, 6, data[13]) || (GenModel.bitSetIsInRange(65, 6, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 65, 6, data[13])) ? 
                        26144.945f : 
                        79670.57f)))) : 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4128.5f ? 
             (data[8 /* sqft_above */] <1166.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 72, 3, data[13])) ? 
                     (data[9 /* sqft_basement */] <284.5f ? 
                        -73663.69f : 
                        -11324.784f) : 
                     (data[2 /* sqft_living */] <1241.5f ? 
                        -14212.644f : 
                        -2292.4292f)) : 
                 (data[2 /* sqft_living */] <1267.5f ? 
                    218149.78f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 72, 3, data[13])) ? 
                        7315.9043f : 
                        30503.7f))) : 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(56, 3, data[13]) || (GenModel.bitSetIsInRange(56, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT12, 56, 3, data[13])) ? 
                     (data[2 /* sqft_living */] <4407.5f ? 
                        53463.676f : 
                        14404.881f) : 
                    98000.73f) : 
                138877.19f)));
    return pred;
  } // constant pool size = 216B, number of visited nodes = 25, static init size = 684B
  // {00011100 00000000 00010100 11000000 00000000 00010010 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {56, 0, 40, 3, 0, 72, 49, 4, 0, 4};
  // {00000011 01000011 01000010 00000101 10000010 11100001 00100011 10011101 10000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-64, -62, 66, -96, 65, -121, -60, -71, 65, 0};
  // {00011111 01110011 11010111 11110111 11101111 11111111 11111111 11111111 11111010 10101}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -50, -21, -17, -9, -1, -1, -1, 95, 21};
  // {01101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {22, 0, 0, 0};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {26, 0, 0, 0};
  // {...6 0-bits... 11000000 10000000 00000000 01100000 00000000 01001000 11100100 000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 1, 0, 6, 0, 18, 39, 0, 0};
  // {00000011 00100011 01000010 00000001 10000000 01001001 00100011 11011101 11001010 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {-64, -60, 66, -128, 1, -110, -60, -69, 83, 0};
  // {...1 0-bits... 00001000 01000000 10000000 10000010 10000100}
  public static final byte[] GRPSPLIT7 = new byte[] {16, 2, 1, 65, 33, 1};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {30, 0, 0, 0};
  // {...6 0-bits... 00001000 00010000 10000000 00000000 00000000 01001000 00000000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 8, 1, 0, 0, 18, 0, 0, 1};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, 127};
  // {...3 0-bits... 10000000 00000000 00000100 00000000 00000000 00000100 01100001 00000000 00000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 32, 0, 0, 32, -122, 0, -128};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00010100 01100}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 32, 0, 0, 40, 6};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_8_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3033.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2243.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1515.5f ? 
                        -14852.113f : 
                        -10557.466f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                        -7571.2407f : 
                        5233.2075f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -8742.456f : 
                        -1944.5568f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                        5040.7964f : 
                        19474.87f))) : 
             (data[8 /* sqft_above */] <1176.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[13])) ? 
                     (data[2 /* sqft_living */] <1201.5f ? 
                        -65379.83f : 
                        -10103.461f) : 
                     (data[2 /* sqft_living */] <1243.5f ? 
                        -7534.9214f : 
                        602.5667f)) : 
                 (data[8 /* sqft_above */] <1191.5f ? 
                    214372.72f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 72, 3, data[13])) ? 
                        4284.505f : 
                        51409.78f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[13])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.6386719f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(41, 1, data[12]) || (GenModel.bitSetIsInRange(41, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT10, 41, 1, data[12])) ? 
                        -3737.8196f : 
                        12793.377f) : 
                    -16490.15f) : 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3537.5f ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[6])) ? 
                        8731.747f : 
                        30297.018f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.859375f ? 
                        21446.084f : 
                        48512.43f))) : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5524.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3846.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(62, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT12, 62, 3, data[13])) ? 
                        10207.695f : 
                        39091.05f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(62, 3, data[13]) || (GenModel.bitSetIsInRange(62, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT13, 62, 3, data[13])) ? 
                        37575.203f : 
                        89811.445f)) : 
                106243.08f)));
    return pred;
  } // constant pool size = 232B, number of visited nodes = 26, static init size = 756B
  // {00011000 00000000 00010100 11000001 10000000 00010011 10101111 10110000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 40, -125, 1, -56, -11, 13, 0, 4};
  // {00000011 11000011 11000010 00000100 00000010 11100000 00000000 01001111 10010010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-64, -61, 67, 32, 64, 7, 0, -14, 73, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {30, 0, 0, 0};
  // {00000110 00100010 01000010 00000010 00100000 10001000 00000000 00000111 11001010 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {96, 68, 66, 64, 4, 17, 0, -32, 83, 0};
  // {00000001 01011001 10000000 00010000 00000110 01100000 01010000 01001000 00010000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, -102, 1, 8, 96, 6, 10, 18, 8, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {24, 0, 0, 0};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 10111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -2, -1, -1, -1, -3, -1, 127};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 32, 0, 0, 0, 0, 0, -128};
  // {00011100 00100010 00000010 11000000 00000000 00000010 10101111 01100000 10000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {56, 68, 64, 3, 0, 64, -11, 6, 1, 0};
  // {10100011 00000001 01000100 00000001 10000100 01011001 00000000 10011101 00000010 01100}
  public static final byte[] GRPSPLIT9 = new byte[] {-59, -128, 34, -128, 33, -102, 0, -71, 64, 6};
  // {...1 0-bits... 00000100 00000000 00000000 00100010 10100100}
  public static final byte[] GRPSPLIT10 = new byte[] {32, 0, 0, 68, 37, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {8, 0, 0, 0};
  // {...3 0-bits... 10111110 11111111 11101101 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT12 = new byte[] {125, -1, -73, -1, -1, -1, -1, 63};
  // {...3 0-bits... 00000000 00000000 00010110 00000000 00000000 00000000 00100000 000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 104, 0, 0, 0, 4, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_9_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2579.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1716.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -14598.707f : 
                        -9916.5f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -10567.5f : 
                        -4669.3335f)) : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1803.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(67, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 67, 4, data[13])) ? 
                        -8584.514f : 
                        -3797.9429f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                        -299.28598f : 
                        14113.982f))) : 
             (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3722.5f ? 
                        77.84829f : 
                        10887.24f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4102.5f ? 
                        12994.337f : 
                        33983.984f)) : 
                60539.117f)) : 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5253.0f ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <7364.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2334.5f ? 
                     (data[2 /* sqft_living */] <1268.5f ? 
                        -26675.305f : 
                        -2500.073f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1943.0f ? 
                        32164.492f : 
                        13326.343f)) : 
                 (data[2 /* sqft_living */] <1363.5f ? 
                    176285.08f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 72, 3, data[13])) ? 
                        14208.427f : 
                        137221.17f))) : 
            120698.805f));
    return pred;
  } // constant pool size = 167B, number of visited nodes = 20, static init size = 510B
  // {00010000 00000000 00010100 11000000 00000000 00000010 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 40, 3, 0, 64, 49, 4, 0, 4};
  // {00001011 01000011 11000010 00000101 10000010 11110001 00100011 10011101 10000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, -62, 67, -96, 65, -113, -60, -71, 65, 0};
  // {00000000 10110000 00000000 00110010 00100100 00001000 01010000 01000010 00110000 00001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 13, 0, 76, 36, 16, 10, 66, 12, 16};
  // {00000100 00110000 00000000 00010000 00101100 00001000 01010000 00000010 01011000 10000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 12, 0, 8, 52, 16, 10, 64, 26, 1};
  // {...4 0-bits... 00010100 00000000 00100000 01000000 00000110 00010010 00111001 1000000}
  public static final byte[] GRPSPLIT4 = new byte[] {40, 0, 4, 2, 96, 72, -100, 1, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {28, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001110 00000010 01000000 00000001 10000000 00000001 00100011 10000100 10000010 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {112, 64, 2, -128, 1, -128, -60, 33, 65, 0};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00000000 00100001 00000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 32, 0, 0, 0, -124, 0, -128};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_10_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2579.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1820.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -25853.906f : 
                        -10525.828f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -8702.138f : 
                        -2485.5356f)) : 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1685.5f ? 
                     (data[1 /* bathrooms */] <1.1328125f ? 
                        -7586.966f : 
                        -2972.576f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(67, 4, data[13]) || (GenModel.bitSetIsInRange(67, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 67, 4, data[13])) ? 
                        1298.0208f : 
                        19139.82f))) : 
             (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(43, 0, data[12]) || (GenModel.bitSetIsInRange(43, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT7, 43, 0, data[12])) ? 
                        -1833.172f : 
                        5935.408f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4102.5f ? 
                        9636.537f : 
                        27288.328f)) : 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2910.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(69, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 69, 5, data[13])) ? 
                        -9308.085f : 
                        36291.03f) : 
                    73773.84f))) : 
         (data[1 /* bathrooms */] <1.8720703f ? 
             (data[2 /* sqft_living */] <1329.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 72, 3, data[13])) ? 
                    -57957.453f : 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[7])) ? 
                        -21685.426f : 
                        -4447.1035f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 72, 3, data[13])) ? 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[7])) ? 
                        -22691.791f : 
                        -8964.51f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2518.5f ? 
                        9728.101f : 
                        36213.99f))) : 
             (data[2 /* sqft_living */] <1256.5f ? 
                200599.03f : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5237.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(41, 3, data[12]) && !GenModel.bitSetContains(GRPSPLIT13, 41, 3, data[12])) ? 
                        -18659.738f : 
                        22854.13f) : 
                    108628.93f))));
    return pred;
  } // constant pool size = 226B, number of visited nodes = 25, static init size = 744B
  // {00010000 00000000 00010100 11000000 00000000 00000010 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 40, 3, 0, 64, 49, 4, 0, 4};
  // {00001011 01000011 11000010 00000101 10000000 11110001 00100011 10011101 10000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, -62, 67, -96, 1, -113, -60, -71, 65, 0};
  // {11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -1, -1, -1, -1, -1, -1, -1, -1, 23};
  // {00000100 00100000 00000000 00010000 00100010 00001000 00010000 00000010 01011000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 4, 0, 8, 68, 16, 8, 64, 26, 0};
  // {...4 0-bits... 00000000 00000000 00000000 00000000 00000000 00010010 00000001 0001100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 72, -128, 24, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 0, 0, 0};
  // {00001110 00100010 01000000 00000001 10000000 01001001 00100011 11010101 10000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {112, 68, 2, -128, 1, -110, -60, -85, 1, 0};
  // {00010000 00000000 00010000 01100001 01000010 000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 8, -122, 66, 0};
  // {...5 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 01100001 00000001}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0, 0, 0, -122, -128, 16};
  // {...3 0-bits... 01111111 11111111 01111101 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-2, -1, -66, -1, -1, -1, -1, -1, 127};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 0, 0};
  // {...3 0-bits... 11111111 11111111 01011111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -6, -1, -1, -1, -1, -1, 127};
  // {11101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {23, 0, 0, 0};
  // {...3 0-bits... 11111011 11111110 11111111 11111111 111111}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, 127, -1, -1, -1, 1};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_11_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2579.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1326.5f ? 
                        -13144.757f : 
                        -8685.6045f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[6])) ? 
                        -6997.94f : 
                        12343.953f)) : 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1565.5f ? 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -4554.998f : 
                        2234.4368f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(67, 4, data[13]) || (GenModel.bitSetIsInRange(67, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 67, 4, data[13])) ? 
                        536.2897f : 
                        9267.531f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT8, 43, 0, data[12])) ? 
                        -11159.238f : 
                        -3646.4573f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.6054688f ? 
                        2357.218f : 
                        -13550.681f)) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[6])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3626.5f ? 
                        6806.0864f : 
                        17963.059f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2701.0f ? 
                        19993.248f : 
                        73024.89f)))) : 
         (data[3 /* sqft_lot */] <6928.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2302.5f ? 
                 (data[2 /* sqft_living */] <1308.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1102.5f ? 
                        -18678.736f : 
                        -37830.89f) : 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[7])) ? 
                        -5943.943f : 
                        14441.449f)) : 
                 (data[4 /* floors */] <1.7421875f ? 
                     (data[11 /* yr_renovated */] <1007.5f ? 
                        -5729.0806f : 
                        13650.569f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1957.5f ? 
                        34293.156f : 
                        10497.443f))) : 
             (data[2 /* sqft_living */] <1339.5f ? 
                144902.38f : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 72, 3, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4156.5f ? 
                        11834.495f : 
                        89886.71f) : 
                    142027.02f))));
    return pred;
  } // constant pool size = 212B, number of visited nodes = 27, static init size = 612B
  // {00010000 00000000 00010000 11000000 00000000 00000000 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 3, 0, 0, 49, 4, 0, 4};
  // {00001011 01000001 01000110 00000101 10000000 11110011 00100011 10010101 10000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, -126, 98, -96, 1, -49, -60, -87, 65, 0};
  // {00011011 01110011 11110111 11110111 11101111 11111111 11111111 11111111 11111010 00101}
  public static final byte[] GRPSPLIT2 = new byte[] {-40, -50, -17, -17, -9, -1, -1, -1, 95, 20};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {26, 0, 0, 0};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {17, 0, 0, 0};
  // {...4 0-bits... 00000000 00000000 00000000 00000000 00000000 00110010 00110001 0001100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 76, -116, 24, 0};
  // {00001110 00100011 01000110 00000001 10010000 01011011 00100011 11010101 10001010 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {112, -60, 98, -128, 9, -38, -60, -85, 81, 0};
  // {11111111 11111011 11010111 11011111 11111111 11111111 10101111 11111101 11111010 01101}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -33, -21, -5, -1, -1, -11, -65, 95, 22};
  // {00000000 00000000 00100000 00000000 00101100 000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 4, 0, 52, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {16, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 01100001 00000000 00000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 0, 0, 0, -122, 0, -128};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_12_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3061.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2252.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                        -8097.907f : 
                        1654.0795f) : 
                     (data[2 /* sqft_living */] <1399.5f ? 
                        -6016.8794f : 
                        -361.74692f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -7694.261f : 
                        -1611.586f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        5721.2056f : 
                        19484.0f))) : 
             (data[2 /* sqft_living */] <1206.0f ? 
                164774.83f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10632.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[13])) ? 
                        -14704.145f : 
                        7175.9414f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3671875f ? 
                        4383.454f : 
                        123879.805f)))) : 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2109.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[13]) || (GenModel.bitSetIsInRange(75, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 75, 0, data[13])) ? 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[6])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(75, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 75, 0, data[13])) ? 
                        -6269.729f : 
                        6867.2065f) : 
                     (data[4 /* floors */] <1.7421875f ? 
                        -2610.637f : 
                        33548.95f)) : 
                 (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[7])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1055.0f ? 
                        26839.291f : 
                        3177.657f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(75, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 75, 0, data[13])) ? 
                        28151.986f : 
                        63733.473f))) : 
            87293.92f));
    return pred;
  } // constant pool size = 199B, number of visited nodes = 21, static init size = 678B
  // {00010000 00000000 00010000 10000000 00000000 00000000 10000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 1, 0, 0, 1, 0, 0, 4};
  // {00001001 01000011 01000110 01000101 00000000 01110011 00100111 10111101 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-112, -62, 98, -94, 0, -50, -28, -67, 0, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {28, 0, 0, 0};
  // {00001110 00000010 01000100 01000001 10100000 10011001 00101111 10110111 11001010 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {112, 64, 34, -126, 5, -103, -12, -19, 83, 0};
  // {00011111 01111011 11010111 11011111 11101111 11111011 11111111 11111111 11111010 01101}
  public static final byte[] GRPSPLIT4 = new byte[] {-8, -34, -21, -5, -9, -33, -1, -1, 95, 22};
  // {00000000 00000000 00000000 00000000 00000000 00000001 00001100 00000000 10000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, -128, 48, 0, 1, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0, 0, 32, 0, 0, 0};
  // {00011100 00100000 01000110 11000000 00000000 00000010 10101111 11110000 11000000 000}
  public static final byte[] GRPSPLIT7 = new byte[] {56, 4, 98, 3, 0, 64, -11, 15, 3, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {24, 0, 0, 0};
  // {11111110 11110011 01101111 11011111 10011111 11111010 11111111 11110101 11100111 001}
  public static final byte[] GRPSPLIT9 = new byte[] {127, -49, -10, -5, -7, 95, -1, -81, -25, 4};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 0, 0, 0};
  // {11111011 11111111 11111011 10111111 11111111 11111111 11111101 01111111 11111111 111}
  public static final byte[] GRPSPLIT11 = new byte[] {-33, -1, -33, -3, -1, -1, -65, -2, -1, 7};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_13_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2579.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.1328125f ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                        -8248.044f : 
                        2174.0813f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -6305.5503f : 
                        -1603.9445f)) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2043.5f ? 
                        -2992.3389f : 
                        3915.5107f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        2664.155f : 
                        23715.889f))) : 
             (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3722.5f ? 
                        -493.61923f : 
                        7591.69f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[6])) ? 
                        8344.898f : 
                        22290.438f)) : 
                45694.96f)) : 
         (data[8 /* sqft_above */] <1176.5f ? 
             (data[2 /* sqft_living */] <1194.0f ? 
                 (data[3 /* sqft_lot */] <3456.5f ? 
                    -19871.615f : 
                    -74467.15f) : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1594.5f ? 
                     (data[0 /* bedrooms */] <2.5f ? 
                        -16491.484f : 
                        -6264.643f) : 
                    713.18604f)) : 
             (data[2 /* sqft_living */] <1339.5f ? 
                197959.22f : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 72, 3, data[13])) ? 
                     (data[4 /* floors */] <1.734375f ? 
                        -24052.426f : 
                        -16891.34f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1807.5f ? 
                        18705.717f : 
                        86554.414f)))));
    return pred;
  } // constant pool size = 175B, number of visited nodes = 22, static init size = 510B
  // {00010000 00000000 00010000 11000000 00000000 00000000 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 3, 0, 0, 49, 4, 0, 4};
  // {00001011 00000001 01000110 00000101 10000000 11110011 00100011 10010101 10000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, -128, 98, -96, 1, -49, -60, -87, 65, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {28, 0, 0, 0};
  // {00000100 01100000 10000000 00000000 00100110 00001000 01010000 00001010 01011100 10000}
  public static final byte[] GRPSPLIT3 = new byte[] {32, 6, 1, 0, 100, 16, 10, 80, 58, 1};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {30, 0, 0, 0};
  // {00000001 00000000 00000100 00000001 10000000 00000000 00000000 10000001 10000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 0, 32, -128, 1, 0, 0, -127, 1, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00001110 00000010 01000100 00000001 10000000 00000011 00100011 10000100 10000010 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {112, 64, 34, -128, 1, -64, -60, 33, 65, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {30, 0, 0, 0};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, -1};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_14_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2183.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (data[1 /* bathrooms */] <1.3710938f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -44668.625f : 
                        -9421.817f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[6])) ? 
                        -5845.6284f : 
                        4256.785f)) : 
                 (data[2 /* sqft_living */] <1390.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(60, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 60, 4, data[13])) ? 
                        -18433.242f : 
                        -4380.987f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(60, 4, data[13]) || (GenModel.bitSetIsInRange(60, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 60, 4, data[13])) ? 
                        -2135.468f : 
                        3046.3203f))) : 
             (Double.isNaN(data[10]) || data[10 /* yr_built */] <1990.5f ? 
                 (data[2 /* sqft_living */] <1467.5f ? 
                    -60913.44f : 
                    -18786.389f) : 
                187116.08f)) : 
         (data[2 /* sqft_living */] <2199.5f ? 
            107954.09f : 
             (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 76, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4884.5f ? 
                        -413.9991f : 
                        39291.03f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2505.5f ? 
                        7462.552f : 
                        22415.178f)) : 
                63828.484f)));
    return pred;
  } // constant pool size = 138B, number of visited nodes = 16, static init size = 432B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {00001001 11000011 11000010 01000101 00000000 01110011 00100011 11111111 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-112, -61, 67, -94, 0, -50, -60, -1, 0, 0};
  // {11101101 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT2 = new byte[] {-73, -1, -1, -1, -1, -1, -2, -1, -1, 27};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {30, 0, 0, 0};
  // {...4 0-bits... 11111111 11101011 11111011 11111111 11111110 11111111 11111101}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -41, -33, -1, 127, -1, -65, 15};
  // {...4 0-bits... 10010000 00000000 00000100 00000000 00000001 00110010 00001011}
  public static final byte[] GRPSPLIT5 = new byte[] {9, 0, 32, 0, -128, 76, -48, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00011110 00000000 00000100 11000000 00000000 00000011 10101111 10110001 10000000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {120, 0, 32, 3, 0, -64, -11, -115, 1, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_15_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2617.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (data[8 /* sqft_above */] <1326.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -11784.775f : 
                        -6064.0117f) : 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(41, 0, data[12]) || (GenModel.bitSetIsInRange(41, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 41, 0, data[12])) ? 
                        -5422.5684f : 
                        -787.90784f)) : 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2103.5f ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        -2670.3496f : 
                        6411.227f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(67, 4, data[13]) || (GenModel.bitSetIsInRange(67, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 67, 4, data[13])) ? 
                        3140.0623f : 
                        32437.658f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                 (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                     (data[10 /* yr_built */] <1980.5f ? 
                        -3656.4985f : 
                        3318.8137f) : 
                    26103.258f) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[6])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1054.5f ? 
                        12165.977f : 
                        -869.61926f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[13])) ? 
                        15251.323f : 
                        50780.223f)))) : 
         (data[2 /* sqft_living */] <1248.0f ? 
            128622.88f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <11080.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 72, 3, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <202.5f ? 
                        -24567.51f : 
                        -14539.3955f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3613281f ? 
                        -9184.815f : 
                        15007.139f)) : 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 2, data[12]) || (GenModel.bitSetIsInRange(42, 2, data[12]) && !GenModel.bitSetContains(GRPSPLIT11, 42, 2, data[12])) ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[6])) ? 
                        -1033.4347f : 
                        60572.96f) : 
                    130836.12f))));
    return pred;
  } // constant pool size = 199B, number of visited nodes = 22, static init size = 654B
  // {00010000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 1, 0, 0, 0, 0, 0, 4};
  // {00001011 01000011 01000110 01000101 10000000 11111011 00100111 10111101 10000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, -62, 98, -94, 1, -33, -28, -67, 65, 0};
  // {00111011 11000111 11110110 11110111 11111101 11111111 01110111 11111111 11110110 11101}
  public static final byte[] GRPSPLIT2 = new byte[] {-36, -29, 111, -17, -65, -1, -18, -1, 111, 23};
  // {00010111 00000000 01001000 11100010 00110000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {-24, 0, 18, 71, 12, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {28, 0, 0, 0};
  // {...4 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 01010011 0001100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, -54, 24, 0};
  // {00001110 00000000 00000110 01000000 10000000 00000011 10101111 10100100 10000010 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {112, 0, 96, 2, 1, -64, -11, 37, 65, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {30, 0, 0, 0};
  // {00000000 00000000 00000110 00000000 00000000 00000001 10101100 00100000 00000000 00000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 96, 0, 0, -128, 53, 4, 0, 0};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, -1};
  // {...2 0-bits... 00000000 00000000 00001000 00000000 01000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 16, 0, 2, 2};
  // {01100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {6, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_16_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3806.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1672.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                        -7423.466f : 
                        407.3265f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[6])) ? 
                        -3032.9995f : 
                        3756.6577f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.875f ? 
                        -987.93115f : 
                        -37160.793f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                        4084.6245f : 
                        18084.604f))) : 
             (data[8 /* sqft_above */] <1175.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[13])) ? 
                    -66759.42f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 72, 3, data[13])) ? 
                        -22005.87f : 
                        -3595.915f)) : 
                 (data[2 /* sqft_living */] <1351.5f ? 
                    188448.55f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 72, 3, data[13])) ? 
                        -19955.361f : 
                        16222.471f)))) : 
         (data[10 /* yr_built */] <1974.5f ? 
            76672.22f : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(69, 2, data[13]) || (GenModel.bitSetIsInRange(69, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 69, 2, data[13])) ? 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT10, 42, 1, data[12])) ? 
                        -3230.5933f : 
                        24621.732f) : 
                    -10946.961f) : 
                 (data[9 /* sqft_basement */] <433.0f ? 
                    30207.205f : 
                    51390.41f))));
    return pred;
  } // constant pool size = 173B, number of visited nodes = 19, static init size = 570B
  // {00010000 00000000 00010000 10000000 00000000 00000010 10100100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 1, 0, 64, 37, 4, 0, 4};
  // {00011001 11010010 10010110 11010111 01000101 01101011 11110111 11111111 10010010 00101}
  public static final byte[] GRPSPLIT1 = new byte[] {-104, 75, 105, -21, -94, -42, -17, -1, 73, 20};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {28, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {30, 0, 0, 0};
  // {00000111 00000010 00000100 00000001 00000000 00011001 00001011 11011001 11001000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {-32, 64, 32, -128, 0, -104, -48, -101, 19, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {30, 0, 0, 0};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, -1};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -2, -1, -1, -1, -1, -1, -1};
  // {...2 0-bits... 00100000 10000101 00001011 00000100 00100000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, -95, -48, 32, 4, 0, 0, 0, 0};
  // {...1 0-bits... 01111110 11101011 11111111 11111111 01111011 1}
  public static final byte[] GRPSPLIT10 = new byte[] {126, -41, -1, -1, -34, 3};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_17_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2342.5f ? 
             (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (data[8 /* sqft_above */] <1325.5f ? 
                        -6113.139f : 
                        -2606.6216f) : 
                     (data[2 /* sqft_living */] <1528.5f ? 
                        -1775.944f : 
                        3091.1404f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -2247.8435f : 
                        10024.43f) : 
                    32275.693f)) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3806.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 42, 1, data[12])) ? 
                        -2473.7048f : 
                        4664.8213f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 76, 0, data[13])) ? 
                        8153.6934f : 
                        39669.54f)) : 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1974.5f ? 
                     (data[11 /* yr_renovated */] <1983.5f ? 
                        39400.406f : 
                        21966.09f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(67, 4, data[13]) || (GenModel.bitSetIsInRange(67, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 67, 4, data[13])) ? 
                        6364.0596f : 
                        26848.037f)))) : 
         (data[2 /* sqft_living */] <1248.0f ? 
            114255.76f : 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 2, data[12]) || (GenModel.bitSetIsInRange(42, 2, data[12]) && !GenModel.bitSetContains(GRPSPLIT9, 42, 2, data[12])) ? 
                     (data[9 /* sqft_basement */] <350.5f ? 
                        -24846.115f : 
                        -7332.9624f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[6])) ? 
                        8307.106f : 
                        39583.16f)) : 
                 (data[11 /* yr_renovated */] <2001.5f ? 
                    157185.64f : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3051.5f ? 
                        -3794.984f : 
                        33662.375f)))));
    return pred;
  } // constant pool size = 190B, number of visited nodes = 22, static init size = 600B
  // {00010000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 1, 0, 0, 0, 0, 0, 4};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {28, 0, 0, 0};
  // {00001000 00000000 00000000 00000100 00000000 00000011 00100011 10010000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 32, 0, -64, -60, 9, 0, 0};
  // {00000000 00000000 00000100 00000001 00000000 00000000 10001000 10000001 00000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 32, -128, 0, 0, 17, -127, 0, 0};
  // {00000101 00000000 00000000 01000000 00000000 00010000 00010000 00101000 11010000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {-96, 0, 0, 2, 0, 8, 8, 20, 11, 0};
  // {00001001 00100000 00000000 00000000 00000000 00000010 10100110 00100000 11000010 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {-112, 4, 0, 0, 0, 64, 101, 4, 67, 0};
  // {...1 0-bits... 00101000 00011001 10100000 11000010 10110000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {20, -104, 5, 67, 13, 2};
  // {00000000 00000001 01000010 01000000 00001000 00000000 00001000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, -128, 66, 2, 16, 0, 16, 0, 0, 0};
  // {...4 0-bits... 00010010 00000000 00000000 00000000 00000000 00000010 00100000 0000100}
  public static final byte[] GRPSPLIT8 = new byte[] {72, 0, 0, 0, 0, 64, 4, 16, 0};
  // {...2 0-bits... 11111101 11111111 01111111 11111111 10111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, -1, -2, -1, -3, 3};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {30, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_18_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (data[1 /* bathrooms */] <1.3710938f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (data[2 /* sqft_living */] <1266.5f ? 
                    -95943.78f : 
                    -27264.227f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -12958.57f : 
                        -6865.999f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -3375.1438f : 
                        4611.776f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2342.5f ? 
                     (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[5])) ? 
                        -1731.2325f : 
                        26914.748f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        3193.8003f : 
                        24305.883f)) : 
                 (data[2 /* sqft_living */] <1445.5f ? 
                    165253.38f : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9321.5f ? 
                        -7177.8267f : 
                        80971.71f)))) : 
        62708.664f);
    return pred;
  } // constant pool size = 125B, number of visited nodes = 13, static init size = 426B
  // {11101101 11111111 11101111 10111111 11111111 11101111 01111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-73, -1, -9, -3, -1, -9, -2, -1, -1, 27};
  // {00000001 10000000 00000100 00010000 00000010 10101011 01100011 11111110 10000000 01000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, 1, 32, 8, 64, -43, -58, 127, 1, 2};
  // {11111011 11101110 01111110 11011111 11111111 11111011 11111011 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, 119, 126, -5, -1, -33, -33, -1, -1, 31};
  // {00000000 10000000 00000100 00000000 00000000 00000001 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 1, 32, 0, 0, -128, 0, 4, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 10000000 00000000 00000010 10101110 00100000 11000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 1, 0, 64, 117, 4, 3, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_19_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
             (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[12])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1980.5f ? 
                        -6385.3223f : 
                        -3434.387f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        -2679.3105f : 
                        4548.092f)) : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2561.5f ? 
                    7344.3853f : 
                    13474.878f)) : 
             (data[1 /* bathrooms */] <1.3710938f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[13])) ? 
                     (data[2 /* sqft_living */] <1277.5f ? 
                        -86349.41f : 
                        -24537.803f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[13])) ? 
                        -4063.7546f : 
                        3427.8694f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 72, 3, data[13])) ? 
                     (data[8 /* sqft_above */] <1685.5f ? 
                        -1548.7607f : 
                        5941.456f) : 
                     (data[2 /* sqft_living */] <1537.5f ? 
                        135601.48f : 
                        7436.4546f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
            1067.4935f : 
            87414.99f));
    return pred;
  } // constant pool size = 142B, number of visited nodes = 15, static init size = 480B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00011111 00000010 01010100 11000101 10000000 01111011 10101111 10110000 10000010 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {-8, 64, 42, -93, 1, -34, -11, 13, 65, 4};
  // {00000000 00000000 00000000 01000000 00000000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 2, 0, 0};
  // {00011111 01110011 11010111 11110111 11001111 11111011 11111111 11111111 11110010 00101}
  public static final byte[] GRPSPLIT3 = new byte[] {-8, -50, -21, -17, -13, -33, -1, -1, 79, 20};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {30, 0, 0, 0};
  // {...3 0-bits... 01101111 11111111 01111101 11111111 11111111 01111011 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-10, -1, -66, -1, -1, -34, -1, -1, 127};
  // {...3 0-bits... 00000000 00000000 00100000 00000000 00000000 00011000 00000001 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 4, 0, 0, 24, -128, 0, 0};
  // {...3 0-bits... 00000000 00000000 10000100 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 33, 0, 0, 0, 0, 0, -128};
  // {11111111 11111111 11111111 11111111 11111111 01011111 11111111 11111111 10110111 10111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -6, -1, -1, -19, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_20_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <6140.5f ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2184.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1334.5f ? 
                        -19737.467f : 
                        -3944.9067f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -3046.6155f : 
                        191.74525f)) : 
                 (data[8 /* sqft_above */] <1216.5f ? 
                    130528.11f : 
                     (data[8 /* sqft_above */] <1516.5f ? 
                        -47936.125f : 
                        -20250.723f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[12])) ? 
                        -3603.5798f : 
                        1794.4175f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2418.5f ? 
                        4115.5327f : 
                        15612.678f)) : 
                 (data[11 /* yr_renovated */] <1983.5f ? 
                    -16578.713f : 
                    115794.71f))) : 
        54957.93f);
    return pred;
  } // constant pool size = 116B, number of visited nodes = 13, static init size = 372B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {00101011 11111111 11111111 11111111 11101111 11111111 01110111 11111111 11111110 11001}
  public static final byte[] GRPSPLIT1 = new byte[] {-44, -1, -1, -1, -9, -1, -18, -1, 127, 19};
  // {00001001 10000001 00000000 00000100 00000000 01010011 00100011 10010000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {-112, -127, 0, 32, 0, -54, -60, 9, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00010110 00000000 00000110 10000000 00000000 00000011 10101111 00110001 10000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {104, 0, 96, 1, 0, -64, -11, -116, 1, 0};
  // {00010101 00000100 11000001 01100001 01011010 0110}
  public static final byte[] GRPSPLIT5 = new byte[] {-88, 32, -125, -122, 90, 6};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_21_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (data[1 /* bathrooms */] <1.3710938f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                -59260.934f : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        -17685.412f : 
                        -6309.836f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -3873.251f : 
                        3883.8972f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3158.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -2313.096f : 
                        1540.4114f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        649.6249f : 
                        9474.026f)) : 
                 (data[2 /* sqft_living */] <1472.5f ? 
                    134325.25f : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <11036.5f ? 
                        -10386.791f : 
                        63997.195f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
            1143.0024f : 
            77533.84f));
    return pred;
  } // constant pool size = 141B, number of visited nodes = 13, static init size = 522B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {11101101 11111111 11101111 10111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-73, -1, -9, -3, -1, -1, -1, -1, -1, 27};
  // {11111011 11101110 01111110 11011111 11111111 01101011 01111011 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, 119, 126, -5, -1, -42, -34, -1, -1, 31};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00000000 10000000 00000100 00000000 00000000 00000001 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 32, 0, 0, -128, 0, 4, 0, 0};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 4};
  // {00011010 00100001 00000100 01000101 10100000 00000011 10101111 10010100 10000010 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {88, -124, 32, -94, 5, -64, -11, 41, 65, 0};
  // {11011111 11110000 01111101 11001111 11010101 01000010 11111110 11110101 11100101 00111}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, 15, -66, -13, -85, 66, 127, -81, -89, 28};
  // {11111111 11111111 11111111 11111111 11111111 01011111 11111111 11111111 10110111 10111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -6, -1, -1, -19, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_22_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (data[1 /* bathrooms */] <1.8720703f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                -55148.766f : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                    -23882.508f : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                        -2744.1152f : 
                        6592.6904f))) : 
             (data[2 /* sqft_living */] <1206.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 76, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 76, 0, data[13])) ? 
                        -20021.61f : 
                        -5407.409f) : 
                    179585.62f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 76, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 76, 0, data[13])) ? 
                        -23725.113f : 
                        660.8081f) : 
                     (data[9 /* sqft_basement */] <673.0f ? 
                        90933.46f : 
                        -3788.5928f)))) : 
        49715.43f);
    return pred;
  } // constant pool size = 117B, number of visited nodes = 11, static init size = 426B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 27};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {28, 0, 0, 0};
  // {00000000 00010000 10010000 00010000 00000000 00000000 00100010 00000000 10000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 9, 8, 0, 0, 68, 0, 1, 0};
  // {11111111 11111111 11111011 11111111 11111111 11111101 11110110 10001011 11111111 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -33, -1, -1, -65, 111, -47, -1, 15};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0010}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 15};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_23_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4789.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2560.5f ? 
                        -2584.1677f : 
                        1841.7001f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1402.5f ? 
                        -5831.139f : 
                        -22221.062f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -10791.021f : 
                        2158.3699f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        11046.752f : 
                        23900.484f))) : 
             (data[2 /* sqft_living */] <1163.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[13])) ? 
                    -84514.08f : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.8867188f ? 
                        -1262.1056f : 
                        -10615.758f)) : 
                 (data[2 /* sqft_living */] <1205.5f ? 
                    190027.69f : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(42, 2, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 42, 2, data[12])) ? 
                        -23355.514f : 
                        3013.5757f)))) : 
        39034.15f);
    return pred;
  } // constant pool size = 124B, number of visited nodes = 14, static init size = 396B
  // {00011111 00000000 00010110 11000101 00000000 00011011 10101111 10110000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, 0, 104, -93, 0, -40, -11, 13, 0, 4};
  // {01101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {22, 0, 0, 0};
  // {00000000 00100101 00000000 00000000 10000000 00000000 00000000 00000000 11010000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -92, 0, 0, 1, 0, 0, 0, 11, 0};
  // {11111111 11110111 11111111 11101111 11011111 11011111 11111111 11111111 11111111 01111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -17, -1, -9, -5, -5, -1, -1, -1, 30};
  // {00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 10010000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -128, 0, 0, 0, 0, 0, 0, 9, 0};
  // {...3 0-bits... 11111111 11111111 01011111 11111111 11111111 11111011 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -6, -1, -1, -33, -1, -1, 127};
  // {...2 0-bits... 11111111 11111101 01111111 11111111 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -65, -2, -1, -1, 3};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_24_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1655.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1277.5f ? 
                        -8091.478f : 
                        -3819.5408f) : 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        -1945.2646f : 
                        2833.9014f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3446.5f ? 
                        -287.4915f : 
                        7087.798f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4390.5f ? 
                        11853.961f : 
                        -9493.739f))) : 
             (data[2 /* sqft_living */] <1276.5f ? 
                133168.28f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <11124.5f ? 
                     (data[2 /* sqft_living */] <1524.5f ? 
                        -43938.39f : 
                        -8448.556f) : 
                    55053.38f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
            710.1969f : 
            67584.016f));
    return pred;
  } // constant pool size = 108B, number of visited nodes = 13, static init size = 324B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00010000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 1, 0, 0, 0, 0, 0, 4};
  // {00001001 11000010 11010110 10100111 01101101 01101011 01110011 11011110 01110010 00101}
  public static final byte[] GRPSPLIT2 = new byte[] {-112, 67, 107, -27, -74, -42, -50, 123, 78, 20};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {17, 0, 0, 0};
  // {00010011 00000000 00000000 00000000 00000000 00000001 10101100 00110000 10000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {-56, 0, 0, 0, 0, -128, 53, 12, 1, 0};
  // {11111111 11111111 11111111 11111111 11111111 01011111 11111111 11111111 10110111 10111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -6, -1, -1, -19, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_25_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2745.5f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1883.5f ? 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -4480.2407f : 
                        -954.0854f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -98.774895f : 
                        15276.242f)) : 
                -24384.283f) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (data[4 /* floors */] <1.7519531f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 2, data[13]) || (GenModel.bitSetIsInRange(72, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 2, data[13])) ? 
                        -2471.3687f : 
                        42576.71f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1129.5f ? 
                        3237.8223f : 
                        -15472.585f)) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                     (data[8 /* sqft_above */] <3405.5f ? 
                        7872.298f : 
                        20385.23f) : 
                    36379.61f))) : 
         (data[8 /* sqft_above */] <1161.5f ? 
             (data[9 /* sqft_basement */] <290.5f ? 
                -101200.375f : 
                -3345.0586f) : 
             (data[8 /* sqft_above */] <1289.5f ? 
                172928.11f : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(41, 3, data[12]) || (GenModel.bitSetIsInRange(41, 3, data[12]) && !GenModel.bitSetContains(GRPSPLIT7, 41, 3, data[12])) ? 
                        -16086.216f : 
                        12092.238f) : 
                     (data[11 /* yr_renovated */] <2001.5f ? 
                        129403.555f : 
                        4432.683f)))));
    return pred;
  } // constant pool size = 145B, number of visited nodes = 18, static init size = 426B
  // {00010000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {28, 0, 0, 0};
  // {00011011 01111011 11010011 01110111 11101111 01101011 11111111 11111111 10111010 10101}
  public static final byte[] GRPSPLIT2 = new byte[] {-40, -34, -53, -18, -9, -42, -1, -1, 93, 21};
  // {00100101 00000000 00000100 10100001 10000000 00000000 10001000 10000001 11000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {-92, 0, 32, -123, 1, 0, 17, -127, 3, 0};
  // {00000000 00000000 00000000 10000000 00000000 10000010 10100100 00100000 00001010 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 1, 0, 65, 37, 4, 80, 0};
  // {...2 0-bits... 00000000 00000000 00000001 00000010 00000001 11000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, -128, 64, -128, 3, 0, 0, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {28, 0, 0, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0, 0, 1};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_26_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1655.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1326.5f ? 
                        -12722.964f : 
                        -2910.4482f) : 
                     (data[8 /* sqft_above */] <832.5f ? 
                        -5270.159f : 
                        -1117.4172f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3744.5f ? 
                        -421.84213f : 
                        9532.518f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4793.5f ? 
                        9018.256f : 
                        -15675.582f))) : 
             (data[2 /* sqft_living */] <1276.5f ? 
                127230.21f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10233.5f ? 
                     (data[2 /* sqft_living */] <1531.5f ? 
                        -40550.598f : 
                        -8605.029f) : 
                    79122.36f))) : 
        40623.105f);
    return pred;
  } // constant pool size = 83B, number of visited nodes = 12, static init size = 198B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00101001 11110010 11111111 10111111 01111101 11101111 01110011 11011111 11111111 01101}
  public static final byte[] GRPSPLIT1 = new byte[] {-108, 79, -1, -3, -66, -9, -50, -5, -1, 22};
  // {00010111 00000000 00000000 00000000 00000000 00000001 10101101 00110001 10000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {-24, 0, 0, 0, 0, -128, -75, -116, 1, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_27_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2342.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3223.5f ? 
                        -2343.5598f : 
                        -12863.198f) : 
                     (data[2 /* sqft_living */] <1537.5f ? 
                        -2032.3877f : 
                        1671.4999f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -1804.7417f : 
                        2754.9924f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4294.5f ? 
                        18020.512f : 
                        -10617.546f))) : 
             (data[2 /* sqft_living */] <1276.5f ? 
                114507.19f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10233.5f ? 
                     (data[2 /* sqft_living */] <1531.5f ? 
                        -36495.54f : 
                        -7744.5283f) : 
                    71210.125f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
            -2401.376f : 
            56311.242f));
    return pred;
  } // constant pool size = 114B, number of visited nodes = 13, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 00000011 00000110 01000100 00000000 00011011 10011011 11011110 00010000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -64, 96, 34, 0, -40, -39, 123, 8, 0};
  // {00011001 00100000 00000000 10000000 00000000 00000010 10100110 00100100 10000010 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {-104, 4, 0, 1, 0, 64, 101, 36, 65, 0};
  // {00000110 01001001 11000100 01000001 11101100 01101000 01001001 00001001 00101000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, -110, 35, -126, 55, 22, -110, -112, 20, 0};
  // {11111111 11111111 11111111 10111111 11111111 01011111 11111111 11111111 10111111 10111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -3, -1, -6, -1, -1, -3, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_28_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4789.5f ? 
         (data[1 /* bathrooms */] <1.621582f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                -66046.83f : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1326.5f ? 
                        -32238.201f : 
                        -2916.8843f) : 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[12])) ? 
                        -1848.4471f : 
                        19186.07f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[12])) ? 
                        -9606.152f : 
                        -1735.4246f) : 
                     (data[2 /* sqft_living */] <1230.5f ? 
                        -9827.164f : 
                        1648.7891f)) : 
                 (data[2 /* sqft_living */] <1517.5f ? 
                    146434.66f : 
                     (data[10 /* yr_built */] <1957.5f ? 
                        34241.777f : 
                        -12842.327f)))) : 
        30401.256f);
    return pred;
  } // constant pool size = 104B, number of visited nodes = 12, static init size = 324B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 27};
  // {11101001 01101111 11111111 10111111 01111111 11101111 01111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-105, -10, -1, -3, -2, -9, -2, -1, -1, 31};
  // {00000000 01000000 00000000 01000000 00000000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 2, 0, 2, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00110010 00000100 01011011 01100101 01010010 0111}
  public static final byte[] GRPSPLIT4 = new byte[] {76, 32, -38, -90, 74, 14};
  // {01111111 00111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-2, -4, -1, -1, -1, 15};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_29_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (data[8 /* sqft_above */] <1176.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                -78086.555f : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                    -29945.95f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -3149.893f : 
                        803.5063f))) : 
             (data[2 /* sqft_living */] <1206.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (data[10 /* yr_built */] <1963.5f ? 
                        -8985.096f : 
                        -4043.4395f) : 
                    194719.31f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (data[4 /* floors */] <1.7421875f ? 
                        -43820.418f : 
                        -9358.962f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        95.74931f : 
                        22621.064f)))) : 
        35265.17f);
    return pred;
  } // constant pool size = 112B, number of visited nodes = 11, static init size = 396B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 27};
  // {00010000 10000000 10000000 00100001 00000000 10000011 11100011 10001001 00100000 01000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 1, 1, -124, 0, -63, -57, -111, 4, 2};
  // {00000000 00000000 00010000 00010000 00100000 01000000 00010000 00000010 00000010 01000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 8, 4, 2, 8, 64, 64, 2};
  // {11111111 01111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -2, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_30_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2342.5f ? 
                 (data[2 /* sqft_living */] <1277.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -43084.918f : 
                        -2757.0488f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -1951.3206f : 
                        1688.9763f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                        1687.6956f : 
                        -4155.2217f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4383.5f ? 
                        15104.132f : 
                        -13004.395f))) : 
             (data[2 /* sqft_living */] <1276.5f ? 
                108566.484f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10233.5f ? 
                     (data[2 /* sqft_living */] <1531.5f ? 
                        -37859.0f : 
                        -7161.2163f) : 
                    67672.305f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
            -2710.9617f : 
            50018.53f));
    return pred;
  } // constant pool size = 114B, number of visited nodes = 13, static init size = 360B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11101011 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-41, -1, -1, -1, -1, -1, -17, -1, -1, 31};
  // {00010100 00000000 00000100 00000100 01000000 10010011 10111010 11110110 10010000 00001}
  public static final byte[] GRPSPLIT3 = new byte[] {40, 0, 32, 32, 2, -55, 93, 111, 9, 16};
  // {00011011 00100000 00000000 10000000 00000000 00000010 10101110 00100100 10000010 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {-40, 4, 0, 1, 0, 64, 117, 36, 65, 0};
  // {11111111 11111111 11111111 10111111 11111111 01011111 11111111 11111111 10111111 10111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -3, -1, -6, -1, -1, -3, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_31_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4789.5f ? 
         (data[1 /* bathrooms */] <1.621582f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                -61570.805f : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[12])) ? 
                        -14871.633f : 
                        -5391.268f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -1219.3497f : 
                        9807.509f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1926.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3620.5f ? 
                        -305.34824f : 
                        5730.1284f) : 
                    -18276.578f) : 
                 (data[8 /* sqft_above */] <1195.5f ? 
                    120485.82f : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9328.5f ? 
                        -11786.103f : 
                        52631.344f)))) : 
        26803.588f);
    return pred;
  } // constant pool size = 97B, number of visited nodes = 11, static init size = 306B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 27};
  // {11101001 01101100 01111110 10101111 01111101 11101111 01111011 11111111 11110101 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-105, 54, 126, -11, -66, -9, -34, -1, -81, 31};
  // {11101111 11111111 11111110 11111110 10111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -1, 127, 127, -3, 15};
  // {00000000 00000000 00000000 00100000 00000000 00000000 00001000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 4, 0, 0, 16, 4, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_32_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (data[8 /* sqft_above */] <1176.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (data[9 /* sqft_basement */] <295.5f ? 
                    -111186.016f : 
                    -6122.3726f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.8789062f ? 
                        -1648.3756f : 
                        -5119.8623f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1000.5f ? 
                        -1504.9867f : 
                        3761.8706f))) : 
             (data[2 /* sqft_living */] <1206.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -18114.404f : 
                        -5064.313f) : 
                    205064.16f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (data[4 /* floors */] <1.7421875f ? 
                        -42652.754f : 
                        -7407.264f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        63.122993f : 
                        21817.707f)))) : 
        31952.686f);
    return pred;
  } // constant pool size = 120B, number of visited nodes = 13, static init size = 396B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 27};
  // {00010010 10000000 10000000 00100001 00000000 10000011 01000011 10001001 00100000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {72, 1, 1, -124, 0, -63, -62, -111, 4, 0};
  // {00100000 00001100 00010000 00000000 00000100 00000000 00000000 00001000 00000001 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 48, 8, 0, 32, 0, 0, 16, -128, 0};
  // {00000000 00000001 00000001 00100000 00000000 00000100 00010000 01000100 00100000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, -128, 4, 0, 32, 8, 34, 4, 0};
  // {11111111 01111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -2, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_33_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <6140.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[8 /* sqft_above */] <1416.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1260.5f ? 
                        -23522.875f : 
                        -3148.9463f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -2931.1187f : 
                        -425.27484f)) : 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[12])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1826.5f ? 
                        -975.3805f : 
                        -14622.155f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        1763.9651f : 
                        10424.653f))) : 
             (data[2 /* sqft_living */] <1271.5f ? 
                108181.88f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10233.5f ? 
                     (data[2 /* sqft_living */] <1531.5f ? 
                        -30956.154f : 
                        -7927.4727f) : 
                    59407.38f))) : 
        30263.773f);
    return pred;
  } // constant pool size = 95B, number of visited nodes = 12, static init size = 270B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11101011 11100101 10111111 10111111 01111111 11101111 11110111 11011111 11111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-41, -89, -3, -3, -2, -9, -17, -5, -1, 31};
  // {10001001 11000000 00101010 00100100 00010000 00101011 01110011 11010110 00110000 10001}
  public static final byte[] GRPSPLIT2 = new byte[] {-111, 3, 84, 36, 8, -44, -50, 107, 12, 17};
  // {00010000 00000000 01010011 01100001 00010000 0001}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, -54, -122, 8, 8};
  // {01110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {14, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_34_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
             (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2760.5f ? 
                        -861.83325f : 
                        3397.1453f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -17492.525f : 
                        -2573.9783f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[12])) ? 
                        -18224.07f : 
                        2760.99f) : 
                    29314.977f)) : 
             (data[8 /* sqft_above */] <1176.5f ? 
                 (data[9 /* sqft_basement */] <291.5f ? 
                    -109494.23f : 
                    -4141.6694f) : 
                 (data[2 /* sqft_living */] <1570.5f ? 
                    174365.55f : 
                     (data[8 /* sqft_above */] <1550.5f ? 
                        38727.855f : 
                        -12358.289f)))) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
            -3935.0571f : 
            41808.645f));
    return pred;
  } // constant pool size = 115B, number of visited nodes = 13, static init size = 366B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {30, 0, 0, 0};
  // {11101011 11111111 11111110 11111111 11011101 11111111 11111101 11011111 11100111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-41, -1, 127, -1, -69, -1, -65, -5, -25, 31};
  // {00000000 00000000 00000100 10000000 00000000 00100000 10101000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 1, 0, 4, 21, 0, 0, 0};
  // {11111111 01110111 11111111 11101111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -18, -1, -9, -1, 15};
  // {11111111 11111111 11111111 10111111 11111111 01011111 11111111 11111111 11111111 10111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -3, -1, -6, -1, -1, -1, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_35_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (Double.isNaN(data[1]) || data[1 /* bathrooms */] <4.376953f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4105.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
                        -18343.62f : 
                        -469.13516f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -6663.6416f : 
                        56017.355f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4884.5f ? 
                        2883.15f : 
                        -18776.477f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4388.5f ? 
                        24142.223f : 
                        1049.2104f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                -35776.816f : 
                15659.182f)) : 
        27351.207f);
    return pred;
  } // constant pool size = 82B, number of visited nodes = 10, static init size = 240B
  // {00000000 00000000 00010000 01000000 00000000 00000000 00000000 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 2, 0, 0, 0, 4, 0, 4};
  // {11111111 01111111 11111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -2, -65, -1, -1, 15};
  // {00011100 00100000 00000010 11000001 10001100 00100011 10100100 00000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {56, 4, 64, -125, 49, -60, 37, 0, 0, 0};
  // {00100000 00000001 01000100 00000000 00000000 00010000 00001001 00001000 00010010 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, -128, 34, 0, 0, 8, -112, 16, 72, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_36_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4789.5f ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4708.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1932.5f ? 
                     (data[1 /* bathrooms */] <1.8867188f ? 
                        -1745.7493f : 
                        1007.30365f) : 
                    -25858.953f) : 
                27346.56f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                -50522.43f : 
                13081.788f)) : 
        22731.174f);
    return pred;
  } // constant pool size = 37B, number of visited nodes = 6, static init size = 66B
  // {11111110 11111111 10111111 10111111 11111111 11111111 11111011 11011111 01111111 11111}
  public static final byte[] GRPSPLIT0 = new byte[] {127, -1, -3, -3, -1, -1, -33, -5, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_37_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <42574.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5270.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 43, 0, data[12])) ? 
                        -2292.8796f : 
                        -153.76692f) : 
                    -25081.826f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -1062.6981f : 
                        3913.792f) : 
                    14864.985f)) : 
             (data[2 /* sqft_living */] <1163.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[13])) ? 
                    -78916.03f : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.7636719f ? 
                        1996.2385f : 
                        -7641.1807f)) : 
                 (data[2 /* sqft_living */] <1247.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1989.0f ? 
                        -29346.574f : 
                        171244.8f) : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(42, 2, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 42, 2, data[12])) ? 
                        -24244.045f : 
                        3054.6453f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
            -2081.8923f : 
            47908.92f));
    return pred;
  } // constant pool size = 131B, number of visited nodes = 14, static init size = 438B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00011000 00000000 00010100 01000000 00000000 00000011 10101110 10110000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 40, 2, 0, -64, 117, 13, 0, 4};
  // {00011101 01000000 11011000 11100101 01010010 001}
  public static final byte[] GRPSPLIT2 = new byte[] {-72, 2, 27, -89, 74, 4};
  // {00000101 00000000 01100000 00000001 00001000 00100000 00000000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {-96, 0, 6, -128, 16, 4, 0, 0, 64, 0};
  // {10000010 00010000 10000001 00000000 11000100 01010100 00000000 00000000 00000000 01000}
  public static final byte[] GRPSPLIT4 = new byte[] {65, 8, -127, 0, 35, 42, 0, 0, 0, 2};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11011111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -2, -1, -1, -1, -5, -1, 127};
  // {...2 0-bits... 11111111 11111111 01111111 11111111 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -2, -1, -1, 3};
  // {11111111 11111110 11111111 11111110 11111111 01011111 11111111 11111111 11110111 10111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 127, -1, 127, -1, -6, -1, -1, -17, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_38_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[6])) ? 
             (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[4]) || data[4 /* floors */] <2.25f ? 
                        -1767.5991f : 
                        -15068.65f) : 
                     (data[2 /* sqft_living */] <1565.5f ? 
                        -1657.0911f : 
                        1426.0051f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (data[9 /* sqft_basement */] <823.5f ? 
                        -28066.117f : 
                        -12221.934f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -4200.9424f : 
                        8282.4f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3956.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4409.5f ? 
                        2208.087f : 
                        -26622.707f) : 
                    14954.5205f) : 
                 (data[2 /* sqft_living */] <2636.5f ? 
                    6388.666f : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2485.0f ? 
                        21549.82f : 
                        30785.857f)))) : 
         (data[2 /* sqft_living */] <1248.0f ? 
            86138.06f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <11080.5f ? 
                 (data[2 /* sqft_living */] <1475.5f ? 
                    -45228.887f : 
                     (data[4 /* floors */] <1.75f ? 
                        -13951.146f : 
                        -922.3896f)) : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(41, 3, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 41, 3, data[12])) ? 
                        -44977.45f : 
                        16584.922f) : 
                    86686.266f))));
    return pred;
  } // constant pool size = 149B, number of visited nodes = 20, static init size = 402B
  // {00010000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {30, 0, 0, 0};
  // {00011110 01101011 11010110 01000101 10101111 01111011 01000111 11111010 00001010 10101}
  public static final byte[] GRPSPLIT2 = new byte[] {120, -42, 107, -94, -11, -34, -30, 95, 80, 21};
  // {11111011 11111111 11111110 11111111 11111111 11111111 11111101 11011111 11100111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, -1, 127, -1, -1, -1, -65, -5, -25, 31};
  // {00000000 00010000 01000000 11000000 00000000 00000001 00000000 00000100 00100000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 2, 3, 0, -128, 0, 32, 4, 0};
  // {00000000 00000000 00000110 10000000 00000000 00010000 10101000 10000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 96, 1, 0, 8, 21, 1, 0, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0, 0, 1};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_39_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4789.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1926.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3633.5f ? 
                        -534.985f : 
                        6234.341f) : 
                    -24064.643f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                    -45286.934f : 
                    12542.0205f)) : 
             (data[2 /* sqft_living */] <1276.5f ? 
                102276.914f : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1998.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8458.5f ? 
                        -11985.79f : 
                        -39244.95f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <633.5f ? 
                        -20838.418f : 
                        98815.445f)))) : 
        19416.887f);
    return pred;
  } // constant pool size = 64B, number of visited nodes = 10, static init size = 132B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11111110 11111111 10111111 10111111 11111111 11111111 11111011 11011111 01111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {127, -1, -3, -3, -1, -1, -33, -5, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_40_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.859375f ? 
                        -457.86462f : 
                        -10156.496f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        4705.0366f : 
                        18890.484f)) : 
                 (data[2 /* sqft_living */] <1168.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <4225.5f ? 
                        -762.7758f : 
                        -68726.67f) : 
                     (data[2 /* sqft_living */] <1289.5f ? 
                        105394.016f : 
                        2724.9304f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                -47176.188f : 
                5166.4565f)) : 
        24382.824f);
    return pred;
  } // constant pool size = 82B, number of visited nodes = 10, static init size = 240B
  // {00000100 00000000 00010000 01000000 00000000 00000010 10000100 00100000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {32, 0, 8, 2, 0, 64, 33, 4, 1, 4};
  // {00100000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 2, 0, 8};
  // {11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -1, 31};
  // {11111010 11111111 11111111 00111111 11111111 11111111 11111111 11111111 01111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {95, -1, -1, -4, -1, -1, -1, -1, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_41_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (data[3 /* sqft_lot */] <2734.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <345.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[13]) || (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 72, 3, data[13])) ? 
                        -34086.336f : 
                        -18036.818f) : 
                    -1739.67f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1277.5f ? 
                        -7676.3506f : 
                        -2162.416f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -546.7334f : 
                        4542.4316f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5947.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -898.9303f : 
                        1273.8993f) : 
                    -18390.033f) : 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (data[2 /* sqft_living */] <1446.5f ? 
                        -52292.08f : 
                        6276.264f) : 
                     (data[10 /* yr_built */] <2002.0f ? 
                        178893.52f : 
                        1087.5099f)))) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
            -3268.1018f : 
            32896.258f));
    return pred;
  } // constant pool size = 143B, number of visited nodes = 15, static init size = 486B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {11101111 11111111 11111111 11111111 11111111 11101111 11111011 11011111 11111101 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -1, -1, -1, -1, -9, -33, -5, -65, 27};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00010}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 4, 0, 8};
  // {00000000 00000001 00000101 00000000 00000000 00000010 11000010 01011000 00000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, -96, 0, 0, 64, 67, 26, 0, 0};
  // {00000000 00000000 00000100 00000000 00000000 00000010 00000000 00010000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 0, 0, 64, 0, 8, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 8, 0, 0, 0, 48, 4, 0, 4};
  // {00001111 00000011 00000100 11000101 00000000 00001011 10100011 11000110 10000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {-16, -64, 32, -93, 0, -48, -59, 99, 1, 0};
  // {11111111 11111110 11111111 11111110 11111111 01011111 11111111 11111111 10111111 10111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 127, -1, 127, -1, -6, -1, -1, -3, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_42_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <6140.5f ? 
         (data[3 /* sqft_lot */] <2734.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (data[2 /* sqft_living */] <1349.5f ? 
                    -30978.65f : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1713.5f ? 
                        1407.9026f : 
                        -21079.139f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1349.5f ? 
                        -6959.1587f : 
                        -1725.5029f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -568.5002f : 
                        4088.188f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        -1411.4789f : 
                        650.3129f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        4324.426f : 
                        17091.326f)) : 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (data[2 /* sqft_living */] <1406.5f ? 
                        -50128.598f : 
                        5358.0005f) : 
                     (data[8 /* sqft_above */] <2181.5f ? 
                        166984.67f : 
                        -4004.999f)))) : 
        23612.344f);
    return pred;
  } // constant pool size = 135B, number of visited nodes = 15, static init size = 438B
  // {11101111 11111111 11111111 11111111 11011111 11101111 11111011 11011111 11111101 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -1, -1, -1, -5, -9, -33, -5, -65, 27};
  // {00000000 00000001 00000101 00000000 00000000 00000010 11010010 01011000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, -96, 0, 0, 64, 75, 26, 0, 0};
  // {00000000 00000000 00000100 00000000 00000000 00000010 00000000 00010000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 32, 0, 0, 64, 0, 8, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, 0, 48, 4, 0, 4};
  // {00100000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 2, 0, 8};
  // {00001111 01100001 11010110 11000101 10000011 10011011 11101111 11100111 11110000 00101}
  public static final byte[] GRPSPLIT5 = new byte[] {-16, -122, 107, -93, -63, -39, -9, -25, 15, 20};
  // {11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -1, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_43_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <6140.5f ? 
         (data[3 /* sqft_lot */] <2734.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <378.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 72, 3, data[13])) ? 
                        -29777.314f : 
                        -12423.666f) : 
                    3047.8438f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1260.5f ? 
                        -5378.6577f : 
                        -1056.4402f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <1457.5f ? 
                        -51.331432f : 
                        10021.561f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2780.5f ? 
                        -328.92154f : 
                        3111.0186f) : 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                        -4245.9966f : 
                        7916.099f)) : 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9886.5f ? 
                        -4952.4883f : 
                        66994.77f) : 
                     (data[0 /* bedrooms */] <3.5f ? 
                        151372.28f : 
                        -5885.2925f)))) : 
        21251.111f);
    return pred;
  } // constant pool size = 112B, number of visited nodes = 15, static init size = 300B
  // {11101111 11111111 11111101 11111110 11011111 11101111 11111011 11011011 11111101 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -1, -65, 127, -5, -9, -33, -37, -65, 27};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111111 01111111 11111110 11111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -2, 127, -1, 127};
  // {00000000 00000000 00000100 00000000 00000000 00000010 00000000 00010000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 32, 0, 0, 64, 0, 8, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000001 00100100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, -128, 36, 4, 0, 4};
  // {00000000 10010000 00000011 01000000 00000000 1001}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 9, -64, 2, 0, 9};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_44_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5942.5f ? 
             (data[3 /* sqft_lot */] <4831.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <311.5f ? 
                        -35821.586f : 
                        1313.5356f) : 
                     (data[10 /* yr_built */] <1957.5f ? 
                        1410.6029f : 
                        -2641.9773f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[6])) ? 
                        -387.41107f : 
                        3212.1782f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -2175.3557f : 
                        107581.516f))) : 
            -16695.277f) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
            -3265.0947f : 
            39030.387f));
    return pred;
  } // constant pool size = 85B, number of visited nodes = 10, static init size = 258B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {11101101 11111111 11101111 11111111 11111111 11101111 11111111 11111111 11111100 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-73, -1, -9, -1, -1, -9, -1, -1, 63, 27};
  // {00000000 00000000 00010000 00000000 00000000 00000010 10100100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 0, 0, 64, 37, 4, 0, 4};
  // {01110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {14, 0, 0, 0};
  // {11111111 11111111 11111111 10111111 11111111 01011111 11111111 11111111 10110111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -3, -1, -6, -1, -1, -19, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_45_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <5062.5f ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1186.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
                     (data[2 /* sqft_living */] <1239.5f ? 
                        -2292.4915f : 
                        9.094254f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        3927.576f : 
                        15143.085f)) : 
                 (data[2 /* sqft_living */] <1166.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(71, 4, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 71, 4, data[13])) ? 
                        -85271.03f : 
                        5429.142f) : 
                     (data[2 /* sqft_living */] <1301.5f ? 
                        71742.23f : 
                        2014.0698f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                -30646.129f : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1983.5f ? 
                        -8972.977f : 
                        -427.85394f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                        153.15364f : 
                        15347.889f)))) : 
        21368.225f);
    return pred;
  } // constant pool size = 120B, number of visited nodes = 13, static init size = 396B
  // {00001001 00000000 00010000 01000000 00000000 00000000 00001100 00100000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-112, 0, 8, 2, 0, 0, 48, 4, 1, 4};
  // {00100000 00000000 00000000 01100000 00000000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 6, 0, 8};
  // {00010000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0, 32, 0, 0, 0, 0, 0};
  // {...4 0-bits... 11101111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT3 = new byte[] {-9, 127, -1, -1, -1, -1, -1, -1, 63};
  // {11110111 11111111 11101011 11111111 11111101 11111111 11111011 11111111 01111101 11011}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, -1, -41, -1, -65, -1, -33, -1, -66, 27};
  // {00000100 00000000 10000010 10000000 11010000 00011111 10100010 11000000 01000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 0, 65, 1, 11, -8, 69, 3, 2, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {30, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_46_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4644.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.8857422f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4098.5f ? 
                        -68.20929f : 
                        8680.868f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                        -40064.305f : 
                        6731.488f)) : 
                15473.908f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                -39904.855f : 
                5876.335f)) : 
        19983.15f);
    return pred;
  } // constant pool size = 52B, number of visited nodes = 7, static init size = 132B
  // {11100111 11111111 11111111 11111111 11111101 11010110 11111111 11111111 11111101 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-25, -1, -1, -1, -65, 107, -1, -1, -65, 27};
  // {11111010 11111111 11111111 00111111 11111111 11111111 11111011 11011111 01111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {95, -1, -1, -4, -1, -1, -33, -5, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_47_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <6140.5f ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1949.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5024.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4115.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT0, 44, 0, data[12])) ? 
                        -17886.773f : 
                        -25.847612f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -4389.193f : 
                        15045.936f)) : 
                 (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[12])) ? 
                    -30047.922f : 
                    5041.757f)) : 
            -15318.714f) : 
        19593.512f);
    return pred;
  } // constant pool size = 55B, number of visited nodes = 7, static init size = 150B
  // {11111111 01111111 11111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -2, -65, -1, -1, 15};
  // {11111101 11110010 10111111 11111111 11111001 10101011 11110111 11110111 11110101 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-65, 79, -3, -1, -97, -43, -17, -17, -81, 31};
  // {11111111 11111011 11111110 11111111 11101101 1101}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -33, 127, -1, -73, 11};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_48_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5942.5f ? 
             (data[3 /* sqft_lot */] <4831.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <311.5f ? 
                        -33006.504f : 
                        1390.14f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -4596.809f : 
                        137.93803f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3384.5f ? 
                        -376.47418f : 
                        3546.412f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -662.59717f : 
                        91849.984f))) : 
            -16140.81f) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
            -3469.4858f : 
            29562.643f));
    return pred;
  } // constant pool size = 91B, number of visited nodes = 10, static init size = 294B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {11101101 11111111 11101111 11111111 11111111 11101111 11111111 11111111 11111110 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-73, -1, -9, -1, -1, -9, -1, -1, 127, 27};
  // {00111011 11101111 11111000 11011111 01111001 11111111 01111011 11111110 01101101 01111}
  public static final byte[] GRPSPLIT2 = new byte[] {-36, -9, 31, -5, -98, -1, -34, 127, -74, 30};
  // {00000000 00000000 00010000 00000000 00000000 00000010 10100100 00100000 10000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, 64, 37, 4, 1, 4};
  // {00010000 00000000 00000010 00000000 00000000 10010000 00000000 00001000 01000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 64, 0, 0, 9, 0, 16, 2, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_49_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* sqft_living */] <6140.5f ? 
         (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[7])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                    -22216.217f : 
                    -59027.023f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[12])) ? 
                        -736.7643f : 
                        8961.652f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2173.5f ? 
                        -19584.266f : 
                        59787.594f))) : 
             (Double.isNaN(data[10]) || data[10 /* yr_built */] <1990.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (data[9 /* sqft_basement */] <334.0f ? 
                        -38642.83f : 
                        -15908.911f) : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[12])) ? 
                        -2208.6223f : 
                        2244.5864f)) : 
                 (data[8 /* sqft_above */] <1793.0f ? 
                    177312.67f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(70, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 70, 5, data[13])) ? 
                        -15909.602f : 
                        5660.364f)))) : 
        18717.56f);
    return pred;
  } // constant pool size = 116B, number of visited nodes = 13, static init size = 372B
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 1, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 11000000 00000000 01100000 00000000 0001}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 3, 0, 6, 0, 8};
  // {11111111 01111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -2, -9, -1, -1, -1, -1, -1, -1, 27};
  // {10111101 00001000 01001001 11100100 01111111 1011}
  public static final byte[] GRPSPLIT5 = new byte[] {-67, 16, -110, 39, -2, 13};
  // {...5 0-bits... 11111111 01011101 11111111 11111011 11110111 11101111 11011011 11111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -70, -1, -33, -17, -9, -37, -1, 47};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_50 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_50_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_50_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (Double.isNaN(data[1]) || data[1 /* bathrooms */] <4.376953f ? 
             (data[3 /* sqft_lot */] <4831.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <196.5f ? 
                        -32936.113f : 
                        -2813.9346f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -4473.0728f : 
                        69.0749f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[6])) ? 
                        -245.36285f : 
                        4199.7656f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -54.445866f : 
                        95409.36f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                -28406.26f : 
                13165.955f)) : 
        17621.762f);
    return pred;
  } // constant pool size = 91B, number of visited nodes = 10, static init size = 294B
  // {11101101 11111111 11101111 11111111 11111111 11101111 11111111 11111111 11111110 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-73, -1, -9, -1, -1, -9, -1, -1, 127, 27};
  // {01111011 11101111 11111000 11011111 01111011 10111111 01111011 11111110 01101101 01111}
  public static final byte[] GRPSPLIT1 = new byte[] {-34, -9, 31, -5, -34, -3, -34, 127, -74, 30};
  // {00000000 00000000 00010000 00000000 00000000 00000010 10000100 00100000 10000000 00100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 0, 0, 64, 33, 4, 1, 4};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {26, 0, 0, 0};
  // {00100000 00000001 01000100 00000000 00000000 00010000 00001001 00001000 00010010 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, -128, 34, 0, 0, 8, -112, 16, 72, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_51 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_51_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_51_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <5062.5f ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <790.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -36726.945f : 
                        -310.37686f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -135.63754f : 
                        74465.16f)) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <404.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <5931.5f ? 
                        -30798.824f : 
                        7497.765f) : 
                    102386.086f)) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1908.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(74, 1, data[13]) || (GenModel.bitSetIsInRange(74, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 74, 1, data[13])) ? 
                        -19156.045f : 
                        -3866.4045f) : 
                    -32350.512f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                        -2195.487f : 
                        8801.264f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                        1200.0116f : 
                        14781.656f)))) : 
        18467.238f);
    return pred;
  } // constant pool size = 128B, number of visited nodes = 14, static init size = 420B
  // {00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 4};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {10111111 11011111 11101111 01111111 11111111 11101111 11111111 11111110 11111101 11011}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, -5, -9, -2, -1, -9, -1, 127, -65, 27};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000010 00000100 0}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 4, 0, 64, 32, 0};
  // {00000000 00011000 01000110 00010000 01010000 00001011 11111000 10010000 00010100 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 24, 98, 8, 10, -48, 31, 9, 40, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {30, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_52 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_52_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_52_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5942.5f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1977.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1668.5f ? 
                        -588.6897f : 
                        12976.305f) : 
                     (data[1 /* bathrooms */] <1.8867188f ? 
                        -1538.7708f : 
                        3066.8762f)) : 
                -14233.36f) : 
            -16828.295f) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
            -4074.531f : 
            30315.584f));
    return pred;
  } // constant pool size = 57B, number of visited nodes = 7, static init size = 162B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00001111 00000001 00010000 01000100 00000000 00000011 00000110 11110100 10000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {-16, -128, 8, 34, 0, -64, 96, 47, 1, 4};
  // {00010000 00000000 00000010 00000000 00000000 00010000 00000000 00001000 00001000 01000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 64, 0, 0, 8, 0, 16, 16, 2};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_53 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_53_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_53_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2107.0f ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4644.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.8857422f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3632.5f ? 
                        -122.15407f : 
                        4070.2688f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                        -35345.67f : 
                        5539.063f)) : 
                12354.912f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                -35491.977f : 
                3912.3901f)) : 
        17224.895f);
    return pred;
  } // constant pool size = 52B, number of visited nodes = 7, static init size = 132B
  // {11101111 11111111 11111111 11111111 11111101 11010110 11111111 11111111 11110101 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -1, -1, -1, -65, 107, -1, -1, -81, 27};
  // {11111010 11111111 11111111 00111111 11111111 11111111 11111111 11011111 01111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {95, -1, -1, -4, -1, -1, -1, -5, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_54 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_54_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_54_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <5062.5f ? 
         (data[2 /* sqft_living */] <1182.5f ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1175.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                    -77071.76f : 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 1, data[12]) || (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 42, 1, data[12])) ? 
                        -368.00568f : 
                        15723.511f)) : 
                142331.48f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (Double.isNaN(data[4]) || data[4 /* floors */] <1.7421875f ? 
                        -25787.02f : 
                        7053.676f) : 
                    -58643.53f) : 
                 (data[2 /* sqft_living */] <1249.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -52778.227f : 
                        -3199.8452f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -399.61734f : 
                        2311.9058f)))) : 
        17475.314f);
    return pred;
  } // constant pool size = 97B, number of visited nodes = 11, static init size = 306B
  // {11111111 11101111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -9, -9, -1, -1, -1, -1, -1, -1, 27};
  // {...1 0-bits... 00110000 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {12, 1, 0, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {11101001 11111111 11111111 11111111 11111111 11111111 11111011 11101111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-105, -1, -1, -1, -1, -1, -33, -9, -1, 31};
  // {00010110 00000000 00000000 10000000 01000000 00000011 00100100 11110110 10000000 00101}
  public static final byte[] GRPSPLIT4 = new byte[] {104, 0, 0, 1, 2, -64, 36, 111, 1, 20};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_55 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_55_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_55_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.6386719f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3151.5f ? 
                        -3208.0388f : 
                        12346.04f) : 
                    -18416.494f) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1355.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <4.1132812f ? 
                        -109.858215f : 
                        12039.527f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -15556.794f : 
                        550.2312f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.8740234f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 0, data[13])) ? 
                        -7857.6816f : 
                        216.43053f) : 
                    -19407.193f) : 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2432.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(69, 5, data[13]) || (GenModel.bitSetIsInRange(69, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 69, 5, data[13])) ? 
                        3846.5615f : 
                        12651.865f) : 
                    19785.04f))) : 
         (data[2 /* sqft_living */] <1201.0f ? 
            62707.414f : 
             (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(42, 2, data[12]) && !GenModel.bitSetContains(GRPSPLIT7, 42, 2, data[12])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9606.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <186.5f ? 
                        -22324.242f : 
                        2576.9614f) : 
                    -53909.883f) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10503.5f ? 
                     (data[2 /* sqft_living */] <1367.5f ? 
                        -33598.008f : 
                        -1663.1835f) : 
                     (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1983.5f ? 
                        292.85107f : 
                        61937.668f)))));
    return pred;
  } // constant pool size = 158B, number of visited nodes = 20, static init size = 456B
  // {00010000 00000000 00010000 00000000 00000000 00000000 00000100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 8, 0, 0, 0, 32, 4, 0, 4};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {17, 0, 0, 0};
  // {10111011 11110001 11111110 01111111 11101111 11111111 01100110 11111111 11111110 10111}
  public static final byte[] GRPSPLIT2 = new byte[] {-35, -113, 127, -2, -9, -1, 102, -1, 127, 29};
  // {11111101 11111110 11111111 10111111 11111101 10111101 11011111 11111111 01111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, 127, -1, -3, -65, -67, -5, -1, -2, 31};
  // {00110110 10111110 10110110 11001011 11010011 01110111 11111101 01111110 11000000 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {108, 125, 109, -45, -53, -18, -65, 126, 3, 31};
  // {11110111 11111111 11110110 11001111 11111011 11110111 11111111 11111110 11110111}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -1, 111, -13, -33, -17, -1, 127, -17};
  // {...5 0-bits... 00000000 00000000 00000000 00000000 00000010 01010001 00100000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 64, -118, 4, 0, 16};
  // {...2 0-bits... 11111111 11111111 01111111 11111111 11111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -2, -1, -1, 3};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_56 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_56_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_56_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[10 /* yr_built */] <1940.5f ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2417.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 76, 0, data[13])) ? 
                     (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                        -638.93805f : 
                        -16601.473f) : 
                     (data[8 /* sqft_above */] <786.0f ? 
                        -4254.36f : 
                        3722.1426f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 76, 0, data[13])) ? 
                     (data[11 /* yr_renovated */] <1983.5f ? 
                        17825.41f : 
                        -4596.858f) : 
                    48673.023f)) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (data[2 /* sqft_living */] <1276.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1168.5f ? 
                        -669.7638f : 
                        -20336.834f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4378.5f ? 
                        -1182.3672f : 
                        -19885.758f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <50962.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5010.5f ? 
                        -211.07495f : 
                        -12490.263f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        1928.9707f : 
                        15517.43f)))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            103973.336f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10010.5f ? 
                 (data[8 /* sqft_above */] <1162.5f ? 
                    6696.138f : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <6874.5f ? 
                        -13878.828f : 
                        -26949.805f)) : 
                49629.74f)));
    return pred;
  } // constant pool size = 133B, number of visited nodes = 19, static init size = 330B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00010000 00000000 00100100 01010001 00001000 00000001 00001101 11010100 11000001 0100}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 36, -118, 16, -128, -80, 43, -125, 2};
  // {00010000 00000000 00000000 00000000 00000000 00100000 10000000 00100000 00000000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0, 0, 4, 1, 4, 0, 0};
  // {11101111 11110011 11111110 01101111 11101111 11111110 01110010 11011111 11111110 10111}
  public static final byte[] GRPSPLIT3 = new byte[] {-9, -49, 127, -10, -9, 127, 78, -5, 127, 29};
  // {00001010 00000000 01100000 01000000 00000000 00110000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {80, 0, 6, 2, 0, 12, 0, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_57 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_57_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_57_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* sqft_lot */] <2734.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1314.5f ? 
                -29168.771f : 
                 (data[3 /* sqft_lot */] <1360.5f ? 
                    -11857.311f : 
                    229.61392f)) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (data[2 /* sqft_living */] <1352.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.1210938f ? 
                        -1791.9927f : 
                        -12356.913f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(66, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 66, 2, data[13])) ? 
                        -4615.1367f : 
                        278.913f)) : 
                 (data[10 /* yr_built */] <1969.0f ? 
                    5519.4624f : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1465.5f ? 
                        -1097.1592f : 
                        5772.5073f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <6131.0f ? 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <4.1328125f ? 
                        157.75827f : 
                        -10751.938f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -7694.95f : 
                        -56.515015f)) : 
                18110.984f) : 
             (data[2 /* sqft_living */] <1220.0f ? 
                 (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[7])) ? 
                    -27775.58f : 
                    141712.61f) : 
                 (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(18, 18, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 18, 18, data[12])) ? 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -11217.384f : 
                        -48686.63f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8127.5f ? 
                        -888.13715f : 
                        101869.06f)))));
    return pred;
  } // constant pool size = 145B, number of visited nodes = 20, static init size = 378B
  // {11101111 11111111 11111111 11111111 11111111 11101111 11111011 11011111 11111101 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -1, -1, -1, -1, -9, -33, -5, -65, 27};
  // {00000000 00000001 00000101 00000000 00000000 00000010 11010010 01011000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -128, -96, 0, 0, 64, 75, 26, 0, 0};
  // {...2 0-bits... 00000000 00000001 00000000 00000000 00000000 00000100 10100000 00000010}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, 0, 0, 0, 32, 5, 64, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000001 00000100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, -128, 32, 4, 0, 4};
  // {11101111 11110111 11011010 11011111 11011111 10001111 11111101 10101111 00110110 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, -17, 91, -5, -5, -15, -65, -11, 108, 31};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, 0};
  // {...18 0-bits... }
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 2};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_58 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_58_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_58_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[5])) ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <6055.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1971.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1673.5f ? 
                        -918.499f : 
                        869.402f) : 
                    -14373.257f) : 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3710938f ? 
                        -29526.818f : 
                        39293.14f) : 
                     (data[2 /* sqft_living */] <1847.5f ? 
                        155762.7f : 
                        -27661.19f))) : 
            -20101.244f) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
            -3705.8342f : 
            30671.104f));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 9, static init size = 162B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11111111 11111111 11111111 11111111 11111111 01011111 11111111 11110110 11110111 10111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -6, -1, 111, -17, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_59 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_59_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_59_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4666.5f ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1977.5f ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4426.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4110.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                        -197.07082f : 
                        4072.4976f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -419.29834f : 
                        25447.553f)) : 
                -14633.549f) : 
            -16795.281f) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
            -18575.723f : 
            37566.312f));
    return pred;
  } // constant pool size = 63B, number of visited nodes = 7, static init size = 198B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000100 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 32, 0, 0, 4};
  // {00011000 00000000 00000000 11000001 10000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 0, -125, 1, 0, 0, 0, 0, 0};
  // {00010000 00100010 01000000 01000000 10000010 00000000 00001000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 68, 2, 2, 65, 0, 16, 0, 64, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_60 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_60_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_60_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2090.0f ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
             (data[3 /* sqft_lot */] <4831.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <194.5f ? 
                        -31860.18f : 
                        -6485.6494f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -3082.307f : 
                        263.40195f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -1271.0992f : 
                        662.1911f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -890.2636f : 
                        112431.7f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                -32404.854f : 
                1981.0695f)) : 
        14559.682f);
    return pred;
  } // constant pool size = 97B, number of visited nodes = 10, static init size = 330B
  // {11111101 11111111 11101111 11111111 11111111 11101111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-65, -1, -9, -1, -1, -9, -1, -1, -1, 27};
  // {01101011 11101111 11111000 11011111 00111001 10111011 01111011 10011100 01101100 01111}
  public static final byte[] GRPSPLIT1 = new byte[] {-42, -9, 31, -5, -100, -35, -34, 57, 54, 30};
  // {00000000 00000000 00010000 00000000 00000000 00000010 00000100 00100000 10000000 00100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 0, 0, 64, 32, 4, 1, 4};
  // {00001111 01010001 10010110 01000111 11101111 01011011 11100111 11101111 11010110 00101}
  public static final byte[] GRPSPLIT3 = new byte[] {-16, -118, 105, -30, -9, -38, -25, -9, 107, 20};
  // {11111011 11111111 11111111 00111111 11111111 11111111 11111011 11011111 01111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -1, -1, -4, -1, -1, -33, -5, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_61 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_61_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_61_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* sqft_lot */] <2734.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1352.5f ? 
                -26633.836f : 
                -6579.155f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1352.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1185.5f ? 
                        -2623.008f : 
                        -12171.685f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(66, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 66, 2, data[13])) ? 
                        -5396.3066f : 
                        -3.8660715f)) : 
                 (data[10 /* yr_built */] <1997.5f ? 
                     (data[8 /* sqft_above */] <863.5f ? 
                        2626.0874f : 
                        6161.109f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1463.5f ? 
                        -1743.0308f : 
                        3023.8562f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
             (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4525.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        -1270.4565f : 
                        474.7911f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -18197.879f : 
                        4325.6274f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                        -5193.062f : 
                        3612.922f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <979.0f ? 
                        7505.743f : 
                        47752.457f))) : 
             (data[2 /* sqft_living */] <1163.5f ? 
                 (data[3 /* sqft_lot */] <4609.5f ? 
                    2820.6008f : 
                    -80258.695f) : 
                 (data[2 /* sqft_living */] <1348.0f ? 
                    139397.39f : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        4899.3223f : 
                        -29172.0f)))));
    return pred;
  } // constant pool size = 182B, number of visited nodes = 22, static init size = 552B
  // {11111111 11111111 11111111 11111111 11111111 11101111 11111011 11011111 11111101 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -9, -33, -5, -65, 27};
  // {11001111 11111111 01111101 11111110 11001111 11111110 11110110 01111001 11101111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-13, -1, -66, 127, -13, 127, 111, -98, -9, 31};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000000 00000100 00100000 00001000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 32, 4, 16, 2};
  // {00000000 00000000 00010000 00000000 00000000 00000001 00000100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, -128, 32, 4, 0, 4};
  // {01100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {6, 0, 0, 0};
  // {00001111 01010001 11110010 01001111 01101011 00111001 01111111 11111111 10001110 10101}
  public static final byte[] GRPSPLIT5 = new byte[] {-16, -118, 79, -14, -42, -100, -2, -1, 113, 21};
  // {00000000 00100010 01000010 00000000 10001000 01101110 10000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 68, 66, 0, 17, 118, 1, 0, 0, 0};
  // {00010000 00000000 00000100 10000000 00000000 00000000 10001000 00000000 10000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 32, 1, 0, 0, 17, 0, 1, 0};
  // {11111011 11110111 11111101 11111110 11011111 11111001 11011111 00100110 11110111 01111}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, -17, -65, 127, -5, -97, -5, 100, -17, 30};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_62 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_62_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_62_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* sqft_lot */] <6928.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1541.5f ? 
                -34014.168f : 
                 (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                     (data[1 /* bathrooms */] <2.3632812f ? 
                        -8525.112f : 
                        -22857.396f) : 
                    -1311.8143f)) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -4635.6763f : 
                        -467.94943f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        -22.762516f : 
                        9668.089f)) : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1991.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(31, 3, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 31, 3, data[12])) ? 
                        -4247.4253f : 
                        4100.9746f) : 
                    20281.943f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                 (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[5])) ? 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <2003.5f ? 
                        -822.29736f : 
                        4621.353f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 77, 0, data[13])) ? 
                        -4018.4348f : 
                        31616.035f)) : 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(18, 18, data[12]) && !GenModel.bitSetContains(GRPSPLIT11, 18, 18, data[12])) ? 
                        -33829.355f : 
                        6712.831f) : 
                    105119.85f)) : 
            85792.99f));
    return pred;
  } // constant pool size = 175B, number of visited nodes = 18, static init size = 606B
  // {11111111 11011111 11101111 10111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -5, -9, -3, -1, -1, -1, -1, -1, 27};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {26, 0, 0, 0};
  // {00011000 00000001 00000000 00100001 00000000 00100000 00000000 00000000 00001000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {24, -128, 0, -124, 0, 4, 0, 0, 16, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {01111000 11100111 11110111 11111111 11111111 10101111 01100110 11011111 11101111 01111}
  public static final byte[] GRPSPLIT4 = new byte[] {30, -25, -17, -1, -1, -11, 102, -5, -9, 30};
  // {00000010 00000000 00000000 00000000 00010000 00000010 00101101 00100010 01000000 01000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0, 8, 64, -76, 68, 2, 2};
  // {...3 0-bits... 11111101 11111110 11111111 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {-65, 127, -1, 127};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 1, 0, 0, 4};
  // {00000000 00000000 00010000 00000000 00000000 00000011 00011111 11100101 10000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 8, 0, 0, -64, -8, -89, 1, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000010 01000000 00000000 00010000 00000000 00000000 00001000 00000}
  public static final byte[] GRPSPLIT10 = new byte[] {8, 0, 64, 2, 0, 8, 0, 0, 16, 0};
  // {...18 0-bits... }
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 2};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_63 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_63_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_63_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4640.0f ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1977.5f ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4421.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <792.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                        197.8515f : 
                        20271.416f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -28406.775f : 
                        -729.0521f)) : 
                -13900.748f) : 
            -16536.18f) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
            -13359.825f : 
            36291.312f));
    return pred;
  } // constant pool size = 63B, number of visited nodes = 7, static init size = 198B
  // {00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 4};
  // {11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -2, -1, -1, -1, -1, -1, 27};
  // {00010000 00100001 01000000 01000000 10000000 00000100 00001000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, -124, 2, 2, 1, 32, 16, 0, 64, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_64 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_64_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_64_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2090.0f ? 
         (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (data[2 /* sqft_living */] <1277.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -28990.816f : 
                        -1006.15674f) : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[12])) ? 
                        -8081.911f : 
                        266.57086f)) : 
                 (data[2 /* sqft_living */] <1205.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -35866.273f : 
                        173813.17f) : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(18, 18, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 18, 18, data[12])) ? 
                        -21242.236f : 
                        3348.6724f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                -28938.262f : 
                1107.7878f)) : 
        12332.907f);
    return pred;
  } // constant pool size = 86B, number of visited nodes = 10, static init size = 264B
  // {00000000 00000000 00010000 01000000 00000000 00000000 00000100 00000000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 2, 0, 0, 32, 0, 1, 4};
  // {11101011 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111101 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-41, -1, -1, -1, -1, -1, -1, -5, -65, 31};
  // {11110111 00111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-17, -4, -1, -1, -1, 15};
  // {...18 0-bits... }
  public static final byte[] GRPSPLIT3 = new byte[] {-2, -1, 3};
  // {11111011 11111111 11111111 00111111 11111111 11111111 11111011 11011111 01111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -1, -1, -4, -1, -1, -33, -5, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_65 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_65_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_65_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* sqft_lot */] <2734.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1314.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1151.0f ? 
                    -9173.763f : 
                    -31119.389f) : 
                 (data[10 /* yr_built */] <2004.5f ? 
                    8002.7607f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 72, 3, data[13])) ? 
                        -20196.932f : 
                        -2049.7634f))) : 
             (data[1 /* bathrooms */] <1.8720703f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(66, 2, data[13]) || (GenModel.bitSetIsInRange(66, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 66, 2, data[13])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(66, 2, data[13]) || (GenModel.bitSetIsInRange(66, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 66, 2, data[13])) ? 
                        -1849.2091f : 
                        1724.5239f) : 
                    6517.9956f) : 
                 (data[2 /* sqft_living */] <1262.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(66, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 66, 2, data[13])) ? 
                        -19838.066f : 
                        -740.38416f) : 
                     (data[1 /* bathrooms */] <2.125f ? 
                        -4776.92f : 
                        36.722908f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5375.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1920.5f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 44, 0, data[12])) ? 
                        -139.3889f : 
                        7364.595f) : 
                    -15869.49f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                    -7354.0527f : 
                    33999.06f)) : 
             (data[2 /* sqft_living */] <1220.0f ? 
                78112.87f : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9987.5f ? 
                        -4132.0806f : 
                        -45863.527f) : 
                     (data[0 /* bedrooms */] <3.5f ? 
                        71243.984f : 
                        -17648.3f)))));
    return pred;
  } // constant pool size = 166B, number of visited nodes = 21, static init size = 480B
  // {11101111 11111111 11111111 11111110 11011111 11101111 11111011 11011011 01111101 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -1, -1, 127, -5, -9, -33, -37, -66, 27};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11011111 11101}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -2, -1, -5, 119};
  // {...2 0-bits... 00000000 00000000 00010000 00000000 00000000 00000011 10100000 01000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 0, 0, -64, 5, 2, 0};
  // {...2 0-bits... 00000000 00000000 00000100 00000000 00000000 00001100 00001000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 32, 0, 0, 48, 16, 0, 0};
  // {...2 0-bits... 11111111 11111111 11111111 11111111 11111111 11111011 01011111 11110111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -33, -6, -17, 3};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 8, 0, 0, 0, 32, 4, 0, 4};
  // {00100000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 2, 0, 8};
  // {00010000 00000000 01000000 11000000 00000000 00100000 00000000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 2, 3, 0, 4, 0, 0, 64, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_66 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_66_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_66_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* sqft_lot */] <2734.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1314.5f ? 
                 (data[8 /* sqft_above */] <1002.5f ? 
                    -12304.22f : 
                    -25728.02f) : 
                 (data[10 /* yr_built */] <2004.5f ? 
                    7202.486f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 72, 3, data[13])) ? 
                        -19944.17f : 
                        -1127.8778f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.6367188f ? 
                     (data[1 /* bathrooms */] <1.8702393f ? 
                        494.8594f : 
                        -4983.2793f) : 
                    2123.844f) : 
                 (data[10 /* yr_built */] <1969.0f ? 
                    4444.774f : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1466.5f ? 
                        -480.81503f : 
                        3985.836f)))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
             (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4525.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        -1892.554f : 
                        245.55951f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -17138.014f : 
                        1867.9448f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                        -7181.2485f : 
                        2666.1147f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <828.5f ? 
                        3809.15f : 
                        41961.56f))) : 
             (data[2 /* sqft_living */] <1220.0f ? 
                70301.57f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10866.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(56, 19, data[13]) || (GenModel.bitSetIsInRange(56, 19, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 56, 19, data[13])) ? 
                        -12910.827f : 
                        4855.7637f) : 
                    41827.793f))));
    return pred;
  } // constant pool size = 190B, number of visited nodes = 22, static init size = 600B
  // {11101111 11111111 11111111 11111110 11011111 11101111 11111011 11011111 01111101 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -1, -1, 127, -5, -9, -33, -5, -66, 27};
  // {...3 0-bits... 00000000 00000000 00000000 00001001 00000000 00000000 00100000 00000100 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, -112, 0, 0, 4, 32, 0};
  // {00000000 00000001 00000101 00000000 00000000 00000010 11010010 01011001 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, -128, -96, 0, 0, 64, 75, -102, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, 0, 32, 4, 0, 4};
  // {01100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {6, 0, 0, 0};
  // {10101111 11110011 11111010 01101111 11111111 11111101 01111111 11111111 10111110 10101}
  public static final byte[] GRPSPLIT5 = new byte[] {-11, -49, 95, -10, -1, -65, -2, -1, 125, 21};
  // {11110011 11111010 11111111 00111111 11111101 11101111 11110110 11111111 01111101 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-49, 95, -1, -4, -65, -9, 111, -1, -66, 31};
  // {00010000 00000000 00000100 10000000 00000000 00000000 00000000 00000000 10000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 32, 1, 0, 0, 0, 0, 1, 0};
  // {11111011 11110111 11111111 11111111 11011111 11111101 11011111 01101111 11110111 01111}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, -17, -1, -1, -5, -65, -5, -10, -17, 30};
  // {...19 0-bits... 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, -124, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_67 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_67_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_67_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1116.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -61231.184f : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <2003.5f ? 
                     (data[2 /* sqft_living */] <728.5f ? 
                        -4662.3755f : 
                        413.0812f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 76, 0, data[13])) ? 
                        -12794.261f : 
                        -1611.0665f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <971.0f ? 
                        742.82324f : 
                        5264.9263f) : 
                    11195.762f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1291.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                    -58564.41f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -10579.564f : 
                        1540.7451f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                        -1311.0543f : 
                        451.38345f) : 
                     (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1983.5f ? 
                        -1441.9047f : 
                        15246.736f))) : 
             (data[8 /* sqft_above */] <1296.5f ? 
                145859.17f : 
                 (data[1 /* bathrooms */] <2.3671875f ? 
                    -5252.23f : 
                    -23575.531f))));
    return pred;
  } // constant pool size = 169B, number of visited nodes = 17, static init size = 594B
  // {11111111 11111111 11101111 11011111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -5, -1, -1, -1, -1, -1, 27};
  // {01000101 10001000 00000100 00000000 00010100 10000000 00001011 00100000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-94, 17, 32, 0, 40, 1, -48, 4, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 10101111 01111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -11, -2, 15};
  // {10111111 11110111 11111111 11111111 11111011 11111111 11110100 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, -17, -1, -1, -33, -1, 47, -1, -1, 31};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11001011 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11011}
  public static final byte[] GRPSPLIT5 = new byte[] {-45, -1, -1, -1, -1, -1, -1, -5, -1, 27};
  // {11111111 11110010 01111011 11111110 01111011 00101110 11010011 11101111 01011100 10111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 79, -34, 127, -34, 116, -53, -9, 58, 29};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00100100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, 0, 0, 36, 4, 0, 4};
  // {00111111 01110001 11111110 01010111 11101111 11011011 01111110 11111111 11110010 00101}
  public static final byte[] GRPSPLIT8 = new byte[] {-4, -114, 127, -22, -9, -37, 126, -1, 79, 20};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_68 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_68_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_68_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* sqft_lot */] <6928.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1983.5f ? 
                 (data[9 /* sqft_basement */] <392.5f ? 
                    -19858.672f : 
                    2956.0735f) : 
                -26478.13f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3089.5f ? 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                        -4190.4717f : 
                        -122.411125f) : 
                    -12220.062f) : 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[12])) ? 
                     (data[3 /* sqft_lot */] <2997.5f ? 
                        -1857.0651f : 
                        560.41376f) : 
                    11360.383f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[5])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5961.5f ? 
                        -165.9977f : 
                        -16527.316f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        -5713.0273f : 
                        23927.066f)) : 
                 (data[2 /* sqft_living */] <1352.5f ? 
                    71196.02f : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(18, 18, data[12]) && !GenModel.bitSetContains(GRPSPLIT8, 18, 18, data[12])) ? 
                        -22696.47f : 
                        7624.8423f))) : 
            63206.156f));
    return pred;
  } // constant pool size = 142B, number of visited nodes = 16, static init size = 456B
  // {11111111 11011111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -5, -1, -3, -1, -1, -1, -1, -1, 27};
  // {01111000 10100111 11100111 11111111 11011111 10101011 01111111 11111111 01101111 01101}
  public static final byte[] GRPSPLIT1 = new byte[] {30, -27, -25, -1, -5, -43, -2, -1, -10, 22};
  // {01011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {26, 0, 0, 0};
  // {00010000 01000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 2, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00100000 00000000 00100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 1, 4, 0, 4};
  // {00000000 00000000 00010000 00000000 00000000 00000010 00010100 10000001 10000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 8, 0, 0, 64, 40, -127, 1, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00010000 00000001 00000010 00000000 00000000 10010000 00000000 00000000 00000000 01000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, -128, 64, 0, 0, 9, 0, 0, 0, 2};
  // {...18 0-bits... }
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 2};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_69 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_69_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_69_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1116.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -75073.27f : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (data[8 /* sqft_above */] <728.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(74, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 74, 2, data[13])) ? 
                        -10298.311f : 
                        -1402.044f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(74, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 74, 2, data[13])) ? 
                        -2219.5908f : 
                        891.47015f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <918.5f ? 
                        739.68677f : 
                        4102.705f) : 
                    9908.993f))) : 
         (data[2 /* sqft_living */] <1186.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                    -29713.152f : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1172.0f ? 
                        -413.65927f : 
                        -20357.326f)) : 
                193131.2f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (Double.isNaN(data[4]) || data[4 /* floors */] <1.7421875f ? 
                        -20645.125f : 
                        18550.623f) : 
                    -50110.066f) : 
                 (data[2 /* sqft_living */] <1325.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                        -39636.21f : 
                        -1251.6714f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[13])) ? 
                        84.16601f : 
                        5353.5483f)))));
    return pred;
  } // constant pool size = 184B, number of visited nodes = 18, static init size = 660B
  // {11111111 11111111 11101111 11101111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -9, -1, -1, -1, -1, -1, 27};
  // {11000101 10001100 00000101 00000000 00010100 10000000 00101011 00100000 00000001 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-93, 49, -96, 0, 40, 1, -44, 4, -128, 0};
  // {...2 0-bits... 11111111 11111111 11011111 11111111 01111111 11111011 10111110 10111101 11111101}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -5, -1, -2, -33, 125, -67, -65, 3};
  // {...2 0-bits... 10000000 00000010 10100000 00000100 10000000 00100111 00000010 01101101 01100011}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 64, 5, 32, 1, -28, 64, -74, -58, 0};
  // {00000101 10001000 00000100 00000000 00010000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {-96, 17, 32, 0, 8, 0, 0, 4, 0, 0};
  // {00000000 00000000 00010000 00100000 00000000 00000000 00001000 10000001 00000000 10000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 8, 4, 0, 0, 16, -127, 0, 1};
  // {11011111 11111111 11111011 11111111 11111011 10111111 11111111 11011111 11011101 11011}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, -1, -33, -1, -33, -3, -1, -5, -69, 27};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {11101011 11111111 11111111 10111111 11111111 11111111 11110011 11011111 11111111 11111}
  public static final byte[] GRPSPLIT8 = new byte[] {-41, -1, -1, -3, -1, -1, -49, -5, -1, 31};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00100}
  public static final byte[] GRPSPLIT9 = new byte[] {8, 0, 0, 0, 0, 0, 32, 0, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_70 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_70_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_70_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4643.5f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1977.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <4.379883f ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1676.5f ? 
                        -161.25716f : 
                        14099.759f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -22518.76f : 
                        5767.658f)) : 
                -14930.217f) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                -10825.421f : 
                32027.342f)) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            86681.45f : 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1998.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8458.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1866.5f ? 
                        -3982.866f : 
                        -15374.47f) : 
                    -49433.234f) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <627.0f ? 
                    -16153.373f : 
                    78998.65f))));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 12, static init size = 198B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11110111 11111111 11111111 10111111 11111101 11010111 11111011 11011111 11110111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-17, -1, -1, -3, -65, -21, -33, -5, -17, 31};
  // {00010000 00100010 01000000 01000000 00000010 01000000 00001000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 68, 2, 2, 64, 2, 16, 0, 64, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_71 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_71_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_71_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <11122.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[6 /* view */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[6])) ? 
                    -35545.98f : 
                     (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1983.5f ? 
                        -3933.415f : 
                        -27063.336f)) : 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.8759766f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3621.5f ? 
                        -377.8025f : 
                        5869.8423f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -32379.818f : 
                        3933.9795f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2052.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 76, 0, data[13])) ? 
                        -2222.608f : 
                        1329.7823f) : 
                    17958.424f) : 
                81127.88f)) : 
         (data[8 /* sqft_above */] <1199.0f ? 
            80061.65f : 
             (data[8 /* sqft_above */] <1516.0f ? 
                -41858.676f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8230.5f ? 
                    3714.924f : 
                    -21879.021f))));
    return pred;
  } // constant pool size = 118B, number of visited nodes = 14, static init size = 360B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 27};
  // {10010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {9, 0, 0, 0};
  // {11101111 11111111 11111111 10111111 11111101 11111110 11111111 11011111 11111101 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-9, -1, -1, -3, -65, 127, -1, -5, -65, 31};
  // {00000000 00000000 00000010 00000000 00000000 00000010 00000001 11000100 00000000 00100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 64, 0, 0, 64, -128, 35, 0, 4};
  // {10100111 01011000 11111011 01010111 01101001 01011111 10111011 11111100 01111111 0011}
  public static final byte[] GRPSPLIT5 = new byte[] {-27, 26, -33, -22, -106, -6, -35, 63, -2, 12};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_72 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_72_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_72_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <27896.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1883.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1648.5f ? 
                        -276.23944f : 
                        14017.47f) : 
                    -14774.779f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                    -22412.686f : 
                    -6660.589f)) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <903.5f ? 
                        -983.35f : 
                        -8294.556f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        2242.4688f : 
                        5974.77f)) : 
                33462.137f)) : 
         (data[8 /* sqft_above */] <1176.5f ? 
             (data[9 /* sqft_basement */] <291.0f ? 
                -92681.64f : 
                -2893.8582f) : 
             (data[2 /* sqft_living */] <1570.5f ? 
                147052.39f : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1998.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <7631.5f ? 
                        -4841.719f : 
                        -39810.438f) : 
                     (data[0 /* bedrooms */] <3.5f ? 
                        84683.19f : 
                        -21076.006f)))));
    return pred;
  } // constant pool size = 121B, number of visited nodes = 16, static init size = 330B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00000101 00000001 00000000 00000000 00000010 00000000 00001000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-96, -128, 0, 0, 64, 0, 16, 0, 0, 0};
  // {00010000 00000000 00000000 10000000 00000000 00100000 00000000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 1, 0, 4, 0, 0, 64, 0};
  // {11011110 01010100 11110111 11111101 01111101 11100111 11111111 11110111 10110111 11101}
  public static final byte[] GRPSPLIT3 = new byte[] {123, 42, -17, -65, -66, -25, -1, -17, -19, 23};
  // {00001110 00010000 11000001 00000001 01001000 01000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {112, 8, -125, -128, 18, 2, 0, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_73 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_73_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_73_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1276.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                -31058.045f : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1163.5f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 1, data[12]) || (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 42, 1, data[12])) ? 
                        -140.81618f : 
                        19471.336f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -15217.259f : 
                        -36.253963f))) : 
             (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                 (data[1 /* bathrooms */] <1.8720703f ? 
                    2013.3411f : 
                    -15207.154f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <50962.5f ? 
                        -282.28735f : 
                        2997.8132f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3119.5f ? 
                        1211.2058f : 
                        10337.995f)))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            81162.97f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10010.5f ? 
                 (data[2 /* sqft_living */] <1531.5f ? 
                    -27967.363f : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1717.5f ? 
                        -1841.9849f : 
                        -16820.488f)) : 
                48482.97f)));
    return pred;
  } // constant pool size = 120B, number of visited nodes = 15, static init size = 348B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11101011 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-41, -1, -1, -1, -1, -1, -17, -1, -1, 31};
  // {...1 0-bits... 00110000 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {12, 1, 0, 0, 0, 0};
  // {11011101 11110011 01111111 11011110 11111011 00101110 11011011 11001110 01111101 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-69, -49, -2, 123, -33, 116, -37, 115, -66, 31};
  // {11110111 00111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, -4, -1, -1, -1, 15};
  // {00010110 00000000 00000000 00000000 00000000 00000001 00111100 01110010 00100000 00001}
  public static final byte[] GRPSPLIT5 = new byte[] {104, 0, 0, 0, 0, -128, 60, 78, 4, 16};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_74 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_74_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_74_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1172.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -79206.266f : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.8720703f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -1155.885f : 
                        2715.2488f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -17846.91f : 
                        802.05023f)) : 
                14555.347f)) : 
         (data[2 /* sqft_living */] <1190.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                -21404.137f : 
                147860.05f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (data[8 /* sqft_above */] <1449.5f ? 
                    -40268.785f : 
                     (data[8 /* sqft_above */] <1716.5f ? 
                        10648.814f : 
                        -14316.125f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1329.5f ? 
                        -2602.9978f : 
                        168.61887f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1652.5f ? 
                        31792.719f : 
                        -22971.863f)))));
    return pred;
  } // constant pool size = 135B, number of visited nodes = 14, static init size = 462B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 01011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 26};
  // {00000100 10000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 1, 0, 4, 0, 0, 0, 0, 0, 0};
  // {11000001 00011100 10000101 00010000 00010100 10000010 10100011 00111000 10000001 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {-125, 56, -95, 8, 40, 65, -59, 28, -127, 0};
  // {11111111 11111111 11111011 11101111 11111111 11111111 11011101 11011111 01111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -33, -9, -1, -1, -69, -5, -2, 31};
  // {00000000 00000001 00010000 00000000 00000000 00100100 00100000 01000000 00000101 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -128, 8, 0, 0, 36, 4, 2, -96, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_75 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_75_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_75_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1238.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1164.0f ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 1, data[12]) || (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 42, 1, data[12])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -2353.3223f : 
                        932.88165f) : 
                    16834.111f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                    -36966.305f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -13184.063f : 
                        -637.3338f))) : 
             (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[12])) ? 
                 (Double.isNaN(data[4]) || data[4 /* floors */] <1.5078125f ? 
                     (data[2 /* sqft_living */] <1656.5f ? 
                        -3948.7102f : 
                        2009.7203f) : 
                    -17826.719f) : 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -275.19727f : 
                        1810.5558f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                        -3490.1477f : 
                        11031.906f)))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            77586.64f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10010.5f ? 
                 (data[2 /* sqft_living */] <1531.5f ? 
                    -23571.947f : 
                     (data[10 /* yr_built */] <1971.0f ? 
                        -15109.146f : 
                        -1601.7715f)) : 
                44461.85f)));
    return pred;
  } // constant pool size = 144B, number of visited nodes = 17, static init size = 444B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {...1 0-bits... 00110000 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {12, 1, 0, 0, 0, 0};
  // {11111111 11001110 11110001 11011111 10010101 10111011 11100011 10111010 01111111 11110}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 115, -113, -5, -87, -35, -57, 93, -2, 15};
  // {11101011 11111111 11111111 11111111 11111111 11111110 11011111 11011111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-41, -1, -1, -1, -1, 127, -5, -5, -1, 31};
  // {11011101 11110010 01111111 11011110 11111011 00011011 11111011 01101110 01011100 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-69, 79, -2, 123, -33, -40, -33, 118, 58, 31};
  // {11110111 00111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -4, -1, -1, -1, 15};
  // {00010110 01000000 00000100 00000000 00100000 00010001 01110110 11111010 11101000 00001}
  public static final byte[] GRPSPLIT6 = new byte[] {104, 2, 32, 0, 4, -120, 110, 95, 23, 16};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {20, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_76 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_76_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_76_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[8 /* sqft_above */] <1311.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                -20598.713f : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1164.5f ? 
                        -1347.4681f : 
                        -6968.283f) : 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[12])) ? 
                        -92.4795f : 
                        6173.3076f))) : 
             (data[10 /* yr_built */] <1941.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1205.5f ? 
                        2251.9878f : 
                        -7871.99f) : 
                    29903.64f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (data[10 /* yr_built */] <1991.5f ? 
                        -3742.4326f : 
                        -16990.33f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.8496094f ? 
                        223.69913f : 
                        -5052.4937f)))) : 
         (data[8 /* sqft_above */] <1176.5f ? 
             (data[9 /* sqft_basement */] <291.0f ? 
                -91484.91f : 
                -559.04767f) : 
             (data[2 /* sqft_living */] <1570.5f ? 
                133369.84f : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1998.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <7631.5f ? 
                        -2929.3628f : 
                        -38830.08f) : 
                     (data[2 /* sqft_living */] <2398.5f ? 
                        77024.984f : 
                        -15878.025f)))));
    return pred;
  } // constant pool size = 136B, number of visited nodes = 18, static init size = 372B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11101111 11111111 11111111 10111111 11111111 11111111 11110111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -1, -1, -3, -1, -1, -17, -1, -1, 31};
  // {11110010 11110110 10111011 11111110 01111101 00001011 01111111 10011110 01111100 11110}
  public static final byte[] GRPSPLIT2 = new byte[] {79, 111, -35, 127, -66, -48, -2, 121, 62, 15};
  // {00001100 01000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {48, 2, 0, 0, 0, 0};
  // {00010000 00000000 00000100 00000000 00000000 00100000 00000000 01000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 0, 32, 0, 0, 4, 0, 2, 0, 0};
  // {11111111 01111111 11111111 11111111 11111111 11111111 01110111 11011011 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -2, -1, -1, -1, -1, -18, -37, -1, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_77 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_77_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_77_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* bathrooms */] <1.3743896f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -50762.72f : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (data[10 /* yr_built */] <1934.5f ? 
                    -14273.434f : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <89.5f ? 
                        -7374.7275f : 
                        2488.108f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1804.5f ? 
                        -108.45459f : 
                        -6269.362f) : 
                     (data[11 /* yr_renovated */] <992.0f ? 
                        3103.9272f : 
                        7172.675f)))) : 
         (data[2 /* sqft_living */] <1182.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1154.0f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -3098.4834f : 
                        3447.1304f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        -29650.44f : 
                        -7840.7354f)) : 
                145026.23f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                 (data[8 /* sqft_above */] <1454.5f ? 
                    -45732.215f : 
                     (data[8 /* sqft_above */] <1721.5f ? 
                        7661.46f : 
                        -13308.253f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                     (data[10 /* yr_built */] <1940.5f ? 
                        2123.1333f : 
                        -148.64897f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.4023438f ? 
                        -19225.99f : 
                        39318.363f)))));
    return pred;
  } // constant pool size = 166B, number of visited nodes = 19, static init size = 528B
  // {11101101 11111111 11101111 10111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT0 = new byte[] {-73, -1, -9, -3, -1, -1, -1, -1, -1, 31};
  // {11111111 11111110 01111111 11011111 01111111 11101111 01100111 11111110 11111101 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, 127, -2, -5, -2, -9, -26, 127, -65, 27};
  // {01000000 10000100 00000100 00010000 00000000 00000000 00000000 00100000 10000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 33, 32, 8, 0, 0, 0, 4, 1, 0};
  // {00000000 00000001 00010000 00100000 00100000 00000000 00001000 00000000 00010001 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -128, 8, 4, 4, 0, 16, 0, -120, 0};
  // {01000010 00000000 00100000 00000001 00000100 00000001 01100000 10001000 01001000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {66, 0, 4, -128, 32, -128, 6, 17, 18, 0};
  // {10000000 00000000 10000000 00010001 00000000 00100001 01000000 01000000 00100000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 1, -120, 0, -124, 2, 2, 4, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_78 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_78_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_78_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4643.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1977.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4421.5f ? 
                        -146.37248f : 
                        -12024.28f) : 
                    -13185.156f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                    -10475.161f : 
                    28292.803f)) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                2067.0056f : 
                12408.292f)) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            76563.15f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10010.5f ? 
                 (data[8 /* sqft_above */] <1162.5f ? 
                    5756.0137f : 
                     (data[2 /* sqft_living */] <1615.5f ? 
                        -39280.168f : 
                        -8177.677f)) : 
                42255.973f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 11, static init size = 240B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00100000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 0, 2, 0, 8};
  // {00010000 00000001 01000000 01000000 10001000 00001000 00001000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, -128, 2, 2, 17, 16, 16, 0, 64, 0};
  // {11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -1, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_79 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_79_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_79_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1172.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -76960.62f : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1165.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -1059.6826f : 
                        1485.2723f) : 
                    11129.964f) : 
                -9151.241f)) : 
         (data[2 /* sqft_living */] <1190.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                -18048.285f : 
                147719.72f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9090.5f ? 
                     (data[2 /* sqft_living */] <1613.5f ? 
                        -29484.873f : 
                        3756.6824f) : 
                    -44335.88f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 44, 0, data[12])) ? 
                        -44.78492f : 
                        8265.393f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3730469f ? 
                        -15860.79f : 
                        35865.516f)))));
    return pred;
  } // constant pool size = 127B, number of visited nodes = 13, static init size = 438B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11110111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -17, -1, -1, 27};
  // {00000100 10000000 00000000 00100000 00000000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 1, 0, 4, 0, 0, 0, 4, 0, 0};
  // {01100011 00001100 10000001 00010001 00010100 10001011 10100011 00011010 00000000 10010}
  public static final byte[] GRPSPLIT2 = new byte[] {-58, 48, -127, -120, 40, -47, -59, 88, 0, 9};
  // {00000000 00000000 00010000 00000000 00000000 01100100 00000010 00000000 00100110 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, 38, 64, 0, 100, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00100000 00000000 00000000 00100000 00000000 0001}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 4, 0, 8};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_80 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_80_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_80_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1238.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1164.0f ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 1, data[12]) || (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 42, 1, data[12])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -703.2165f : 
                        2340.8943f) : 
                    11544.126f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (data[10 /* yr_built */] <1958.0f ? 
                        -33441.098f : 
                        -22189.174f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -11375.83f : 
                        -74.10693f))) : 
             (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[12])) ? 
                 (data[1 /* bathrooms */] <1.8720703f ? 
                    2297.5952f : 
                    -12669.6045f) : 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -419.8834f : 
                        1341.3756f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                        -3088.7869f : 
                        9760.39f)))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            73745.09f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10010.5f ? 
                 (data[8 /* sqft_above */] <1162.5f ? 
                    6349.084f : 
                     (data[2 /* sqft_living */] <1615.5f ? 
                        -32812.387f : 
                        -8109.881f)) : 
                41377.19f)));
    return pred;
  } // constant pool size = 144B, number of visited nodes = 17, static init size = 444B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {...1 0-bits... 00110000 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {12, 1, 0, 0, 0, 0};
  // {01000000 00001000 10000001 00010000 00010100 00000001 10101011 00110000 00000000 10000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 16, -127, 8, 40, -128, -43, 12, 0, 1};
  // {11001011 11111111 01111111 11111111 11111111 10111010 11011111 11011111 11011101 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-45, -1, -2, -1, -1, 93, -5, -5, -69, 31};
  // {11111101 11110010 11111111 11011110 11111011 01011111 11111001 01101110 01101010 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-65, 79, -1, 123, -33, -6, -97, 118, 86, 31};
  // {11110111 00111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -4, -1, -1, -1, 15};
  // {00011110 01000001 00000100 00000001 01101000 01010011 01110110 11111110 11101000 00001}
  public static final byte[] GRPSPLIT6 = new byte[] {120, -126, 32, -128, 22, -54, 110, 127, 23, 16};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {20, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_81 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_81_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_81_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1238.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1164.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -1911.8206f : 
                        638.5581f) : 
                    9366.203f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -29357.764f : 
                        -14731.83f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        -6751.4478f : 
                        3375.064f))) : 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2043.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5021.5f ? 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[6])) ? 
                        32.4771f : 
                        3382.7827f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        -21716.537f : 
                        -653.1f)) : 
                8900.848f)) : 
         (data[8 /* sqft_above */] <1176.5f ? 
             (data[9 /* sqft_basement */] <291.0f ? 
                -89136.1f : 
                3010.6743f) : 
             (data[2 /* sqft_living */] <1570.5f ? 
                125815.42f : 
                 (data[8 /* sqft_above */] <1671.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1457.0f ? 
                        -21270.936f : 
                        84016.46f) : 
                     (data[10 /* yr_built */] <1978.5f ? 
                        -29017.086f : 
                        -6807.8677f)))));
    return pred;
  } // constant pool size = 156B, number of visited nodes = 18, static init size = 492B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00000100 10000000 00000000 00100000 00000000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 1, 0, 4, 0, 0, 0, 4, 0, 0};
  // {11111111 11001110 11111111 11111111 10010101 11111011 11101011 10111010 01111110 11110}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 115, -1, -1, -87, -33, -41, 93, 126, 15};
  // {11001011 11111011 01111111 11111111 11111111 10011010 11011111 11001111 11011100 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-45, -33, -2, -1, -1, 89, -5, -13, 59, 31};
  // {11101011 11111111 11111111 11111111 11111111 11111010 11111111 11011111 11011101 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-41, -1, -1, -1, -1, 95, -1, -5, -69, 31};
  // {11000000 00110000 00000010 00001000 00011000 00000000 01000000 01000100 00001000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 12, 64, 16, 24, 0, 2, 34, 16, 0};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {10, 0, 0, 0};
  // {11111011 11111111 11111111 00111111 11111111 11111111 11111011 11011111 01111111 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, -1, -1, -4, -1, -1, -33, -5, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_82 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_82_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_82_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1116.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -57711.9f : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <2003.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1041.5f ? 
                        -823.18195f : 
                        2664.8992f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 76, 0, data[13])) ? 
                        -9318.706f : 
                        -745.6445f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <936.0f ? 
                        153.10767f : 
                        3227.4202f) : 
                    6730.677f))) : 
         (data[2 /* sqft_living */] <1186.5f ? 
             (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                    -25627.01f : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1163.5f ? 
                        37.584736f : 
                        -7837.846f)) : 
                166130.1f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9090.5f ? 
                     (data[2 /* sqft_living */] <1613.5f ? 
                        -33327.39f : 
                        2719.377f) : 
                    -44634.12f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <1325.5f ? 
                        -2219.7168f : 
                        123.55401f) : 
                     (data[4 /* floors */] <1.2539062f ? 
                        36746.453f : 
                        -13761.611f)))));
    return pred;
  } // constant pool size = 158B, number of visited nodes = 18, static init size = 504B
  // {11111111 11111111 11101111 11011111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -5, -1, -1, -1, -1, -1, 27};
  // {01000101 10001000 00000100 00000000 00010100 10000000 00001011 00100001 00000000 10000}
  public static final byte[] GRPSPLIT1 = new byte[] {-94, 17, 32, 0, 40, 1, -48, -124, 0, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111101 01111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -65, -1, -65, -2, 15};
  // {00000101 10000000 00000100 00000000 00010000 00000000 00000000 00100000 00000000 10000}
  public static final byte[] GRPSPLIT3 = new byte[] {-96, 1, 32, 0, 8, 0, 0, 4, 0, 1};
  // {01000000 01010000 00100100 00000000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 10, 36, 0, 0, 0};
  // {11011111 11111111 11111111 11111111 11111111 10011111 11111111 01011111 11011101 11011}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -1, -1, -1, -1, -7, -1, -6, -69, 27};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_83 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_83_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_83_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1238.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1164.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -3017.6633f : 
                        386.43613f) : 
                    9610.9f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                    -30823.646f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -11296.148f : 
                        -721.4067f))) : 
             (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[12])) ? 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 43, 0, data[12])) ? 
                        -8436.267f : 
                        350.6563f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                        -3066.5027f : 
                        8739.622f)) : 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.6367188f ? 
                    10308.218f : 
                    1040.4775f))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            75907.1f : 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1998.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8458.5f ? 
                     (data[2 /* sqft_living */] <1573.5f ? 
                        -24340.645f : 
                        -2186.2542f) : 
                    -44272.383f) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <627.0f ? 
                    -17603.693f : 
                    70570.31f))));
    return pred;
  } // constant pool size = 144B, number of visited nodes = 17, static init size = 444B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00000100 10000000 00000000 00100000 00000000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 1, 0, 4, 0, 0, 0, 4, 0, 0};
  // {01111111 11101110 11011110 11111111 10010101 11111011 11101011 10111110 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 119, 123, -1, -87, -33, -41, 125, -1, 31};
  // {11101111 11111111 11111111 11011111 11111111 11111011 11111111 11011111 11011101 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-9, -1, -1, -5, -1, -33, -1, -5, -69, 31};
  // {11011001 11100010 01111111 11111111 11111111 10011110 11011001 01101110 01111110 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-101, 71, -2, -1, -1, 121, -101, 118, 126, 31};
  // {00100000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 2, 0, 8};
  // {11110111 01111111 11111101 11111111 11111111 111}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, -2, -65, -1, -1, 7};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {20, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_84 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_84_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_84_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1172.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -79028.61f : 
             (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.621582f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -780.1009f : 
                        2288.8638f) : 
                    13177.956f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                    -16880.725f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -1470.0144f : 
                        5077.5244f)))) : 
         (data[2 /* sqft_living */] <1190.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                -17600.19f : 
                142646.12f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9090.5f ? 
                     (data[2 /* sqft_living */] <1613.5f ? 
                        -27849.504f : 
                        2685.7493f) : 
                    -36276.848f) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <790.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        216.23633f : 
                        22969.96f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                        -17102.326f : 
                        -402.06714f)))));
    return pred;
  } // constant pool size = 161B, number of visited nodes = 15, static init size = 594B
  // {11111111 11101111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -9, -9, -1, -1, -1, -1, -1, -1, 27};
  // {00000100 00000000 00000000 00110000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 12, 0, 0, 0, 0, 0, 0};
  // {01000000 10001100 00000100 00000000 00010100 00000010 10101011 00111000 10000001 10000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 49, 32, 0, 40, 64, -43, 28, -127, 1};
  // {01111111 11111111 11011111 11011111 11111111 11111111 11011101 11011111 01111110 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, -1, -5, -5, -1, -1, -69, -5, 126, 31};
  // {00000000 00000000 10000000 00000001 00000100 00000001 00001000 00001000 00001000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 1, -128, 32, -128, 16, 16, 16, 0};
  // {00100000 00000001 10010000 00010000 00000000 00000000 00100000 00000000 10000001 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, -128, 9, 8, 0, 0, 4, 0, -127, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 4};
  // {10111111 11011111 11111111 01111111 11111111 11101111 11111111 11111110 11111111 11011}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -5, -1, -2, -1, -9, -1, 127, -1, 27};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_85 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_85_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_85_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <11122.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.7421875f ? 
                        -28339.68f : 
                        -12452.667f) : 
                    -2986.1523f) : 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.8759766f ? 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        -473.68628f : 
                        2526.283f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -29319.684f : 
                        2717.0923f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1506.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5059.5f ? 
                        25.826567f : 
                        -16712.762f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 76, 0, data[13])) ? 
                        -3834.1458f : 
                        36823.594f)) : 
                76443.4f)) : 
         (data[8 /* sqft_above */] <1199.0f ? 
            75566.875f : 
             (data[8 /* sqft_above */] <1555.0f ? 
                -37717.965f : 
                 (data[3 /* sqft_lot */] <7351.5f ? 
                    4796.3047f : 
                    -12371.4375f))));
    return pred;
  } // constant pool size = 127B, number of visited nodes = 15, static init size = 390B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 27};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {27, 0, 0, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0};
  // {11101111 11111111 11111111 10111111 11111101 11111111 11110111 11011111 11111101 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, -1, -1, -3, -65, -1, -17, -5, -65, 31};
  // {00000000 00000000 01000000 00000000 00000000 00000000 00000000 11000000 00100000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 2, 0, 0, 0, 0, 3, 4, 4};
  // {00110000 00000000 00000000 11000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {12, 0, 0, 3, 0, 0, 0, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_86 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_86_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_86_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1238.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1164.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -3298.658f : 
                        259.91513f) : 
                    8201.144f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                    -26450.426f : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1210.5f ? 
                        -8138.4985f : 
                        2767.8638f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.6386719f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 0, data[12]) || (GenModel.bitSetIsInRange(42, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 42, 0, data[12])) ? 
                        -767.0165f : 
                        2451.0583f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 76, 0, data[13])) ? 
                        -23096.338f : 
                        727.3615f)) : 
                 (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[5])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1958.5f ? 
                        574.6985f : 
                        -16532.67f) : 
                    16702.05f))) : 
         (data[8 /* sqft_above */] <1176.5f ? 
             (data[9 /* sqft_basement */] <291.0f ? 
                -79150.266f : 
                177.53633f) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <7558.5f ? 
                 (data[2 /* sqft_living */] <1668.5f ? 
                    -27502.727f : 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[7])) ? 
                        -15365.536f : 
                        5406.819f)) : 
                 (data[8 /* sqft_above */] <1593.0f ? 
                    194116.4f : 
                    -20893.895f))));
    return pred;
  } // constant pool size = 161B, number of visited nodes = 19, static init size = 498B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00000100 00010000 00000000 00100000 00000000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 8, 0, 4, 0, 0, 0, 4, 0, 0};
  // {01111111 11111110 11011110 11111111 10010111 11111011 11101011 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 127, 123, -1, -23, -33, -41, -1, -1, 31};
  // {11001111 11111110 01111111 11111111 11111111 11111011 11011111 11011111 01111110 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-13, 127, -2, -1, -1, -33, -5, -5, 126, 31};
  // {00111111 01110001 10011100 01010001 01001011 01011011 01110110 10111111 11110110 00101}
  public static final byte[] GRPSPLIT4 = new byte[] {-4, -114, 57, -118, -46, -38, 110, -3, 111, 20};
  // {00000000 00000000 00000000 01100000 01000000 10}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 6, 2, 1};
  // {11111111 11111011 11111111 01111111 11111111 11011111 11110110 11111111 11110111 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -33, -1, -2, -1, -5, 111, -1, -17, 15};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {24, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_87 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_87_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_87_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4643.5f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1977.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4421.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4168.5f ? 
                        -165.85161f : 
                        8797.1875f) : 
                    -9663.753f) : 
                -11528.183f) : 
             (data[10 /* yr_built */] <1994.5f ? 
                25211.693f : 
                -8589.865f)) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            74510.92f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10010.5f ? 
                 (data[8 /* sqft_above */] <1144.5f ? 
                    5970.2676f : 
                     (data[2 /* sqft_living */] <1615.5f ? 
                        -31883.082f : 
                        -7814.2275f)) : 
                38274.285f)));
    return pred;
  } // constant pool size = 53B, number of visited nodes = 10, static init size = 66B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_88 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_88_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_88_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <2024.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4781.0f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -1369.3353f : 
                        130.71666f) : 
                    10158.954f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                    -19452.643f : 
                    -1087.4225f)) : 
            8318.891f) : 
         (data[8 /* sqft_above */] <1176.5f ? 
             (data[9 /* sqft_basement */] <291.0f ? 
                -78000.92f : 
                -207.50287f) : 
             (data[2 /* sqft_living */] <1570.5f ? 
                114309.07f : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1998.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <7631.5f ? 
                        -700.85175f : 
                        -33870.605f) : 
                     (data[2 /* sqft_living */] <2398.5f ? 
                        68101.07f : 
                        -16647.346f)))));
    return pred;
  } // constant pool size = 83B, number of visited nodes = 12, static init size = 198B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00101111 01110111 11111110 01101111 11101111 01011011 01111111 11111111 11010110 10111}
  public static final byte[] GRPSPLIT1 = new byte[] {-12, -18, 127, -10, -9, -38, -2, -1, 107, 29};
  // {11111110 11111111 11111111 00111111 01111111 11111111 11111011 11011111 01111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -1, -1, -4, -2, -1, -33, -5, -2, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_89 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_89_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_89_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* yr_built */] <1991.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1427.5f ? 
                -81788.266f : 
                 (Double.isNaN(data[4]) || data[4 /* floors */] <1.7460938f ? 
                    -18131.234f : 
                    14144.888f)) : 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4599.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1958.5f ? 
                        -206.26913f : 
                        -15373.672f) : 
                     (data[9 /* sqft_basement */] <677.5f ? 
                        44492.5f : 
                        -18031.273f)) : 
                22868.383f)) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                    -16472.611f : 
                     (data[2 /* sqft_living */] <1276.5f ? 
                        -10735.953f : 
                        -3122.064f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[7])) ? 
                        -7709.6045f : 
                        572.29047f) : 
                     (data[10 /* yr_built */] <2004.5f ? 
                        22416.688f : 
                        -824.3291f))) : 
            91275.36f));
    return pred;
  } // constant pool size = 133B, number of visited nodes = 15, static init size = 426B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111011 11110001 11111111 11111111 11111111 11111111 01110010 10111011 00111110 10011}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, -113, -1, -1, -1, -1, 78, -35, 124, 25};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01110111 11111111 11111110 10111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -18, -1, 127, 29};
  // {00011000 10000000 00000000 11000000 00000000 00000000 00000000 00000000 00001000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {24, 1, 0, 3, 0, 0, 0, 0, 16, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_90 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_90_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_90_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1172.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -66096.48f : 
             (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.621582f ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(42, 1, data[12]) || (GenModel.bitSetIsInRange(42, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 42, 1, data[12])) ? 
                     (data[2 /* sqft_living */] <858.5f ? 
                        -1847.8354f : 
                        962.4436f) : 
                    11872.377f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                    -13567.104f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -447.84213f : 
                        5215.5957f)))) : 
         (data[2 /* sqft_living */] <1190.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                -20052.793f : 
                133792.84f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (Double.isNaN(data[4]) || data[4 /* floors */] <1.7421875f ? 
                        -20061.36f : 
                        12730.399f) : 
                    -42438.13f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[7])) ? 
                        -6973.009f : 
                        90.595894f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3730469f ? 
                        -15015.188f : 
                        34225.03f)))));
    return pred;
  } // constant pool size = 140B, number of visited nodes = 15, static init size = 468B
  // {11111111 11111111 11101110 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, 119, -1, -1, -1, -1, -1, -1, 27};
  // {...1 0-bits... 00010000 10010000 00000000 00100000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 9, 0, 4, 0, 0};
  // {01111111 11111111 11011011 11011111 11111111 11111111 11011101 11011110 01111110 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, -1, -37, -5, -1, -1, -69, 123, 126, 31};
  // {00000000 00010000 10000000 00000001 00000100 00000001 00001000 00001000 00000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 1, -128, 32, -128, 16, 16, 0, 0};
  // {00000000 00000100 00010000 00000000 00000100 00000101 00000000 01000010 00100010 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 32, 8, 0, 32, -96, 0, 66, 68, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {28, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_91 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_91_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_91_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1238.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1164.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -2141.1636f : 
                        434.15402f) : 
                    7502.2734f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                    -32591.768f : 
                     (data[2 /* sqft_living */] <1194.5f ? 
                        -12356.514f : 
                        -962.0579f))) : 
             (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                 (Double.isNaN(data[4]) || data[4 /* floors */] <1.5078125f ? 
                     (data[2 /* sqft_living */] <1656.5f ? 
                        -3532.2126f : 
                        2391.9983f) : 
                    -14653.353f) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4539.5f ? 
                        86.73994f : 
                        -6423.7007f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        618.0597f : 
                        22988.656f)))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            78986.01f : 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <636.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <425.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <186.5f ? 
                        -17580.553f : 
                        6413.4854f) : 
                    -37229.61f) : 
                 (data[2 /* sqft_living */] <2201.5f ? 
                    78572.72f : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                        -27618.266f : 
                        1131.5468f)))));
    return pred;
  } // constant pool size = 150B, number of visited nodes = 19, static init size = 432B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00000100 00000000 00000000 00100000 00000000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 4, 0, 0, 0, 4, 0, 0};
  // {01111111 11111110 11011111 11111111 10010101 11111011 11101011 10111110 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 127, -5, -1, -87, -33, -41, 125, -1, 31};
  // {11001111 11111111 01111111 11111111 11111111 11111011 11111111 11011111 01011101 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-13, -1, -2, -1, -1, -33, -1, -5, -70, 31};
  // {11110111 00111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, -4, -1, -1, -1, 15};
  // {01110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {14, 0, 0, 0};
  // {00010000 00000000 00000100 10000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 32, 1, 0, 0, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_92 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_92_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_92_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <27896.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5016.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <3.6386719f ? 
                        -1217.3269f : 
                        -29329.197f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <4.1132812f ? 
                        122.77768f : 
                        9339.933f)) : 
                 (data[9 /* sqft_basement */] <1506.5f ? 
                    -17187.303f : 
                    -4082.4702f)) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1997.5f ? 
                        -3271.4336f : 
                        2663.4258f) : 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                        -2948.6477f : 
                        4036.409f)) : 
                27283.67f)) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            71087.41f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10010.5f ? 
                 (data[8 /* sqft_above */] <1144.5f ? 
                    6289.06f : 
                     (data[2 /* sqft_living */] <1615.5f ? 
                        -35348.82f : 
                        -7728.715f)) : 
                35995.508f)));
    return pred;
  } // constant pool size = 113B, number of visited nodes = 15, static init size = 306B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00101111 11100101 11011110 01001101 10101111 00011011 01111111 11111111 11011100 10101}
  public static final byte[] GRPSPLIT1 = new byte[] {-12, -89, 123, -78, -11, -40, -2, -1, 59, 21};
  // {00010010 00000000 00000000 10000000 00000000 00100000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {72, 0, 0, 1, 0, 4, 0, 0, 0, 0};
  // {11011110 01010110 10110111 11101101 01111101 11100111 11111111 11110111 10110111 10101}
  public static final byte[] GRPSPLIT3 = new byte[] {123, 106, -19, -73, -66, -25, -1, -17, -19, 21};
  // {11111111 10111011 11111111 11111111 11101111 0111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -35, -1, -1, -9, 14};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_93 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_93_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_93_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1172.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -47287.887f : 
             (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.621582f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 1, data[13]) || (GenModel.bitSetIsInRange(76, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 76, 1, data[13])) ? 
                     (data[2 /* sqft_living */] <732.5f ? 
                        -2752.2832f : 
                        646.9881f) : 
                    9786.356f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 76, 1, data[13])) ? 
                    -11634.352f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 1, data[13]) || (GenModel.bitSetIsInRange(76, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 76, 1, data[13])) ? 
                        -209.14264f : 
                        4420.385f)))) : 
         (data[2 /* sqft_living */] <1190.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                -21926.828f : 
                129762.58f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9090.5f ? 
                     (data[2 /* sqft_living */] <1613.5f ? 
                        -23722.012f : 
                        381.84723f) : 
                    -39583.34f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT7, 44, 0, data[12])) ? 
                        -1.1871735f : 
                        6689.771f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3730469f ? 
                        -14707.455f : 
                        32069.832f)))));
    return pred;
  } // constant pool size = 146B, number of visited nodes = 15, static init size = 504B
  // {01111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-2, -1, -9, -1, -1, -1, -1, -1, -1, 27};
  // {...1 0-bits... 00001000 00000000 00001000 01100000 00000000 00000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT1 = new byte[] {16, 0, 16, 6, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 11111111 11110111 10110111 10111111 11111111 11111111 10111011 10111100 11111101 111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -17, -19, -3, -1, -1, -35, 61, -65, 15};
  // {...1 0-bits... 00000000 00100000 00000000 00000010 00001000 00000010 10010000 00010000 00000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 4, 0, 64, 16, 64, 9, 8, 0, 0};
  // {00100000 00000000 00010000 00000000 00000000 01100000 00100000 00001000 10000001 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 8, 0, 0, 6, 4, 16, -127, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00100000 00000000 00000000 10100000 00000000 0001}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 5, 0, 8};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_94 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_94_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_94_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3388.5f ? 
             (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        -20651.922f : 
                        -2957.6997f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <4.1132812f ? 
                        -126.285706f : 
                        -10011.988f)) : 
                14379.246f) : 
             (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                    -25227.521f : 
                     (data[8 /* sqft_above */] <3678.5f ? 
                        5081.885f : 
                        -3090.6782f)) : 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4266.5f ? 
                        11200.564f : 
                        -13358.777f) : 
                    30458.58f))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            66611.15f : 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <10010.5f ? 
                 (data[8 /* sqft_above */] <1144.5f ? 
                    6814.3267f : 
                     (data[2 /* sqft_living */] <1615.5f ? 
                        -29712.176f : 
                        -7489.51f)) : 
                35389.0f)));
    return pred;
  } // constant pool size = 114B, number of visited nodes = 15, static init size = 312B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 10000000 00000000 00000000 00000000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0, 0, 8};
  // {11101111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -1, -1, -2, -1, -1, -1, -1, -1, 31};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0};
  // {00010100 00000000 00010111 00010000 00001000 0100}
  public static final byte[] GRPSPLIT4 = new byte[] {40, 0, -24, 8, 16, 2};
  // {11101111 11110111 11111111 11011111 11111111 11111110 11111111 11111111 01101111 10111}
  public static final byte[] GRPSPLIT5 = new byte[] {-9, -17, -1, -5, -1, 127, -1, -1, -10, 29};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_95 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_95_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_95_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1238.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1173.0f ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.6171875f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        246.3172f : 
                        9286.461f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -11938.907f : 
                        490.1522f)) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -30092.17f : 
                        -14725.092f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        -4332.025f : 
                        4055.8936f))) : 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4643.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1977.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT6, 44, 0, data[12])) ? 
                        -4491.1196f : 
                        186.66948f) : 
                    -10263.908f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                    -8448.315f : 
                    23901.023f))) : 
         (data[8 /* sqft_above */] <1176.5f ? 
             (data[9 /* sqft_basement */] <291.0f ? 
                -78299.36f : 
                188.50742f) : 
             (data[2 /* sqft_living */] <1570.5f ? 
                108985.75f : 
                 (data[10 /* yr_built */] <1957.5f ? 
                     (data[8 /* sqft_above */] <1664.0f ? 
                        74275.125f : 
                        -24348.344f) : 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[7])) ? 
                        -20525.062f : 
                        7105.794f)))));
    return pred;
  } // constant pool size = 167B, number of visited nodes = 19, static init size = 534B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00000100 00000000 00000000 00110000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 0, 12, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11011111 11011111 11111111 11111111 11011101 11011111 01111110 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -5, -5, -1, -1, -69, -5, 126, 31};
  // {11001011 11111010 01111111 11101111 11111011 10011010 11011111 11100111 01011100 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-45, 95, -2, -9, -33, 89, -5, -25, 58, 31};
  // {11001111 11111111 11111111 11111111 11111011 11111011 11011111 11111111 01111101 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-13, -1, -1, -1, -33, -33, -5, -1, -66, 31};
  // {11000000 00100000 00000010 00101000 00011000 00000000 01000000 00000100 00001000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 4, 64, 20, 24, 0, 2, 32, 16, 0};
  // {11110111 00111111 11111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {-17, -4, -65, -1, -1, 15};
  // {00010000 00100110 01000000 01000000 00000010 01000100 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 100, 2, 2, 64, 34, 0, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {24, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_96 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_96_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_96_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* yr_built */] <1991.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1578.5f ? 
                -63276.605f : 
                 (data[10 /* yr_built */] <1980.0f ? 
                    -12338.632f : 
                    14242.12f)) : 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4599.0f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <790.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        85.44862f : 
                        24657.043f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -22776.94f : 
                        -1348.4207f)) : 
                20932.729f)) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (data[9 /* sqft_basement */] <225.5f ? 
                        -23952.314f : 
                        -1644.3599f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <2006.5f ? 
                        -6545.5083f : 
                        -70.01941f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[7])) ? 
                        -7106.7603f : 
                        512.7448f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4298.5f ? 
                        18022.441f : 
                        -3663.6716f))) : 
            85395.63f));
    return pred;
  } // constant pool size = 148B, number of visited nodes = 16, static init size = 492B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 4};
  // {11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -2, -1, -1, -1, -1, -1, 27};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111011 11110001 11111111 11111111 11111111 11111111 01110011 10111011 00111110 10011}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -113, -1, -1, -1, -1, -50, -35, 124, 25};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01110111 11111111 11111110 10011}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -18, -1, 127, 25};
  // {00011000 10000000 00000000 11000000 00000000 00000000 00000000 00000000 00001000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {24, 1, 0, 3, 0, 0, 0, 0, 16, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_97 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_97_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_97_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* bathrooms */] <1.6248779f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -32018.953f : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (data[2 /* sqft_living */] <1125.5f ? 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                        -871.17474f : 
                        3868.3f) : 
                     (data[2 /* sqft_living */] <1241.5f ? 
                        -12599.244f : 
                        -2935.2764f)) : 
                 (data[8 /* sqft_above */] <1027.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 76, 0, data[13])) ? 
                        -4732.0674f : 
                        58.513557f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 76, 0, data[13])) ? 
                        -43.177864f : 
                        3828.7412f)))) : 
         (data[2 /* sqft_living */] <1182.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                    -17545.24f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        -4871.7295f : 
                        225.17336f)) : 
                109833.25f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (Double.isNaN(data[4]) || data[4 /* floors */] <1.7421875f ? 
                        -17666.396f : 
                        14053.97f) : 
                    -42078.03f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 77, 0, data[13])) ? 
                        -563.4171f : 
                        707.0943f) : 
                     (data[8 /* sqft_above */] <1600.5f ? 
                        36615.555f : 
                        -16097.894f)))));
    return pred;
  } // constant pool size = 193B, number of visited nodes = 19, static init size = 690B
  // {11111111 11111111 11101111 10111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -3, -1, -1, -1, -1, -1, 27};
  // {11001001 01101100 01111011 11101111 01101101 11001111 01101111 11111110 11010101 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-109, 54, -34, -9, -74, -13, -10, 127, -85, 31};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 0, 0, 0};
  // {11111111 11111111 11010111 11011111 10011111 10111110 11111111 11111111 01111111 1111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -21, -5, -7, 125, -1, -1, -2, 15};
  // {01000000 00100000 00000000 00100000 01000100 00000001 01001000 01110100 10000001 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 4, 0, 4, 34, -128, 18, 46, -127, 0};
  // {00000000 00010000 00010000 00000001 00000000 00000000 00011000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 8, 8, -128, 0, 0, 24, 0, 0, 0};
  // {11111111 11111111 11011111 11011111 11111111 10011111 11011111 11010111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -5, -5, -1, -7, -5, -21, -1, 31};
  // {01000000 00000001 00000000 00000000 00000000 00000011 01000001 11010100 00001000 00001}
  public static final byte[] GRPSPLIT7 = new byte[] {2, -128, 0, 0, 0, -64, -126, 43, 16, 16};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00110111 11010011 10011000 01111001 10010011 01011011 01110110 00001111 10100110 00101}
  public static final byte[] GRPSPLIT10 = new byte[] {-20, -53, 25, -98, -55, -38, 110, -16, 101, 20};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_98 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_98_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_98_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1506.5f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1356.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4703.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <4.1132812f ? 
                        -134.38918f : 
                        9727.666f) : 
                    -8988.859f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                    -26619.275f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -4440.2754f : 
                        5642.658f))) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                    -15803.803f : 
                     (!Double.isNaN(data[6 /* view */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                        -4715.146f : 
                        6103.5234f)) : 
                23146.918f)) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            68081.66f : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2142.0f ? 
                 (data[8 /* sqft_above */] <1162.5f ? 
                    6076.0312f : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1589.0f ? 
                        -32668.182f : 
                        -6000.1387f)) : 
                 (data[2 /* sqft_living */] <2483.5f ? 
                    68915.83f : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1980.5f ? 
                        -22565.291f : 
                        2358.511f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 16, static init size = 360B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11101111 11111111 11111111 10111111 11111101 10111111 11111101 11111111 11111101 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -1, -1, -3, -65, -3, -65, -1, -65, 31};
  // {00000100 00000000 10000000 00000000 00010000 00100001 10000001 01000000 00000001 01000}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 0, 1, 0, 8, -124, -127, 2, -128, 2};
  // {00110100 00000000 00000000 00000000 00000000 00000010 00000010 10000000 00000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {44, 0, 0, 0, 0, 64, 64, 1, 0, 0};
  // {11111111 11111110 10111111 11111111 11111111 11111111 11011010 11111111 01111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, 127, -3, -1, -1, -1, 91, -1, -2, 31};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_99 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_99_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_99_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1116.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -51923.95f : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        -5700.3916f : 
                        -1735.0703f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <976.5f ? 
                        -732.4786f : 
                        1459.2352f)) : 
                6101.517f)) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1221.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                    -21148.047f : 
                     (data[2 /* sqft_living */] <1136.0f ? 
                        9098.372f : 
                        -3888.6055f)) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <790.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        266.8077f : 
                        17728.86f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        -13501.1045f : 
                        -250.18767f))) : 
             (data[8 /* sqft_above */] <1296.5f ? 
                110157.055f : 
                 (data[8 /* sqft_above */] <1616.5f ? 
                    -18480.812f : 
                     (data[0 /* bedrooms */] <3.5f ? 
                        -1886.3082f : 
                        -3704.8406f)))));
    return pred;
  } // constant pool size = 148B, number of visited nodes = 16, static init size = 492B
  // {11111111 11111111 11101111 11011111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -5, -1, -1, -1, -1, -1, 27};
  // {10000101 10000000 00000101 00000000 00010000 00000000 00000000 00000000 00000000 10000}
  public static final byte[] GRPSPLIT1 = new byte[] {-95, 1, -96, 0, 8, 0, 0, 0, 0, 1};
  // {11111111 11101111 11111111 11111110 10011111 11111111 11100111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -9, -1, 127, -7, -1, -25, -1, -1, 31};
  // {11011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {27, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11011111 11111111 11111111 11111110 11111111 10011011 11111111 10111111 11011100 11011}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -1, -1, 127, -1, -39, -1, -3, 59, 27};
  // {00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 4};
  // {10111111 11011111 11111111 01111111 11111111 11101111 11111111 11111110 11111111 11011}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -5, -1, -2, -1, -9, -1, 127, -1, 27};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_100 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_100_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_100_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1116.5f ? 
         (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT0, 44, 0, data[12])) ? 
            -46953.797f : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                    -5746.083f : 
                    -2787.4436f) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <708.5f ? 
                        -3087.8604f : 
                        459.3282f) : 
                    5759.857f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1221.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                    -23049.309f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -4834.959f : 
                        4572.608f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9090.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        -11895.744f : 
                        -49.875988f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                        221.3887f : 
                        62099.54f))) : 
             (data[2 /* sqft_living */] <1570.5f ? 
                96686.65f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8230.5f ? 
                     (data[8 /* sqft_above */] <1708.5f ? 
                        5898.579f : 
                        -9191.013f) : 
                    -25480.094f))));
    return pred;
  } // constant pool size = 161B, number of visited nodes = 16, static init size = 570B
  // {11111111 11111111 11011111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -5, -1, -1, 15};
  // {11111111 11101111 11111111 11011110 11011111 11111111 11100111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -9, -1, 123, -5, -1, -25, -1, -1, 27};
  // {00000000 00000000 00000000 00000001 00100000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 4, 0, 0, 0, 0, 0};
  // {10000101 00000000 00000101 00000000 00010000 00000000 00000000 00000000 00000000 10000}
  public static final byte[] GRPSPLIT3 = new byte[] {-95, 0, -96, 0, 8, 0, 0, 0, 0, 1};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11011111 11111111 11111111 11111111 11111111 11011011 11111111 11111111 11011100 11011}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -1, -1, -1, -1, -37, -1, -1, 59, 27};
  // {00000000 00100000 00000010 00101000 00000000 00001000 01001000 00000100 00000100 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 4, 64, 20, 0, 16, 18, 32, 32, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 27};
  // {00000000 00000000 00000000 00000000 00000000 00000001 00010010 10000000 00000000 00100}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, -128, 72, 1, 0, 4};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_101 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_101_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_101_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* yr_built */] <1991.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1578.5f ? 
                -60842.06f : 
                 (data[10 /* yr_built */] <1980.0f ? 
                    -9179.504f : 
                    10546.967f)) : 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4599.0f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[12])) ? 
                        -5927.4775f : 
                        -1002.9525f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1129.5f ? 
                        892.6092f : 
                        -3094.5408f)) : 
                18981.182f)) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (data[9 /* sqft_basement */] <225.5f ? 
                        -22177.05f : 
                        -1145.3815f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <2006.5f ? 
                        -5623.455f : 
                        -9.783374f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                     (data[4 /* floors */] <1.7421875f ? 
                        3791.9172f : 
                        -654.4362f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[6])) ? 
                        2757.5686f : 
                        16393.926f))) : 
            77488.805f));
    return pred;
  } // constant pool size = 144B, number of visited nodes = 16, static init size = 468B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00100111 00111110 00111011 00101110 01001001 01001101 11001111 11110111 11010111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-28, 124, -36, 116, -110, -78, -13, -17, -21, 31};
  // {11100111 01111101 11111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-25, -66, -65, -1, -1, 15};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11011011 11110001 11111111 11111111 11111111 11111111 01110011 10111011 00111110 10011}
  public static final byte[] GRPSPLIT4 = new byte[] {-37, -113, -1, -1, -1, -1, -50, -35, 124, 25};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01110111 11111111 11111110 10011}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -18, -1, 127, 25};
  // {00011011 11000001 00000100 11000001 00000000 00000010 00100000 00001000 00101100 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {-40, -125, 32, -125, 0, 64, 4, 16, 52, 0};
  // {01110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {14, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_102 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_102_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_102_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[4 /* floors */] <1.2502441f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3074.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2102.5f ? 
                        -895.10803f : 
                        -5752.875f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2145.5f ? 
                        840.80035f : 
                        7797.869f)) : 
                15057.43f) : 
             (data[8 /* sqft_above */] <1176.5f ? 
                -33299.492f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <7551.5f ? 
                    -11945.722f : 
                    144570.69f))) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1578.5f ? 
                -36620.477f : 
                 (data[2 /* sqft_living */] <1811.5f ? 
                    12349.112f : 
                     (data[8 /* sqft_above */] <2204.5f ? 
                        -27707.24f : 
                        -2534.879f))) : 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1789.5f ? 
                 (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[12])) ? 
                    -13378.611f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 76, 0, data[13])) ? 
                        -2019.593f : 
                        484.00278f)) : 
                16117.755f)));
    return pred;
  } // constant pool size = 113B, number of visited nodes = 15, static init size = 306B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00001010 10000110 00101110 00001010 11111100 00001001 11010110 10010111 01010000 10001}
  public static final byte[] GRPSPLIT1 = new byte[] {80, 97, 116, 80, 63, -112, 107, -23, 10, 17};
  // {11111111 01111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -2, -9, -1, -1, -1, -1, -1, -1, 27};
  // {11111111 01111111 11110111 11011111 11011111 1111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -2, -17, -5, -5, 15};
  // {10111111 11110001 11110001 11111101 00000111 11110111 01101111 01111110 10100100 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {-3, -113, -113, -65, -32, -17, -10, 126, 37, 15};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_103 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_103_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_103_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1182.5f ? 
         (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1176.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                -60124.64f : 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <1.6171875f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        230.72893f : 
                        12469.116f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -8092.4844f : 
                        -40.76348f))) : 
            94047.15f) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9025.5f ? 
                 (data[8 /* sqft_above */] <1455.5f ? 
                    -25304.092f : 
                     (data[8 /* sqft_above */] <1854.5f ? 
                        -2477.4138f : 
                        -5032.113f)) : 
                -42738.434f) : 
             (data[2 /* sqft_living */] <1217.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                    -14641.368f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                        -2777.2395f : 
                        3108.9248f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[7])) ? 
                        -6978.389f : 
                        129.1844f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3730469f ? 
                        -15024.304f : 
                        32518.555f)))));
    return pred;
  } // constant pool size = 148B, number of visited nodes = 16, static init size = 492B
  // {11111111 11111111 11101111 11111111 11111111 11011111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -5, -1, -1, -1, 27};
  // {00000100 10000000 00100000 00100000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 1, 4, 4, 0, 0, 0, 0, 0, 0};
  // {11111111 11101111 11011111 11011110 11111111 11111111 11001101 11011110 01111110 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -9, -5, 123, -1, -1, -77, 123, 126, 31};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {11111011 11111110 11111111 11111111 11011111 11111010 11011101 00111101 11111110 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, 127, -1, -1, -5, 95, -69, -68, 127, 31};
  // {00000000 00000000 00000010 00101000 00000000 01000000 01000000 00000100 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 64, 20, 0, 2, 2, 32, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {28, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_104 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_104_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_104_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1506.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5092.0f ? 
                 (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
                    -8319.938f : 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[12])) ? 
                        -170.82185f : 
                        2767.6912f)) : 
                -8522.905f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                    -15620.664f : 
                    -2370.9463f) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                    7130.1626f : 
                    25717.07f))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            73785.586f : 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <636.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <425.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <186.5f ? 
                        -15793.721f : 
                        5562.9453f) : 
                    -39399.56f) : 
                 (data[9 /* sqft_basement */] <791.0f ? 
                    68274.234f : 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[7])) ? 
                        -21306.74f : 
                        -5995.131f)))));
    return pred;
  } // constant pool size = 109B, number of visited nodes = 14, static init size = 306B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11111111 01111111 11111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -2, -65, -1, -1, 15};
  // {00100000 00000000 00000001 01100000 00000000 0001}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, -128, 6, 0, 8};
  // {00110100 00000000 00000000 10000000 10000000 00011111 10000010 10001000 01000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {44, 0, 0, 1, 1, -8, 65, 17, 2, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {12, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {24, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_105 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_105_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_105_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* sqft_lot */] <5880.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1983.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <399.0f ? 
                    -10921.189f : 
                    3103.604f) : 
                -24480.139f) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.6367188f ? 
                     (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <960.5f ? 
                        -2239.7732f : 
                        928.1014f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 76, 0, data[13])) ? 
                        -11206.66f : 
                        -4022.9202f)) : 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[12])) ? 
                     (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -36.943565f : 
                        3174.0725f) : 
                    9426.306f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1506.5f ? 
                     (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT7, 44, 0, data[12])) ? 
                        -7439.318f : 
                        -166.07108f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[13])) ? 
                        394.43204f : 
                        21208.393f)) : 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (data[2 /* sqft_living */] <1358.5f ? 
                        -42478.04f : 
                        2229.648f) : 
                    86474.5f)) : 
            31474.244f));
    return pred;
  } // constant pool size = 155B, number of visited nodes = 17, static init size = 510B
  // {11101111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11101111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -1, -9, -1, -1, -1, -1, -1, -9, 27};
  // {00111001 11000111 11011011 11111111 01111011 10101111 01111100 10111110 01111010 01101}
  public static final byte[] GRPSPLIT1 = new byte[] {-100, -29, -37, -1, -34, -11, 62, 125, 94, 22};
  // {11111111 11101111 11111011 11111111 11111011 11101111 01111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -9, -33, -1, -33, -9, -66, -1, -1, 15};
  // {00010000 01000000 00000001 00000000 00000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 2, -128, 0, 0, 0};
  // {01001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {18, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00100100 00100101 10000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 8, 0, 0, 0, 36, -92, 1, 0};
  // {11111111 00111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -4, -1, -1, -1, 15};
  // {00010100 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {40, 0, 0, 0, 0, 0, 0, 1, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_106 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_106_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_106_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* yr_built */] <1900.5f ? 
        7633.1816f : 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <790.5f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4676.5f ? 
                     (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
                        48.321247f : 
                        10476.318f) : 
                    -11994.14f) : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2145.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1697.5f ? 
                        -17825.621f : 
                        -6110.518f) : 
                    57661.348f)) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1924.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(74, 1, data[13]) || (GenModel.bitSetIsInRange(74, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 74, 1, data[13])) ? 
                        -7383.9053f : 
                        3174.8147f) : 
                     (!Double.isNaN(data[6 /* view */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                        -31834.725f : 
                        -4764.0024f)) : 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3956.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(73, 0, data[13]) || (GenModel.bitSetIsInRange(73, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 73, 0, data[13])) ? 
                        -1765.4667f : 
                        2655.3328f) : 
                    15286.83f))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 13, static init size = 336B
  // {00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 1, 0, 0, 0, 0, 0, 4};
  // {00000000 00000000 00000000 00100000 00000000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 4, 0, 8};
  // {10111111 11011111 11101111 01111111 11111111 01101111 11111111 11111110 11110101 10011}
  public static final byte[] GRPSPLIT2 = new byte[] {-3, -5, -9, -2, -1, -10, -1, 127, -81, 25};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000001 00100000 00000000 00000000 00000100 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, -128, 4, 0, 0, 32, 0};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {28, 0, 0, 0};
  // {10100001 00011000 00000101 00010000 01110000 00001101 11010000 10000000 00010100 0}
  public static final byte[] GRPSPLIT5 = new byte[] {-123, 24, -96, 8, 14, -80, 11, 1, 40, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_107 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_107_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_107_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[4 /* floors */] <1.2502441f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3074.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2102.5f ? 
                        -1338.7842f : 
                        -8753.042f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1996.5f ? 
                        338.52084f : 
                        5306.5215f)) : 
                13128.356f) : 
             (data[8 /* sqft_above */] <1176.5f ? 
                -27500.29f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <7551.5f ? 
                    -8893.294f : 
                    129444.87f))) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1616.5f ? 
                -31029.074f : 
                 (data[2 /* sqft_living */] <1864.5f ? 
                    7342.2554f : 
                     (data[8 /* sqft_above */] <2204.5f ? 
                        -25637.102f : 
                        -3323.9714f))) : 
             (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[12])) ? 
                -13778.069f : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1355.5f ? 
                        -152.43109f : 
                        -8102.4155f) : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                        1619.7123f : 
                        21478.732f)))));
    return pred;
  } // constant pool size = 122B, number of visited nodes = 16, static init size = 336B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11001010 11101110 01111110 00101110 11111111 00001111 11110110 11010111 11011111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {83, 119, 126, 116, -1, -16, 111, -21, -5, 31};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 27};
  // {11110111 01111111 11110111 11011111 11111111 1111}
  public static final byte[] GRPSPLIT3 = new byte[] {-17, -2, -17, -5, -1, 15};
  // {00010101 00100000 00000000 10000000 00000000 00000000 00000000 00001000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {-88, 4, 0, 1, 0, 0, 0, 16, 0, 0};
  // {00110000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {12, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_108 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_108_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_108_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
                -8328.057f : 
                 (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -24670.002f : 
                        -78.101295f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                        -159.22993f : 
                        45272.863f))) : 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1953.0f ? 
                     (data[3 /* sqft_lot */] <1649.5f ? 
                        -10241.388f : 
                        2542.4011f) : 
                    -15025.463f) : 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2116.5f ? 
                    -6417.3467f : 
                    69192.61f))) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1999.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <16986.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(70, 5, data[13]) || (GenModel.bitSetIsInRange(70, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 70, 5, data[13])) ? 
                        -4482.1587f : 
                        5525.5645f) : 
                    -16481.941f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(70, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 70, 5, data[13])) ? 
                    -20209.656f : 
                    -8034.8735f)) : 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4763.5f ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(43, 1, data[12]) || (GenModel.bitSetIsInRange(43, 1, data[12]) && !GenModel.bitSetContains(GRPSPLIT7, 43, 1, data[12])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(74, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT8, 74, 0, data[13])) ? 
                        -22042.959f : 
                        1152.4109f) : 
                    13800.681f) : 
                18379.697f)));
    return pred;
  } // constant pool size = 157B, number of visited nodes = 18, static init size = 498B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 32, 0, 0, 4};
  // {11111111 01111111 11111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -2, -65, -1, -1, 15};
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {25, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {11111011 11110111 11001010 11111111 11011111 10001111 00101001 00001111 00110110 11011}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -17, 83, -1, -5, -15, -108, -16, 108, 27};
  // {...5 0-bits... 10000000 00000000 00000000 00000000 00000110 00000000 00000110 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0, 96, 0, 96, 0, 0};
  // {...5 0-bits... 11111111 11111111 11111111 11111011 11111011 11101111 01111011 11111111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -33, -33, -9, -34, -1, 31};
  // {...1 0-bits... 00000101 00000000 01000100 10000000 00000000 00}
  public static final byte[] GRPSPLIT7 = new byte[] {-96, 0, 34, 1, 0, 4};
  // {11101111 11111111 10111111 11011111 11111111 11111111 11111111 11111111 11111111 11}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, -1, -3, -5, -1, -1, -1, -1, -1, 3};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_109 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_109_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_109_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[4 /* floors */] <1.2502441f ? 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3074.5f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -6194.4023f : 
                        -786.3658f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2145.5f ? 
                        822.06744f : 
                        7822.25f)) : 
                11787.858f) : 
             (data[8 /* sqft_above */] <1176.5f ? 
                -24280.076f : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <645.5f ? 
                    103037.9f : 
                    -26633.068f))) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1616.5f ? 
                -26737.693f : 
                 (data[2 /* sqft_living */] <1864.5f ? 
                    7927.6733f : 
                     (data[8 /* sqft_above */] <1978.5f ? 
                        -28570.467f : 
                        -4938.297f))) : 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1789.5f ? 
                 (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[12])) ? 
                    -11405.812f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[13]) || (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 76, 0, data[13])) ? 
                        -972.32776f : 
                        989.2308f)) : 
                12819.841f)));
    return pred;
  } // constant pool size = 124B, number of visited nodes = 15, static init size = 372B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00001010 10000010 00101110 00000010 11111000 00001001 11010110 10010111 01010000 00001}
  public static final byte[] GRPSPLIT1 = new byte[] {80, 65, 116, 64, 31, -112, 107, -23, 10, 16};
  // {11101111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -1, -1, -2, -1, -1, -1, -1, -1, 31};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 27};
  // {11110111 01111011 11110111 11011111 11111111 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, -34, -17, -5, -1, 15};
  // {10110101 01110001 10000000 11100001 00000010 11010010 00100101 01101000 10100100 0100}
  public static final byte[] GRPSPLIT5 = new byte[] {-83, -114, 1, -121, 64, 75, -92, 22, 37, 2};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_110 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_110_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_110_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1182.5f ? 
         (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1176.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                -52154.188f : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1168.5f ? 
                        -185.77258f : 
                        -6453.228f) : 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1113.5f ? 
                        1119.6898f : 
                        11153.525f))) : 
            81157.75f) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9025.5f ? 
                 (data[8 /* sqft_above */] <1600.5f ? 
                    -19567.662f : 
                    573.6751f) : 
                -47690.72f) : 
             (data[2 /* sqft_living */] <1217.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                    -13086.805f : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        -2414.1394f : 
                        3206.9678f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[7])) ? 
                        -6331.292f : 
                        135.12358f) : 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3730469f ? 
                        -12909.081f : 
                        28358.807f)))));
    return pred;
  } // constant pool size = 133B, number of visited nodes = 15, static init size = 426B
  // {11111111 11111111 11101111 11111111 11111111 11011111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -5, -1, -1, -1, 27};
  // {01000100 10000000 10001000 00110000 00000100 00000000 00100011 00001000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, 1, 17, 12, 32, 0, -60, 16, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {11111011 11111110 11111111 11111111 11011111 11111010 11011101 00111101 11111110 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, 127, -1, -1, -5, 95, -69, -68, 127, 31};
  // {00000000 00000000 00000010 00101000 00000000 01000000 01000000 00000100 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 64, 20, 0, 2, 2, 32, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00111000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {28, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_111 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_111_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_111_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[10 /* yr_built */] <1938.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2334.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 76, 0, data[13])) ? 
                        -3790.616f : 
                        707.44775f) : 
                    -8202.571f) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1205.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <2428.5f ? 
                        1720.733f : 
                        11507.672f) : 
                    -8552.679f)) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <968.0f ? 
                     (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.8925781f ? 
                        -11690.033f : 
                        -717.4797f) : 
                     (data[3 /* sqft_lot */] <5915.5f ? 
                        -5699.9927f : 
                        6967.7427f)) : 
                 (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[6])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1506.5f ? 
                        -342.37924f : 
                        4192.2344f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2863.0f ? 
                        358.8474f : 
                        12880.376f)))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            75129.164f : 
             (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <636.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <425.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <186.5f ? 
                        -13396.402f : 
                        8009.317f) : 
                    -40767.156f) : 
                 (data[2 /* sqft_living */] <2201.5f ? 
                    62236.375f : 
                     (Double.isNaN(data[6 /* view */]) || !GenModel.bitSetIsInRange(32, 0, data[6]) || (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                        -25668.262f : 
                        -3345.0977f)))));
    return pred;
  } // constant pool size = 136B, number of visited nodes = 20, static init size = 324B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00101011 10011100 11111100 11111011 11101101 11111111 11101101 11101100 11010101 11101}
  public static final byte[] GRPSPLIT1 = new byte[] {-44, 57, 63, -33, -73, -1, -73, 55, -85, 23};
  // {00000000 00000000 00000001 00000100 00010010 00000000 00010010 00010010 00000000 0001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, -128, 32, 72, 0, 72, 72, 0, 8};
  // {11111111 11111111 11111111 01111111 11101111 11111111 01110010 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -2, -9, -1, 78, -1, -1, 31};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_112 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_112_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_112_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (data[2 /* sqft_living */] <1219.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1172.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                        -2590.5615f : 
                        -125.5672f) : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1980.5f ? 
                        2948.4666f : 
                        -3658.073f)) : 
                 (data[2 /* sqft_living */] <1185.0f ? 
                    -29204.303f : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(72, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 72, 2, data[13])) ? 
                        -12543.851f : 
                        -348.36526f))) : 
             (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[12])) ? 
                     (Double.isNaN(data[0]) || data[0 /* bedrooms */] <4.5f ? 
                        106.159615f : 
                        -1859.8752f) : 
                    11378.117f) : 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2736.5f ? 
                        -1890.0054f : 
                        -18043.127f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        2622.3125f : 
                        7275.831f)))) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            67616.25f : 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <2142.0f ? 
                 (data[8 /* sqft_above */] <1144.5f ? 
                    12657.707f : 
                     (data[8 /* sqft_above */] <1304.5f ? 
                        -48384.91f : 
                        -12651.446f)) : 
                 (data[2 /* sqft_living */] <2483.5f ? 
                    58819.957f : 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <1980.5f ? 
                        -21151.098f : 
                        -704.68634f)))));
    return pred;
  } // constant pool size = 159B, number of visited nodes = 20, static init size = 462B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {01000100 10001001 10001001 00110000 00000100 10000010 00100011 00011000 10000001 00010}
  public static final byte[] GRPSPLIT1 = new byte[] {34, -111, -111, 12, 32, 65, -60, 24, -127, 8};
  // {11111111 11101111 11111111 11111110 10010111 11111011 11101111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -9, -1, 127, -23, -33, -9, -1, -1, 31};
  // {...2 0-bits... 11111111 11111011 11111111 11111111 01111111 11101011 01110100 11110111 111110}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -33, -1, -1, -2, -41, 46, -17, -33};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 0, 0, 0};
  // {00000000 10000000 00000000 00000000 00000000 0001}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 1, 0, 0, 0, 8};
  // {00100110 11111111 10110110 11001011 11111111 01110111 11111101 01111110 11000100 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {100, -1, 109, -45, -1, -18, -65, 126, 35, 31};
  // {00000100 00000100 00000000 01000000 00000010 00010010 00111001 00100010 01000000 01000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 32, 0, 2, 64, 72, -100, 68, 2, 2};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_113 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_113_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_113_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1116.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
            -38303.676f : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (Double.isNaN(data[2]) || data[2 /* sqft_living */] <1014.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(75, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 75, 1, data[13])) ? 
                        -2356.057f : 
                        -77.59882f) : 
                     (data[10 /* yr_built */] <1935.5f ? 
                        6758.57f : 
                        -88.41553f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                    2967.2727f : 
                    6044.798f))) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1221.5f ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[13])) ? 
                    -23921.207f : 
                     (Double.isNaN(data[0]) || data[0 /* bedrooms */] <3.5f ? 
                        -3450.4272f : 
                        10642.264f)) : 
                 (Double.isNaN(data[0]) || data[0 /* bedrooms */] <3.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        408.34943f : 
                        16703.984f) : 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        -12324.549f : 
                        -250.22896f))) : 
             (data[2 /* sqft_living */] <1570.5f ? 
                95631.61f : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8230.5f ? 
                     (data[8 /* sqft_above */] <1708.5f ? 
                        6566.483f : 
                        -9564.138f) : 
                    -33169.51f))));
    return pred;
  } // constant pool size = 158B, number of visited nodes = 17, static init size = 528B
  // {11111111 11101111 11101111 11011111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -9, -9, -5, -1, -1, -1, -1, -1, 27};
  // {10000101 10000000 00101101 00000000 00010000 10000000 00000000 00000001 00000000 10000}
  public static final byte[] GRPSPLIT1 = new byte[] {-95, 1, -76, 0, 8, 1, 0, -128, 0, 1};
  // {...1 0-bits... 11111111 11111111 11111111 11111101 00101111 01111101 01011001 01011111 11101111 11}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -65, -12, -66, -102, -6, -9, 7};
  // {10000100 10000000 00000001 00000000 00010000 00000000 00000000 00000000 00000000 10000}
  public static final byte[] GRPSPLIT3 = new byte[] {33, 1, -128, 0, 8, 0, 0, 0, 0, 1};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11011111 11111111 01111111 11111111 11111011 10111111 11111111 11111111 11011101 11011}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -1, -2, -1, -33, -3, -1, -1, -69, 27};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {11111111 01111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -2, -1, -1, -1, -65, -1, -1, -1, 27};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_114 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_114_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_114_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* yr_built */] <1900.5f ? 
        6630.2827f : 
         (data[4 /* floors */] <1.2514648f ? 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3059.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                        -1519.0347f : 
                        537.9707f) : 
                    10508.924f) : 
                 (data[8 /* sqft_above */] <1147.5f ? 
                    -24991.084f : 
                     (data[3 /* sqft_lot */] <7282.5f ? 
                        -20537.293f : 
                        99614.73f))) : 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (data[8 /* sqft_above */] <1565.5f ? 
                    -22690.355f : 
                     (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1982.5f ? 
                        -442.21857f : 
                        -15078.136f)) : 
                 (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[12])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1431.5f ? 
                        -245.6953f : 
                        -9242.167f) : 
                     (data[10 /* yr_built */] <1975.5f ? 
                        21675.82f : 
                        416.0773f)))));
    return pred;
  } // constant pool size = 94B, number of visited nodes = 13, static init size = 240B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {11001010 11011110 01111110 00101110 11111101 00111111 11011110 11000111 01011101 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {83, 123, 126, 116, -65, -4, 123, -29, -70, 31};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 27};
  // {00010001 00000000 00000010 00000000 00000000 0001}
  public static final byte[] GRPSPLIT3 = new byte[] {-120, 0, 64, 0, 0, 8};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_115 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_115_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_115_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* yr_built */] <1991.5f ? 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
             (data[2 /* sqft_living */] <1427.5f ? 
                -59485.375f : 
                 (Double.isNaN(data[4]) || data[4 /* floors */] <1.7460938f ? 
                    -20264.32f : 
                    15518.413f)) : 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4599.0f ? 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1958.5f ? 
                        -79.510796f : 
                        -12537.629f) : 
                     (data[9 /* sqft_basement */] <677.5f ? 
                        37030.234f : 
                        -15200.339f)) : 
                14609.625f)) : 
         (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <225.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(70, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 70, 5, data[13])) ? 
                        -17564.414f : 
                        -5011.69f) : 
                     (data[9 /* sqft_basement */] <387.5f ? 
                        -5937.024f : 
                        4294.4395f)) : 
                 (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[7])) ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[13])) ? 
                        -18985.164f : 
                        -2815.366f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[13])) ? 
                        -9.8481245f : 
                        3237.7578f))) : 
            64995.625f));
    return pred;
  } // constant pool size = 147B, number of visited nodes = 16, static init size = 486B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0};
  // {11111011 11110111 11111111 11111111 11111111 11111111 01110111 11111011 00111110 10011}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, -17, -1, -1, -1, -1, -18, -33, 124, 25};
  // {...5 0-bits... 00000001 00000000 00000000 00000000 00000000 00000000 00000000 10011000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 0, 0, 0, 0, 0, 25, 16};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 0, 0};
  // {11111111 11111111 11111110 11111111 11011111 11111111 11111110 11001111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, 127, -1, -5, -1, 127, -13, -1, 31};
  // {00011010 11000011 00000100 01000001 00000000 00000010 00100000 00111000 00101100 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {88, -61, 32, -126, 0, 64, 4, 28, 52, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_116 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_116_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_116_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* sqft_living */] <1182.5f ? 
         (Double.isNaN(data[8]) || data[8 /* sqft_above */] <1176.5f ? 
             (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
                -33202.44f : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                     (data[2 /* sqft_living */] <737.5f ? 
                        -2286.037f : 
                        369.7637f) : 
                    7833.363f)) : 
            73833.66f) : 
         (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <9025.5f ? 
                 (data[10 /* yr_built */] <1985.5f ? 
                    -64.14487f : 
                    -18978.97f) : 
                -43474.62f) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <2009.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* floors */] <2.25f ? 
                        6.2220607f : 
                        -2652.37f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                        773.0339f : 
                        20036.549f)) : 
                 (Double.isNaN(data[1]) || data[1 /* bathrooms */] <2.3730469f ? 
                     (!Double.isNaN(data[7 /* condition */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[7])) ? 
                        -20543.19f : 
                        -5125.9873f) : 
                    27411.525f))));
    return pred;
  } // constant pool size = 118B, number of visited nodes = 14, static init size = 360B
  // {11111111 11111111 11101111 11111111 11111111 11111111 11101111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -9, -1, -1, -1, -9, -1, -1, 27};
  // {00000100 10000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 1, 0, 4, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 01000000 00000000 01000000 00000000 00100000 00000100 00000000 00010010 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 2, 0, 2, 0, 4, 32, 0, 72, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {24, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_117 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_117_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_117_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <1506.5f ? 
             (Double.isNaN(data[2]) || data[2 /* sqft_living */] <5092.0f ? 
                 (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
                    -8997.915f : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <51003.5f ? 
                        -194.36375f : 
                        2565.2473f)) : 
                -9233.443f) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <17455.5f ? 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(66, 5, data[13]) || (GenModel.bitSetIsInRange(66, 5, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 66, 5, data[13])) ? 
                        -2646.7102f : 
                        14112.118f) : 
                    -6307.4424f) : 
                22098.258f)) : 
         (data[2 /* sqft_living */] <1201.0f ? 
             (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                 (data[2 /* sqft_living */] <1030.0f ? 
                    -3069.5278f : 
                    -11853.548f) : 
                88846.62f) : 
             (!Double.isNaN(data[12 /* city */]) && (GenModel.bitSetIsInRange(18, 18, data[12]) && !GenModel.bitSetContains(GRPSPLIT5, 18, 18, data[12])) ? 
                 (Double.isNaN(data[10]) || data[10 /* yr_built */] <1992.0f ? 
                     (Double.isNaN(data[4]) || data[4 /* floors */] <1.7421875f ? 
                        -17136.39f : 
                        15541.98f) : 
                    -45008.61f) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <6915.5f ? 
                     (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(22, 53, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 22, 53, data[13])) ? 
                        -9525.448f : 
                        -392.91144f) : 
                    35966.06f))));
    return pred;
  } // constant pool size = 118B, number of visited nodes = 16, static init size = 312B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000100 00000000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 32, 0, 1, 4};
  // {11111111 01111111 11111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -2, -65, -1, -1, 15};
  // {00110000 00000000 00000000 00000000 00000000 00000110 00000010 10000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {12, 0, 0, 0, 0, 96, 64, 1, 0, 0};
  // {...5 0-bits... 10000000 00000000 00000000 00000000 00000101 00000000 00000001 00001}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0, -96, 0, -128, 16, 2};
  // {01010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {10, 0, 0, 0};
  // {...18 0-bits... }
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 2};
  // {...53 0-bits... }
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, 31};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_118 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_118_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_118_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[12 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[12]) || (GenModel.bitSetIsInRange(44, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[12])) ? 
             (Double.isNaN(data[10]) || data[10 /* yr_built */] <2002.5f ? 
                 (Double.isNaN(data[5 /* waterfront */]) || !GenModel.bitSetIsInRange(32, 0, data[5]) || (GenModel.bitSetIsInRange(32, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[5])) ? 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <4903.5f ? 
                        -296.5944f : 
                        -12103.1045f) : 
                     (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[13])) ? 
                        -6044.6885f : 
                        23600.027f)) : 
                 (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[13])) ? 
                     (!Double.isNaN(data[6 /* view */]) && (GenModel.bitSetIsInRange(32, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[6])) ? 
                        -13720.345f : 
                        454.79572f) : 
                     (Double.isNaN(data[2]) || data[2 /* sqft_living */] <3392.5f ? 
                        4936.323f : 
                        15191.836f))) : 
             (Double.isNaN(data[7 /* condition */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[7])) ? 
                1617.8197f : 
                9459.65f)) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            64284.95f : 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1998.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8458.5f ? 
                     (data[8 /* sqft_above */] <1137.5f ? 
                        13692.957f : 
                        -9085.787f) : 
                    -45880.438f) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <627.0f ? 
                    -14948.445f : 
                    53139.793f))));
    return pred;
  } // constant pool size = 117B, number of visited nodes = 15, static init size = 330B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00100000 00000000 00001000 00000000 00000000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 16, 0, 0, 8};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11111111 11111110 11111111 11111111 11111111 01011111 11111111 11111111 10110111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 127, -1, -1, -1, -6, -1, -1, -19, 31};
  // {00100100 00000000 00000100 00000000 00000000 10100000 00000010 00100000 00011010 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {36, 0, 32, 0, 0, 5, 64, 4, 88, 0};
  // {11100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {7, 0, 0, 0};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 0, 0};
}


class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Forest_119 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_119_class_0.score0(fdata);
  }
}
class gbm_b7a697d9_ee22_4c57_9f71_3f6d4825eab9_Tree_119_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[13])) ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <48865.5f ? 
             (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4643.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* sqft_above */] <4410.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* yr_built */] <2009.5f ? 
                        -304.27704f : 
                        2308.6992f) : 
                    -9475.831f) : 
                8056.205f) : 
             (Double.isNaN(data[13 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[13]) || (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[13])) ? 
                 (!Double.isNaN(data[13 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[13])) ? 
                     (Double.isNaN(data[8]) || data[8 /* sqft_above */] <3239.5f ? 
                        -38.015858f : 
                        -7251.929f) : 
                     (data[2 /* sqft_living */] <2183.5f ? 
                        -1322.5981f : 
                        5013.345f)) : 
                13146.057f)) : 
         (data[2 /* sqft_living */] <1276.5f ? 
            57856.453f : 
             (Double.isNaN(data[11]) || data[11 /* yr_renovated */] <1998.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_lot */] <8458.5f ? 
                     (data[8 /* sqft_above */] <1137.5f ? 
                        12323.661f : 
                        -8177.2085f) : 
                    -41292.395f) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_basement */] <627.0f ? 
                    -13453.602f : 
                    47825.812f))));
    return pred;
  } // constant pool size = 91B, number of visited nodes = 14, static init size = 198B
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 4};
  // {00001010 00000010 00000101 01000001 00000000 00100000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {80, 64, -96, -126, 0, 4, 0, 0, 0, 0};
  // {11111111 01110110 11110111 11101111 11111111 11110011 11111111 11111111 10111101 10101}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 110, -17, -9, -1, -49, -1, -1, -67, 21};
}


