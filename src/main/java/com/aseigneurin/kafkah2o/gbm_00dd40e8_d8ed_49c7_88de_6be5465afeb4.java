package com.aseigneurin.kafkah2o;

/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2019-02-07T16:35:44.466-05:00
  3.20.0.6
  
  Standalone prediction code with sample test data for GBMModel named gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://10.103.106.201:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://10.103.106.201:54321/3/Models.java/gbm-00dd40e8-d8ed-49c7-88de-6be5465afeb4 > gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4", algorithm="gbm")
public class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 15; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* date */ null,
    /* bedrooms */ null,
    /* bathrooms */ null,
    /* sqft_living */ null,
    /* sqft_lot */ null,
    /* floors */ null,
    /* waterfront */ null,
    /* view */ null,
    /* condition */ null,
    /* sqft_above */ null,
    /* sqft_basement */ null,
    /* yr_built */ null,
    /* yr_renovated */ null,
    /* city */ gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_ColInfo_13.VALUES,
    /* statezip */ gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_ColInfo_14.VALUES,
    /* price */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.0};

  public gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4() { super(NAMES,DOMAINS,"price"); }
  public String getUUID() { return Long.toString(-1371367630372621728L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_0.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_1.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_2.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_3.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_4.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_5.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_6.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_7.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_8.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_9.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_10.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_11.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_12.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_13.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_14.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_15.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_16.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_17.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_18.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_19.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_20.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_21.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_22.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_23.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_24.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_25.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_26.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_27.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_28.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_29.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_30.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_31.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_32.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_33.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_34.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_35.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_36.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_37.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_38.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_39.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_40.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_41.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_42.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_43.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_44.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_45.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_46.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_47.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_48.score0(data,preds);
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_49.score0(data,preds);
    preds[0] += 545644.5618605504;
    preds[0] = preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4 implements java.io.Serializable {
  public static final String[] VALUES = new String[15];
  static {
    NamesHolder_gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "date";
      sa[1] = "bedrooms";
      sa[2] = "bathrooms";
      sa[3] = "sqft_living";
      sa[4] = "sqft_lot";
      sa[5] = "floors";
      sa[6] = "waterfront";
      sa[7] = "view";
      sa[8] = "condition";
      sa[9] = "sqft_above";
      sa[10] = "sqft_basement";
      sa[11] = "yr_built";
      sa[12] = "yr_renovated";
      sa[13] = "city";
      sa[14] = "statezip";
    }
  }
}
// The class representing column city
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[44];
  static {
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_ColInfo_13_0.fill(VALUES);
  }
  static final class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Algona";
      sa[1] = "Auburn";
      sa[2] = "Beaux Arts Village";
      sa[3] = "Bellevue";
      sa[4] = "Black Diamond";
      sa[5] = "Bothell";
      sa[6] = "Burien";
      sa[7] = "Carnation";
      sa[8] = "Clyde Hill";
      sa[9] = "Covington";
      sa[10] = "Des Moines";
      sa[11] = "Duvall";
      sa[12] = "Enumclaw";
      sa[13] = "Fall City";
      sa[14] = "Federal Way";
      sa[15] = "Inglewood-Finn Hill";
      sa[16] = "Issaquah";
      sa[17] = "Kenmore";
      sa[18] = "Kent";
      sa[19] = "Kirkland";
      sa[20] = "Lake Forest Park";
      sa[21] = "Maple Valley";
      sa[22] = "Medina";
      sa[23] = "Mercer Island";
      sa[24] = "Milton";
      sa[25] = "Newcastle";
      sa[26] = "Normandy Park";
      sa[27] = "North Bend";
      sa[28] = "Pacific";
      sa[29] = "Preston";
      sa[30] = "Ravensdale";
      sa[31] = "Redmond";
      sa[32] = "Renton";
      sa[33] = "Sammamish";
      sa[34] = "SeaTac";
      sa[35] = "Seattle";
      sa[36] = "Shoreline";
      sa[37] = "Skykomish";
      sa[38] = "Snoqualmie";
      sa[39] = "Snoqualmie Pass";
      sa[40] = "Tukwila";
      sa[41] = "Vashon";
      sa[42] = "Woodinville";
      sa[43] = "Yarrow Point";
    }
  }
}
// The class representing column statezip
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_ColInfo_14 implements java.io.Serializable {
  public static final String[] VALUES = new String[77];
  static {
    gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_ColInfo_14_0.fill(VALUES);
  }
  static final class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_ColInfo_14_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "WA 98001";
      sa[1] = "WA 98002";
      sa[2] = "WA 98003";
      sa[3] = "WA 98004";
      sa[4] = "WA 98005";
      sa[5] = "WA 98006";
      sa[6] = "WA 98007";
      sa[7] = "WA 98008";
      sa[8] = "WA 98010";
      sa[9] = "WA 98011";
      sa[10] = "WA 98014";
      sa[11] = "WA 98019";
      sa[12] = "WA 98022";
      sa[13] = "WA 98023";
      sa[14] = "WA 98024";
      sa[15] = "WA 98027";
      sa[16] = "WA 98028";
      sa[17] = "WA 98029";
      sa[18] = "WA 98030";
      sa[19] = "WA 98031";
      sa[20] = "WA 98032";
      sa[21] = "WA 98033";
      sa[22] = "WA 98034";
      sa[23] = "WA 98038";
      sa[24] = "WA 98039";
      sa[25] = "WA 98040";
      sa[26] = "WA 98042";
      sa[27] = "WA 98045";
      sa[28] = "WA 98047";
      sa[29] = "WA 98050";
      sa[30] = "WA 98051";
      sa[31] = "WA 98052";
      sa[32] = "WA 98053";
      sa[33] = "WA 98055";
      sa[34] = "WA 98056";
      sa[35] = "WA 98057";
      sa[36] = "WA 98058";
      sa[37] = "WA 98059";
      sa[38] = "WA 98065";
      sa[39] = "WA 98068";
      sa[40] = "WA 98070";
      sa[41] = "WA 98072";
      sa[42] = "WA 98074";
      sa[43] = "WA 98075";
      sa[44] = "WA 98077";
      sa[45] = "WA 98092";
      sa[46] = "WA 98102";
      sa[47] = "WA 98103";
      sa[48] = "WA 98105";
      sa[49] = "WA 98106";
      sa[50] = "WA 98107";
      sa[51] = "WA 98108";
      sa[52] = "WA 98109";
      sa[53] = "WA 98112";
      sa[54] = "WA 98115";
      sa[55] = "WA 98116";
      sa[56] = "WA 98117";
      sa[57] = "WA 98118";
      sa[58] = "WA 98119";
      sa[59] = "WA 98122";
      sa[60] = "WA 98125";
      sa[61] = "WA 98126";
      sa[62] = "WA 98133";
      sa[63] = "WA 98136";
      sa[64] = "WA 98144";
      sa[65] = "WA 98146";
      sa[66] = "WA 98148";
      sa[67] = "WA 98155";
      sa[68] = "WA 98166";
      sa[69] = "WA 98168";
      sa[70] = "WA 98177";
      sa[71] = "WA 98178";
      sa[72] = "WA 98188";
      sa[73] = "WA 98198";
      sa[74] = "WA 98199";
      sa[75] = "WA 98288";
      sa[76] = "WA 98354";
    }
  }
}

class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_0_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2911.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2259.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (data[3 /* sqft_living */] <1525.5f ? 
                        -32596.688f : 
                        -25531.686f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1525.5f ? 
                        -23303.676f : 
                        -13174.099f)) : 
                 (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(42, 0, data[13]) || (GenModel.bitSetIsInRange(42, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 42, 0, data[13])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -20271.172f : 
                        -10283.849f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                        -268.44672f : 
                        22070.543f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2150.5f ? 
                 (data[3 /* sqft_living */] <1538.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        -11458.73f : 
                        4179.678f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                        -574.86707f : 
                        17586.58f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 72, 3, data[14])) ? 
                        3461.7002f : 
                        18865.6f) : 
                     (Double.isNaN(data[0]) || data[0 /* date */] <1.40318055E12f ? 
                        40933.695f : 
                        179647.55f)))) : 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[14])) ? 
                 (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 44, 0, data[13])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3908.5f ? 
                        -4665.1562f : 
                        17547.896f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3907.5f ? 
                        16195.076f : 
                        44243.88f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4240.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                        30167.31f : 
                        66731.68f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(71, 4, data[14]) || (GenModel.bitSetIsInRange(71, 4, data[14]) && !GenModel.bitSetContains(GRPSPLIT11, 71, 4, data[14])) ? 
                        62067.418f : 
                        115302.6f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5278.5f ? 
                 (data[3 /* sqft_living */] <3528.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(68, 3, data[14]) || (GenModel.bitSetIsInRange(68, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT12, 68, 3, data[14])) ? 
                        50134.13f : 
                        88631.8f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(68, 3, data[14]) || (GenModel.bitSetIsInRange(68, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT13, 68, 3, data[14])) ? 
                        93205.84f : 
                        146604.66f)) : 
                267454.78f)));
    return pred;
  } // constant pool size = 253B, number of visited nodes = 28, static init size = 834B
  // {00011111 01000001 01000100 01000011 10000000 01111011 10101111 10110001 10000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, -126, 34, -62, 1, -34, -11, -115, 65, 4};
  // {00000000 10010010 10000010 00010100 00100110 10000000 00010000 01001110 00011000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 73, 65, 40, 100, 1, 8, 114, 24, 0};
  // {00000011 00000000 01010000 01100000 00010010 01}
  public static final byte[] GRPSPLIT2 = new byte[] {-64, 0, 10, 6, 72, 2};
  // {00000000 00011000 00000001 00010000 01101100 00000000 00000000 00000000 00010000 01010}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 24, -128, 8, 54, 0, 0, 0, 8, 10};
  // {...3 0-bits... 11000000 00000000 00100000 00000000 00000000 00000100 01100001 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 4, 0, 0, 32, -122, 0, 0};
  // {...3 0-bits... 11000000 00000000 00000010 00000000 00000000 10010100 01100001 10000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 64, 0, 0, 41, -122, 1, -128};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0, 0, 0, 4, 0, -128};
  // {...3 0-bits... 11110101 11110111 11111111 11101111 11111100 00111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-81, -17, -1, -9, 63, -4, -1, -1, -1};
  // {00010000 00000000 00000000 11000000 00000000 00000000 10101101 00100000 10000010 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, 3, 0, 0, -75, 4, 65, 0};
  // {00001111 00100010 01000110 00000001 10000000 01011011 00000010 11011101 00000000 00100}
  public static final byte[] GRPSPLIT9 = new byte[] {-16, 68, 98, -128, 1, -38, 64, -69, 0, 4};
  // {00001000 00111000 11000000 01000101 01000010 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {16, 28, 3, -94, 66, 0};
  // {...4 0-bits... 00010010 00100100 01000000 00000000 00000001 00010000 00000000 00000000 000}
  public static final byte[] GRPSPLIT11 = new byte[] {72, 36, 2, 0, -128, 8, 0, 0, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 00100001 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0, 0, 0, -124, 0, 0};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00000001 00100001 00000000 0}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 32, 0, 0, -128, -124, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_1_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2937.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2258.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1701.5f ? 
                        -28374.514f : 
                        -21665.09f) : 
                     (data[3 /* sqft_living */] <1407.5f ? 
                        -21681.84f : 
                        -12450.55f)) : 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <1.5f ? 
                        -17765.238f : 
                        -3110.621f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -5068.7627f : 
                        5936.284f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2188.5f ? 
                 (data[3 /* sqft_living */] <1548.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        -10084.828f : 
                        3599.3088f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                        -166.40938f : 
                        16669.105f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 72, 3, data[14])) ? 
                        10620.375f : 
                        29160.896f) : 
                     (Double.isNaN(data[0]) || data[0 /* date */] <1.40318055E12f ? 
                        36826.63f : 
                        161682.78f)))) : 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[14])) ? 
                 (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT10, 44, 0, data[13])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3766.5f ? 
                        -5971.27f : 
                        12454.749f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4097.5f ? 
                        12805.089f : 
                        33855.4f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4263.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                        27743.701f : 
                        60478.137f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(71, 4, data[14]) || (GenModel.bitSetIsInRange(71, 4, data[14]) && !GenModel.bitSetContains(GRPSPLIT11, 71, 4, data[14])) ? 
                        56960.043f : 
                        112896.07f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5298.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4304.0f ? 
                     (Double.isNaN(data[12]) || data[12 /* yr_renovated */] <1952.5f ? 
                        58587.03f : 
                        90372.39f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(62, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT12, 62, 3, data[14])) ? 
                        90027.09f : 
                        145392.69f)) : 
                243477.58f)));
    return pred;
  } // constant pool size = 246B, number of visited nodes = 28, static init size = 792B
  // {00011111 01000001 01000100 01000011 10000000 01111011 10101111 10110001 10000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, -126, 34, -62, 1, -34, -11, -115, 65, 4};
  // {00000000 00010010 10000010 00010100 00000110 10000000 00010000 01001110 00011000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 72, 65, 40, 96, 1, 8, 114, 24, 0};
  // {00000000 00111000 10000010 00010000 00100110 10000000 01010000 01001110 01011000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 28, 65, 8, 100, 1, 10, 114, 26, 0};
  // {00000000 00100000 00000010 00000000 00000000 00000000 00000000 01001100 01001000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 4, 64, 0, 0, 0, 0, 50, 18, 0};
  // {...3 0-bits... 11000000 00000000 00100000 00000000 00000000 00000100 01100001 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 4, 0, 0, 32, -122, 0, 0};
  // {...3 0-bits... 11000000 00000000 00000010 00000000 00000000 10010100 01100001 10000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {3, 0, 64, 0, 0, 41, -122, 1, -128};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0, 0, 0, 4, 0, -128};
  // {...3 0-bits... 00000000 00000000 00100010 00000000 00000000 00011100 01000001 00000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 68, 0, 0, 56, -126, 0, 0};
  // {00010000 00000000 00000000 11000000 00000000 00000000 10101101 00100000 10000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, 3, 0, 0, -75, 4, 1, 0};
  // {00001111 00110010 01000100 00000001 10000000 01011011 00000010 11011101 00000010 00100}
  public static final byte[] GRPSPLIT9 = new byte[] {-16, 76, 34, -128, 1, -38, 64, -69, 64, 4};
  // {00001010 00101000 11010000 01000101 01000010 0100}
  public static final byte[] GRPSPLIT10 = new byte[] {80, 20, 11, -94, 66, 2};
  // {...4 0-bits... 00010010 00100100 01000000 00000000 00000001 00010000 00000000 00000000 001}
  public static final byte[] GRPSPLIT11 = new byte[] {72, 36, 2, 0, -128, 8, 0, 0, 4};
  // {...3 0-bits... 11111111 11111111 11111101 11111111 11111111 11111111 11110111 111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -65, -1, -1, -1, -17, 63};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_2_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2911.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1932.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -26803.22f : 
                        -21720.467f) : 
                     (data[3 /* sqft_living */] <1399.5f ? 
                        -19320.213f : 
                        -12000.298f)) : 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2330.5f ? 
                        -20807.584f : 
                        -13604.289f) : 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(42, 0, data[13]) || (GenModel.bitSetIsInRange(42, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 42, 0, data[13])) ? 
                        -5558.686f : 
                        6038.6523f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2185.0f ? 
                 (data[3 /* sqft_living */] <1533.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                        -8106.302f : 
                        17436.81f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[14])) ? 
                        -998.0975f : 
                        12216.5205f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 72, 3, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 72, 3, data[14])) ? 
                        10689.2295f : 
                        28109.674f) : 
                     (data[1 /* bedrooms */] <3.5f ? 
                        157810.4f : 
                        20868.58f)))) : 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[14])) ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT10, 77, 0, data[14])) ? 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 44, 0, data[13])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4074.5f ? 
                        -3333.4644f : 
                        17032.664f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4406.5f ? 
                        15014.773f : 
                        36948.785f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4240.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        23937.244f : 
                        45127.945f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(70, 5, data[14]) || (GenModel.bitSetIsInRange(70, 5, data[14]) && !GenModel.bitSetContains(GRPSPLIT12, 70, 5, data[14])) ? 
                        53618.19f : 
                        94344.09f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5507.0f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4102.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(62, 3, data[14]) || (GenModel.bitSetIsInRange(62, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT13, 62, 3, data[14])) ? 
                        52650.027f : 
                        100971.92f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(62, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT14, 62, 3, data[14])) ? 
                        70259.72f : 
                        127321.65f)) : 
                234537.31f)));
    return pred;
  } // constant pool size = 262B, number of visited nodes = 28, static init size = 888B
  // {00011111 00000000 01000100 01000011 10000000 01111011 10101111 10110001 10000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, 0, 34, -62, 1, -34, -11, -115, 65, 4};
  // {00000000 11000011 10000010 00010100 00000110 10000000 00010000 01001110 00010000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -61, 65, 40, 96, 1, 8, 114, 8, 0};
  // {00000000 00110000 00010001 00000000 01101000 00000100 01000000 00000000 01101000 00001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 12, -120, 0, 22, 32, 2, 0, 22, 16};
  // {00011111 01110011 11000110 11010111 10110111 11111011 11111111 11111111 11011110 00111}
  public static final byte[] GRPSPLIT3 = new byte[] {-8, -50, 99, -21, -19, -33, -1, -1, 123, 28};
  // {00000001 00000000 00010000 01100000 00000000 10}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 8, 6, 0, 1};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0, 0, 0, 2, 0, 0};
  // {...3 0-bits... 11000000 00000000 00000010 00000000 00000000 10011101 01100001 10000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {3, 0, 64, 0, 0, -71, -122, 1, -128};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, -128};
  // {...3 0-bits... 00000000 00000000 00100010 00000000 00000000 00011100 01100001 00000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 68, 0, 0, 56, -122, 0, 0};
  // {00011000 00000000 00000000 11000000 00000000 00000000 10101101 00100000 10000000 00000}
  public static final byte[] GRPSPLIT9 = new byte[] {24, 0, 0, 3, 0, 0, -75, 4, 1, 0};
  // {00000111 00000010 01000100 00000000 10000000 00011011 00000010 11011101 00000010 00100}
  public static final byte[] GRPSPLIT10 = new byte[] {-32, 64, 34, 0, 1, -40, 64, -69, 64, 4};
  // {00000001 00110000 10010000 01000101 01000010 0010}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, 12, 9, -94, 66, 4};
  // {...5 0-bits... 00100000 01001000 10000000 00000000 00000010 00100000 00000000 00000000 0}
  public static final byte[] GRPSPLIT12 = new byte[] {4, 18, 1, 0, 64, 4, 0, 0, 2};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00000000 00000001 000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 32, 0, 0, 0, -128, 0};
  // {...3 0-bits... 10111111 11111111 11111101 11111111 11111111 11111111 11110111 111}
  public static final byte[] GRPSPLIT14 = new byte[] {-3, -1, -65, -1, -1, -1, -17, 63};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_3_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2937.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2098.5f ? 
                     (data[3 /* sqft_living */] <1373.5f ? 
                        -24796.047f : 
                        -19826.406f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -14467.433f : 
                        3174.7913f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1938.5f ? 
                     (data[3 /* sqft_living */] <1184.5f ? 
                        -19648.568f : 
                        -12368.754f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2450.5f ? 
                        -6167.366f : 
                        2106.7717f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2058.5f ? 
                 (data[3 /* sqft_living */] <1469.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 72, 3, data[14])) ? 
                        -12715.573f : 
                        -4663.6846f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        -700.1239f : 
                        11766.605f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[14])) ? 
                        8783.454f : 
                        26463.846f) : 
                    97034.984f))) : 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 77, 0, data[14])) ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 77, 0, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4097.5f ? 
                        -7088.2476f : 
                        15728.013f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3907.5f ? 
                        9588.836f : 
                        31617.107f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4263.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(71, 4, data[14]) || (GenModel.bitSetIsInRange(71, 4, data[14]) && !GenModel.bitSetContains(GRPSPLIT10, 71, 4, data[14])) ? 
                        18245.639f : 
                        36786.625f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(71, 4, data[14]) || (GenModel.bitSetIsInRange(71, 4, data[14]) && !GenModel.bitSetContains(GRPSPLIT11, 71, 4, data[14])) ? 
                        49663.535f : 
                        102745.2f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5526.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4314.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(62, 3, data[14]) || (GenModel.bitSetIsInRange(62, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT12, 62, 3, data[14])) ? 
                        44241.363f : 
                        70595.695f) : 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1294.5f ? 
                        117799.47f : 
                        67936.484f)) : 
                211083.58f)));
    return pred;
  } // constant pool size = 245B, number of visited nodes = 27, static init size = 810B
  // {00011111 00000001 01000100 01000001 10000000 00110011 10101111 10110000 10000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, -128, 34, -126, 1, -52, -11, 13, 65, 4};
  // {00000000 01110010 10000010 00010110 00100110 11001000 00000000 01001111 01011000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 78, 65, 104, 100, 19, 0, -14, 26, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000100 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 8, 0, 32, 0};
  // {...3 0-bits... 11100111 11110101 11111101 11110011 11111110 11111111 11111111 01111011 11101}
  public static final byte[] GRPSPLIT3 = new byte[] {-25, -81, -65, -49, 127, -1, -1, -34, -9};
  // {...3 0-bits... 10000000 00000000 00000010 00000000 00000000 00010000 01101001 10000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 64, 0, 0, 8, -106, 1, -128};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128};
  // {...3 0-bits... 10000000 00000000 00100010 00000000 00000000 00011100 01100001 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 68, 0, 0, 56, -122, 0, 0};
  // {00010000 00000000 00000000 11000000 00000000 00000000 10101101 00100000 10000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 3, 0, 0, -75, 4, 1, 0};
  // {00001111 00110010 01000110 00000001 10000000 01011011 00000010 11011101 00000010 00100}
  public static final byte[] GRPSPLIT8 = new byte[] {-16, 76, 98, -128, 1, -38, 64, -69, 64, 4};
  // {00100000 10001001 10000000 00010110 00100110 10100000 00000000 00000000 00001000 01000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, -111, 1, 104, 100, 5, 0, 0, 16, 2};
  // {...4 0-bits... 11100000 00000000 01000000 00000000 00000000 00100000 00101001 00000000 000}
  public static final byte[] GRPSPLIT10 = new byte[] {7, 0, 2, 0, 0, 4, -108, 0, 64};
  // {...4 0-bits... 00010010 00000000 01000000 00000000 00000001 00000000 00000000 00000000 001}
  public static final byte[] GRPSPLIT11 = new byte[] {72, 0, 2, 0, -128, 0, 0, 0, 4};
  // {...3 0-bits... 10000000 00000000 00000100 00000000 00000000 00000000 00100001 000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 32, 0, 0, 0, -124, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_4_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3374.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2333.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (data[3 /* sqft_living */] <1509.5f ? 
                        -21742.756f : 
                        -16445.348f) : 
                     (data[3 /* sqft_living */] <1448.5f ? 
                        -15825.712f : 
                        -8720.996f)) : 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <30675.5f ? 
                        -11657.02f : 
                        -1497.7495f) : 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(42, 0, data[13]) || (GenModel.bitSetIsInRange(42, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 42, 0, data[13])) ? 
                        -2414.4792f : 
                        7717.937f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2181.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1595.5f ? 
                        -7258.439f : 
                        729.76794f) : 
                     (data[9 /* sqft_above */] <1299.5f ? 
                        442.56464f : 
                        16854.287f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        10648.571f : 
                        28685.639f) : 
                     (Double.isNaN(data[0]) || data[0 /* date */] <1.4033668E12f ? 
                        27619.105f : 
                        121437.0f)))) : 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[14])) ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[14])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4328.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 72, 2, data[14])) ? 
                        -4292.993f : 
                        14239.765f) : 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(42, 1, data[13]) || (GenModel.bitSetIsInRange(42, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 42, 1, data[13])) ? 
                        15502.655f : 
                        50350.39f)) : 
                 (Double.isNaN(data[2]) || data[2 /* bathrooms */] <4.34375f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(71, 4, data[14]) || (GenModel.bitSetIsInRange(71, 4, data[14]) && !GenModel.bitSetContains(GRPSPLIT10, 71, 4, data[14])) ? 
                        26067.695f : 
                        41771.31f) : 
                    77375.71f)) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5519.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(62, 3, data[14]) || (GenModel.bitSetIsInRange(62, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT11, 62, 3, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4299.5f ? 
                        46001.69f : 
                        87318.914f) : 
                    110011.1f) : 
                178906.1f)));
    return pred;
  } // constant pool size = 224B, number of visited nodes = 26, static init size = 708B
  // {00011111 00000001 01000100 11000101 10000000 01111011 10101111 10110001 10000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, -128, 34, -93, 1, -34, -11, -115, 65, 4};
  // {00000000 01110010 10000010 00010010 00100110 10000000 00010000 01001110 00010000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 78, 65, 72, 100, 1, 8, 114, 8, 0};
  // {00011111 11111011 11000110 11001111 10100111 11111011 10101111 11111111 11111010 01101}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -33, 99, -13, -27, -33, -11, -1, 95, 22};
  // {00001001 00000100 00010000 01100000 00010000 00}
  public static final byte[] GRPSPLIT3 = new byte[] {-112, 32, 8, 6, 8, 0};
  // {...3 0-bits... 11000000 00000000 00000010 00000000 00000000 10000100 01100001 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 64, 0, 0, 33, -122, 0, -128};
  // {...3 0-bits... 10000000 00000000 00000100 00000000 00000000 00000000 00100000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 32, 0, 0, 0, 4, 0, -128};
  // {00010001 00000010 00000000 11000000 00000000 00000010 10101100 00100000 10000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {-120, 64, 0, 3, 0, 64, 53, 4, 1, 0};
  // {00001110 00000000 01000100 00000001 10100100 00001000 00000011 01011100 01000010 00100}
  public static final byte[] GRPSPLIT7 = new byte[] {112, 0, 34, -128, 37, 16, -64, 58, 66, 4};
  // {...2 0-bits... 00000001 00000100 00001000 01001000 00001011 11000100 00000000 00000100 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 32, 16, 18, -48, 35, 0, 32, 0};
  // {...1 0-bits... 00000110 00000000 10000000 00000001 10100000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {96, 0, 1, -128, 5, 0};
  // {...4 0-bits... 11000000 00000000 01000000 00000000 00000000 00000000 00110001 10000000 000}
  public static final byte[] GRPSPLIT10 = new byte[] {3, 0, 2, 0, 0, 0, -116, 1, 64};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00000100 00000001 000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 32, 0, 0, 32, -128, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_5_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3400.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2338.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1726.5f ? 
                        -18786.238f : 
                        -13673.809f) : 
                     (data[3 /* sqft_living */] <1543.5f ? 
                        -12808.475f : 
                        -6366.0327f)) : 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <34378.5f ? 
                        -9908.72f : 
                        -883.93085f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        465.3034f : 
                        14040.928f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2185.5f ? 
                 (data[3 /* sqft_living */] <1355.5f ? 
                     (data[9 /* sqft_above */] <804.5f ? 
                        -14792.407f : 
                        -5190.659f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        298.2385f : 
                        12050.279f)) : 
                 (data[3 /* sqft_living */] <2204.5f ? 
                    84996.21f : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        12028.755f : 
                        33736.293f)))) : 
         (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2166.0f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(73, 2, data[14]) || (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 73, 2, data[14])) ? 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(42, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT6, 42, 1, data[13])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 73, 2, data[14])) ? 
                        -8631.454f : 
                        12456.793f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <1.5f ? 
                        21474.857f : 
                        40524.402f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(73, 2, data[14]) || (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 73, 2, data[14])) ? 
                     (data[2 /* bathrooms */] <3.1328125f ? 
                        31089.605f : 
                        59501.49f) : 
                     (data[9 /* sqft_above */] <3246.5f ? 
                        62632.535f : 
                        112358.33f))) : 
            168537.17f));
    return pred;
  } // constant pool size = 188B, number of visited nodes = 23, static init size = 564B
  // {00011110 00000000 01000100 11000101 10000000 00111011 10101111 10110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 34, -93, 1, -36, -11, 13, 1, 4};
  // {00000001 01100011 10000010 00010010 00000110 11000000 00010000 01001111 00010010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, -58, 65, 72, 96, 3, 8, -14, 72, 0};
  // {00011111 11101011 11000110 11001111 10100111 01111011 10101111 11111111 11111010 01101}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -41, 99, -13, -27, -34, -11, -1, 95, 22};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 00001010 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, -96, 80, 0};
  // {...3 0-bits... 10000000 00000000 00000010 00000000 00000000 10010100 01100001 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 64, 0, 0, 41, -122, 0, -128};
  // {...2 0-bits... 01100100 00001001 00010011 00000000 00000000 00001010 10111100 11000010 0000000}
  public static final byte[] GRPSPLIT5 = new byte[] {38, -112, -56, 0, 0, 80, 61, 67, 0, 0};
  // {...1 0-bits... 00101000 00100000 00100000 10000010 10110000 1}
  public static final byte[] GRPSPLIT6 = new byte[] {20, 4, 4, 65, 13, 3};
  // {...2 0-bits... 01111111 11001111 11111111 01111111 10111111 10111111 11111111 11111111 1011110}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, -13, -1, -2, -3, -3, -1, -1, 61, 1};
  // {...2 0-bits... 00000000 00000000 00000010 00000000 00000000 00001010 00110000 10000000 0000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 64, 0, 0, 80, 12, 1, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_6_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2976.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2084.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -18047.9f : 
                        -13606.023f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -11235.587f : 
                        2463.867f)) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1820.5f ? 
                     (data[3 /* sqft_living */] <1190.5f ? 
                        -14608.67f : 
                        -9133.746f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        -3766.4272f : 
                        8504.447f))) : 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1544.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                     (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                        -3495.439f : 
                        8148.193f) : 
                    24707.55f) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[14])) ? 
                        6750.988f : 
                        21586.188f) : 
                    117938.07f))) : 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 77, 0, data[14])) ? 
             (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 75, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 75, 0, data[14])) ? 
                        -4788.404f : 
                        8738.437f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3601.5f ? 
                        17589.11f : 
                        35018.28f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT10, 75, 0, data[14])) ? 
                     (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(42, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT11, 42, 1, data[13])) ? 
                        13179.483f : 
                        40077.652f) : 
                    75845.164f)) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5515.0f ? 
                 (data[2 /* bathrooms */] <3.1113281f ? 
                     (data[11 /* yr_built */] <1951.5f ? 
                        57560.43f : 
                        23915.904f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(62, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT12, 62, 3, data[14])) ? 
                        46405.566f : 
                        78863.02f)) : 
                159625.53f)));
    return pred;
  } // constant pool size = 236B, number of visited nodes = 25, static init size = 804B
  // {00011110 00000000 01000100 01000001 10000000 00110011 10101111 10110000 00000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 34, -126, 1, -52, -11, 13, 64, 4};
  // {00011111 01110011 11000110 11010111 10100111 11111011 10101111 11111111 11011010 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {-8, -50, 99, -21, -27, -33, -11, -1, 91, 4};
  // {00000000 10000000 00010001 00100000 01001000 00000100 01010000 00000000 00100000 00001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 1, -120, 4, 18, 32, 10, 0, 4, 16};
  // {00000000 00000000 00000000 00000000 00000000 00000000 01010000 00000000 00000100 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 10, 0, 32, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128};
  // {...3 0-bits... 10000000 00000000 00000010 00000000 00000000 00000100 01100001 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 64, 0, 0, 32, -122, 0, 0};
  // {00010000 00000000 00000000 11000000 00000000 00000010 10101101 00100000 10000000 00000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 3, 0, 64, -75, 4, 1, 0};
  // {00001110 00110000 01000100 00000001 10000000 01001000 00000010 11010100 00000000 001}
  public static final byte[] GRPSPLIT8 = new byte[] {112, 12, 34, -128, 1, 18, 64, 43, 0, 4};
  // {10000000 10000011 00000010 00010100 00111110 10110001 00000000 00000001 00001010 000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, -63, 64, 40, 124, -115, 0, -128, 80, 0};
  // {00000001 00000000 00000000 00000000 10000000 00010001 00000000 00000000 00000000 001}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, 0, 0, 0, 1, -120, 0, 0, 0, 4};
  // {...1 0-bits... 11111111 11101011 01111111 11111110 11101111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -41, -2, 127, -9, 3};
  // {...3 0-bits... 11111111 11111111 11111101 11111111 11111111 11111011 10110111 111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -65, -1, -1, -33, -19, 31};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_7_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2616.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                 (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1016.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1530.5f ? 
                        -16823.277f : 
                        -12456.011f) : 
                    -701.86505f) : 
                 (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                     (data[2 /* bathrooms */] <1.6308594f ? 
                        -13048.306f : 
                        -7901.81f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(59, 10, data[14]) || (GenModel.bitSetIsInRange(59, 10, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 59, 10, data[14])) ? 
                        -1297.4048f : 
                        18842.898f))) : 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                 (data[3 /* sqft_living */] <1550.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(67, 4, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 67, 4, data[14])) ? 
                        -8962.895f : 
                        -2994.2979f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(67, 4, data[14]) || (GenModel.bitSetIsInRange(67, 4, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 67, 4, data[14])) ? 
                        -1003.82324f : 
                        6735.865f)) : 
                 (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <9068.5f ? 
                     (data[0 /* date */] <1.40187651E12f ? 
                        -10842.9375f : 
                        14900.68f) : 
                    82408.9f))) : 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[14])) ? 
             (Double.isNaN(data[7]) || data[7 /* view */] <3.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 75, 0, data[14])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3714.5f ? 
                        -1572.2483f : 
                        14299.415f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3985.5f ? 
                        10836.943f : 
                        25868.781f)) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2924.0f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(69, 5, data[14]) || (GenModel.bitSetIsInRange(69, 5, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 69, 5, data[14])) ? 
                        7529.5454f : 
                        51794.01f) : 
                    82674.64f)) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5262.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4313.0f ? 
                     (data[4 /* sqft_lot */] <6961.5f ? 
                        19528.395f : 
                        36834.76f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(62, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 62, 3, data[14])) ? 
                        46343.902f : 
                        83500.555f)) : 
                131276.78f)));
    return pred;
  } // constant pool size = 205B, number of visited nodes = 25, static init size = 618B
  // {00011111 01000000 01000110 01000101 10000010 01110011 10101111 10110001 00000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, 2, 98, -94, 65, -50, -11, -115, 64, 4};
  // {00011111 01110011 11000111 11010111 11101111 11111111 11111111 11111111 11111010 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {-8, -50, -29, -21, -9, -1, -1, -1, 95, 4};
  // {...10 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0, 0, 0, -60, 2};
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {8, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {...4 0-bits... 11001011 11111011 11011011 11100111 11011001 11111111 11111111 1110111}
  public static final byte[] GRPSPLIT4 = new byte[] {-45, -33, -37, -25, -101, -1, -1, -9, 3};
  // {...4 0-bits... 00000000 00000000 00000100 00010000 00000000 00111010 11111011 0000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 32, 8, 0, 92, -33, 0, 0};
  // {00010000 00000000 00000100 11000000 00000000 00000010 10101100 00100000 10000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {8, 0, 32, 3, 0, 64, 53, 4, 1, 0};
  // {00001110 00100011 01000010 00000001 10000000 01111001 00000011 11010101 00001000 001}
  public static final byte[] GRPSPLIT7 = new byte[] {112, -60, 66, -128, 1, -98, -64, -85, 16, 4};
  // {...5 0-bits... 10000000 00000000 00000000 00100000 00000000 00000000 00000001 00000001}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 4, 0, 0, -128, -128, 16};
  // {...3 0-bits... 11111111 11111111 11011101 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -69, -1, -1, -1, -1, 63};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_8_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3503.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2344.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1700.5f ? 
                        -13588.63f : 
                        -9464.953f) : 
                     (data[2 /* bathrooms */] <1.6464844f ? 
                        -9479.043f : 
                        -4095.5115f)) : 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 43, 0, data[13])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -9671.507f : 
                        -2933.139f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[14])) ? 
                        1104.7202f : 
                        10537.736f))) : 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1544.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                        -3113.8364f : 
                        16655.83f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[14])) ? 
                        4203.6343f : 
                        29595.447f)) : 
                 (data[9 /* sqft_above */] <1560.5f ? 
                    87980.01f : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        8712.667f : 
                        28146.06f)))) : 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6562.0f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(73, 2, data[14]) || (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 73, 2, data[14])) ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(73, 2, data[14]) || (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 73, 2, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4678.5f ? 
                        2938.174f : 
                        25714.525f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4368.5f ? 
                        17924.264f : 
                        30830.748f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(73, 2, data[14]) || (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 73, 2, data[14])) ? 
                     (data[2 /* bathrooms */] <3.1171875f ? 
                        23949.463f : 
                        44454.67f) : 
                    75852.445f)) : 
            131533.9f));
    return pred;
  } // constant pool size = 194B, number of visited nodes = 22, static init size = 624B
  // {00011110 00000000 00000100 11000101 10000000 00110011 10101111 10110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 32, -93, 1, -52, -11, 13, 1, 4};
  // {00000001 01000011 11000010 00000010 00000010 11000000 00000000 01001111 00000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, -62, 67, 64, 64, 3, 0, -14, 64, 0};
  // {00011001 00001100 11011000 01100000 00011010 001}
  public static final byte[] GRPSPLIT2 = new byte[] {-104, 48, 27, 6, 88, 4};
  // {10111111 11111011 11000111 11011111 11111111 11111011 11111111 11111111 10111010 01111}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, -33, -29, -5, -1, -33, -1, -1, 93, 30};
  // {00000000 00000000 01000000 00000000 00000100 00000000 00000000 00001101 01001000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 2, 0, 32, 0, 0, -80, 18, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00010000 00100000 00000100 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0, 0, 8, 4, 32, -128};
  // {...2 0-bits... 01110100 00001000 00010011 00000100 00000000 00001010 10111100 11000010 0000100}
  public static final byte[] GRPSPLIT7 = new byte[] {46, 16, -56, 32, 0, 80, 61, 67, 16, 0};
  // {...2 0-bits... 00001001 01000011 00001000 00001010 10010010 01100000 00000001 00000101 0000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-112, -62, 16, 80, 73, 6, -128, -96, 0, 1};
  // {...2 0-bits... 00000000 00000000 00000010 00000000 00000000 00001010 00100000 10000000 0000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 64, 0, 0, 80, 4, 1, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_9_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2616.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                 (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1016.5f ? 
                     (data[2 /* bathrooms */] <1.625f ? 
                        -15038.255f : 
                        -11080.979f) : 
                    164.98352f) : 
                 (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <2.125f ? 
                        -9513.63f : 
                        -5167.8755f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(60, 9, data[14]) || (GenModel.bitSetIsInRange(60, 9, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 60, 9, data[14])) ? 
                        -699.3097f : 
                        16992.12f))) : 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1830.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(68, 3, data[14]) || (GenModel.bitSetIsInRange(68, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 68, 3, data[14])) ? 
                        -3570.2896f : 
                        6258.9424f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(68, 3, data[14]) || (GenModel.bitSetIsInRange(68, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 68, 3, data[14])) ? 
                        1862.8966f : 
                        10986.126f)) : 
                 (Double.isNaN(data[0]) || data[0 /* date */] <1.40280791E12f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1844.5f ? 
                        7266.863f : 
                        -24088.918f) : 
                    106443.62f))) : 
         (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2166.0f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 75, 0, data[14])) ? 
                 (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 75, 0, data[14])) ? 
                        1103.8384f : 
                        11726.726f) : 
                    59163.68f) : 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4326.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(62, 3, data[14]) || (GenModel.bitSetIsInRange(62, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 62, 3, data[14])) ? 
                        22893.08f : 
                        38928.582f) : 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(41, 3, data[13]) || (GenModel.bitSetIsInRange(41, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT9, 41, 3, data[13])) ? 
                        34793.938f : 
                        74964.39f))) : 
            124048.164f));
    return pred;
  } // constant pool size = 186B, number of visited nodes = 21, static init size = 600B
  // {00011111 00000000 01000110 01000101 10000000 01110011 10101111 10110001 00000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, 0, 98, -94, 1, -50, -11, -115, 64, 4};
  // {00011111 01110011 11000111 11010111 11101111 11111111 11111111 11111111 11111010 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {-8, -50, -29, -21, -9, -1, -1, -1, 95, 4};
  // {...9 0-bits... 01000000 00000000 00000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0, 0, 0, -120, 5};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 01100001 00000000 0}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0, 0, 0, -122, 0, 0};
  // {...3 0-bits... 10000000 00000000 00000010 00000000 00000000 00011101 01100001 00000000 0}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 64, 0, 0, -72, -122, 0, 0};
  // {00011000 00000000 00000100 11000000 00000000 00000010 10101101 00100000 10000000 000}
  public static final byte[] GRPSPLIT6 = new byte[] {24, 0, 32, 3, 0, 64, -75, 4, 1, 0};
  // {00000110 00000011 01000010 00000001 10000000 00101001 00000010 11010101 00000010 001}
  public static final byte[] GRPSPLIT7 = new byte[] {96, -64, 66, -128, 1, -108, 64, -85, 64, 4};
  // {...3 0-bits... 10000000 00000000 00000100 00000000 00000000 00000000 00000001 000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 32, 0, 0, 0, -128, 0};
  // {...3 0-bits... 01111111 11111111 11110111 11111111 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-2, -1, -17, -1, -1, 1};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_10_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3066.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                 (data[3 /* sqft_living */] <1513.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -13110.253f : 
                        -9532.849f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -10355.33f : 
                        -5900.5596f)) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1579.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        -7494.842f : 
                        2408.3052f) : 
                     (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(40, 3, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 40, 3, data[13])) ? 
                        -4358.028f : 
                        1627.0546f))) : 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1544.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (data[9 /* sqft_above */] <890.5f ? 
                        -8766.184f : 
                        -1147.646f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                        3736.7083f : 
                        26697.184f)) : 
                 (data[9 /* sqft_above */] <1556.5f ? 
                    97080.72f : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <1.5f ? 
                        6471.9985f : 
                        22919.234f)))) : 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6565.0f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 75, 0, data[14])) ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 75, 0, data[14])) ? 
                     (data[0 /* date */] <1.40150388E12f ? 
                        -7703.37f : 
                        2493.944f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <4407.5f ? 
                        8222.415f : 
                        31693.297f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 75, 0, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3834.5f ? 
                        20857.977f : 
                        33960.527f) : 
                     (data[9 /* sqft_above */] <3064.5f ? 
                        27542.945f : 
                        73283.8f))) : 
            111989.18f));
    return pred;
  } // constant pool size = 187B, number of visited nodes = 23, static init size = 558B
  // {00011110 00000000 00000100 01000001 10000000 00010011 10101111 10110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 32, -126, 1, -56, -11, 13, 1, 4};
  // {00000001 01110011 11000010 00000110 00100110 11101000 00000000 01001111 01001010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, -50, 67, 96, 100, 23, 0, -14, 82, 0};
  // {00000000 10000000 00010000 00010000 01000000 00000100 01010000 00000000 00110000 00001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 1, 8, 8, 2, 32, 10, 0, 12, 16};
  // {00000000 00000000 00000001 00010000 01011000 00000100 01010000 00000000 00110100 01010}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, -128, 8, 26, 32, 10, 0, 44, 10};
  // {...3 0-bits... 11011111 01111111 11111111 11101011 10101}
  public static final byte[] GRPSPLIT4 = new byte[] {-5, -2, -1, -41, -75};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00010000 00100000 00000100 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0, 0, 8, 4, 32, -128};
  // {00011101 00000000 00000100 11000000 00000000 00000010 10101111 10110000 10000000 001}
  public static final byte[] GRPSPLIT6 = new byte[] {-72, 0, 32, 3, 0, 64, -11, 13, 1, 4};
  // {01011111 10110011 01100110 11011111 11100111 01111011 10111111 11111101 10000110 001}
  public static final byte[] GRPSPLIT7 = new byte[] {-6, -51, 102, -5, -25, -34, -3, -65, 97, 4};
  // {00000000 00000000 00000000 10000000 00000000 00000010 00100100 00100000 00000000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 1, 0, 64, 36, 4, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_11_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3503.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2259.5f ? 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 43, 0, data[13])) ? 
                     (data[2 /* bathrooms */] <1.6464844f ? 
                        -11825.077f : 
                        -8239.115f) : 
                     (data[3 /* sqft_living */] <1525.5f ? 
                        -7472.4746f : 
                        -2791.5305f)) : 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 43, 0, data[13])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -7951.3457f : 
                        -2984.1155f) : 
                     (data[9 /* sqft_above */] <1550.5f ? 
                        -5115.7744f : 
                        3237.5574f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2051.5f ? 
                 (data[9 /* sqft_above */] <963.5f ? 
                     (data[9 /* sqft_above */] <766.5f ? 
                        -12542.48f : 
                        -4785.868f) : 
                     (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                        -482.7947f : 
                        9654.074f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        5137.962f : 
                        20959.639f) : 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <10960.5f ? 
                        12755.801f : 
                        80388.11f)))) : 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6562.0f ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 73, 2, data[14])) ? 
                 (data[11 /* yr_built */] <1986.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 2, data[14]) || (GenModel.bitSetIsInRange(72, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 2, data[14])) ? 
                        -6594.9146f : 
                        9665.002f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4735.5f ? 
                        8510.683f : 
                        22114.973f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(73, 2, data[14]) || (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 73, 2, data[14])) ? 
                     (data[2 /* bathrooms */] <2.6289062f ? 
                        8688.696f : 
                        29098.451f) : 
                    57787.953f)) : 
            100790.266f));
    return pred;
  } // constant pool size = 172B, number of visited nodes = 23, static init size = 468B
  // {00011110 00000000 00000100 11000101 00000000 00110011 10101111 10110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 32, -93, 0, -52, -11, 13, 1, 4};
  // {00011100 00000101 11011000 01100011 00010010 111}
  public static final byte[] GRPSPLIT1 = new byte[] {56, -96, 27, -58, 72, 7};
  // {10110101 10101101 11011011 11101101 01011011 001}
  public static final byte[] GRPSPLIT2 = new byte[] {-83, -75, -37, -73, -38, 4};
  // {10111111 01111011 11100111 11011111 11111111 11111011 11111111 11111111 10111010 01111}
  public static final byte[] GRPSPLIT3 = new byte[] {-3, -34, -25, -5, -1, -33, -1, -1, 93, 30};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000100 00100001 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0, 0, 32, -124, 0, -128};
  // {...2 0-bits... 01110100 00001000 00011011 00000100 10010000 01001010 10111000 11000011 0000100}
  public static final byte[] GRPSPLIT5 = new byte[] {46, 16, -40, 32, 9, 82, 29, -61, 16, 1};
  // {...2 0-bits... 00000000 00000010 00000000 10000000 00000000 10100000 00000101 00000000 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 64, 0, 1, 0, 5, -96, 0, 0};
  // {...2 0-bits... 00000000 00000000 00000010 00000000 00000000 00001010 00100000 10000000 0000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 64, 0, 0, 80, 4, 1, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_12_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2937.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1928.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        -9950.025f : 
                        -2142.369f) : 
                     (data[3 /* sqft_living */] <1227.5f ? 
                        -8061.5576f : 
                        -4402.351f)) : 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        -5620.1187f : 
                        -13898.761f) : 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(43, 0, data[13]) || (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 43, 0, data[13])) ? 
                        -972.91614f : 
                        15196.394f))) : 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1544.5f ? 
                 (data[3 /* sqft_living */] <1108.5f ? 
                     (data[9 /* sqft_above */] <813.5f ? 
                        -11127.093f : 
                        -4358.532f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        -2216.4316f : 
                        2695.8735f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2064.5f ? 
                        1610.4376f : 
                        9944.021f) : 
                    95514.24f))) : 
         (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2166.0f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 75, 0, data[14])) ? 
                 (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(74, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 74, 0, data[14])) ? 
                        -2997.0222f : 
                        6185.212f) : 
                     (data[1 /* bedrooms */] <3.5f ? 
                        45582.367f : 
                        7143.475f)) : 
                 (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 72, 3, data[14])) ? 
                        11077.425f : 
                        30219.742f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT9, 72, 3, data[14])) ? 
                        24849.95f : 
                        75059.62f))) : 
            97838.66f));
    return pred;
  } // constant pool size = 196B, number of visited nodes = 23, static init size = 612B
  // {00011111 00000000 00000110 01000011 10000000 00010011 10101111 10110001 00000010 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-8, 0, 96, -62, 1, -56, -11, -115, 64, 4};
  // {00000000 11000001 11000000 00010100 01001010 01100000 01010000 01001110 10110000 00001}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -125, 3, 40, 82, 6, 10, 114, 13, 16};
  // {00011111 01110011 11000110 11000111 10110111 11110011 11111111 11111111 11101110 00111}
  public static final byte[] GRPSPLIT2 = new byte[] {-8, -50, 99, -29, -19, -49, -1, -1, 119, 28};
  // {00000000 00000000 00000000 00100000 00000000 100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 4, 0, 1};
  // {...3 0-bits... 11000000 00000000 00000000 00001000 00000000 00010101 01100101 10000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 0, 16, 0, -88, -90, 1, 0};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128};
  // {00011111 00000010 01000100 11000000 00000000 00000010 10101111 11110000 10000000 001}
  public static final byte[] GRPSPLIT6 = new byte[] {-8, 64, 34, 3, 0, 64, -11, 15, 1, 4};
  // {10000000 10110001 00000010 00010101 10110110 01111001 00000000 00000100 00001010 00}
  public static final byte[] GRPSPLIT7 = new byte[] {1, -115, 64, -88, 109, -98, 0, 32, 80, 0};
  // {...3 0-bits... 10000000 00000000 00000100 00000000 00000000 00010100 00100000 00000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 32, 0, 0, 40, 4, 0, 0};
  // {...3 0-bits... 00000000 00000000 00100100 00000000 00000000 00000001 01100001 00000000 00000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 36, 0, 0, -128, -122, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_13_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
         (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2496.5f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                 (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -9504.463f : 
                        -5908.9053f) : 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1330.5f ? 
                        2613.385f : 
                        -14415.334f)) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1670.5f ? 
                     (data[3 /* sqft_living */] <1211.5f ? 
                        -5863.372f : 
                        -1539.876f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        2280.6118f : 
                        14577.82f))) : 
             (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 76, 0, data[14])) ? 
                     (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(42, 1, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 42, 1, data[13])) ? 
                        -22232.648f : 
                        -1769.7075f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[14]) || (GenModel.bitSetIsInRange(76, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 76, 0, data[14])) ? 
                        5452.424f : 
                        19873.229f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[14]) || (GenModel.bitSetIsInRange(76, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 76, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 76, 0, data[14])) ? 
                        -1852.2266f : 
                        16135.504f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <3.5f ? 
                        40781.46f : 
                        64555.88f)))) : 
         (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1539.5f ? 
             (data[2 /* bathrooms */] <2.3701172f ? 
                 (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <16492.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 72, 3, data[14])) ? 
                        -4414.414f : 
                        4861.067f) : 
                    21435.912f) : 
                 (data[11 /* yr_built */] <1957.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <11254.5f ? 
                        20992.652f : 
                        125028.95f) : 
                     (data[9 /* sqft_above */] <2217.5f ? 
                        431.3509f : 
                        15931.734f))) : 
            76808.35f));
    return pred;
  } // constant pool size = 188B, number of visited nodes = 23, static init size = 564B
  // {00011000 00000000 00000100 11000000 00000000 00000000 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 32, 3, 0, 0, 49, 4, 0, 4};
  // {00000111 01000011 11000010 00000101 00000010 10000011 00100011 11011101 10000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-32, -62, 67, -96, 64, -63, -60, -69, 1, 0};
  // {00111111 01110011 11110111 11110111 11101111 11111111 11111111 11111111 10110110 00101}
  public static final byte[] GRPSPLIT2 = new byte[] {-4, -50, -17, -17, -9, -1, -1, -1, 109, 20};
  // {01011110 10101001 01100110 11011111 11100101 01111011 10101111 10101111 11001000 0010}
  public static final byte[] GRPSPLIT3 = new byte[] {122, -107, 102, -5, -89, -34, -11, -11, 19, 4};
  // {...1 0-bits... 11011111 01111111 11101111 11111111 11111110 1}
  public static final byte[] GRPSPLIT4 = new byte[] {-5, -2, -9, -1, 127, 3};
  // {00000010 00000000 00000000 00000000 00000000 00000011 00000010 10000000 11000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 0, 0, -64, 64, 1, 3, 0};
  // {00000001 00000000 00000000 00000001 10000000 00010001 00100010 00000000 11000010 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, -128, 1, -120, 68, 0, 67, 0};
  // {01111111 11111011 11111110 11111111 11010111 10111011 11111111 11110111 11101111 1011}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, -33, 127, -1, -21, -35, -1, -17, -9, 13};
  // {...3 0-bits... 10111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -1, -5, -1, -1, -1, -1, -1, 127};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_14_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4261.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2260.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        -6453.693f : 
                        678.17993f) : 
                     (data[3 /* sqft_living */] <1232.5f ? 
                        -5456.7197f : 
                        -528.8348f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 43, 0, data[13])) ? 
                        -3563.5361f : 
                        1005.1597f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        3592.893f : 
                        15372.4795f))) : 
             (data[9 /* sqft_above */] <1544.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        -6331.365f : 
                        2388.4307f) : 
                     (data[10 /* sqft_basement */] <646.5f ? 
                        26504.512f : 
                        1080.1467f)) : 
                 (data[9 /* sqft_above */] <1587.5f ? 
                    80710.95f : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                        8057.435f : 
                        25458.695f)))) : 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 77, 0, data[14])) ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 77, 0, data[14])) ? 
                 (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(67, 2, data[14]) || (GenModel.bitSetIsInRange(67, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 67, 2, data[14])) ? 
                        2844.579f : 
                        23567.7f) : 
                    -5093.996f) : 
                 (Double.isNaN(data[9]) || data[9 /* sqft_above */] <4472.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1431.5f ? 
                        28453.434f : 
                        2682.8762f) : 
                    57086.816f)) : 
             (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1224.0f ? 
                35696.516f : 
                101492.875f)));
    return pred;
  } // constant pool size = 172B, number of visited nodes = 22, static init size = 492B
  // {00011100 00000000 00000100 11000000 00000000 00010010 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {56, 0, 32, 3, 0, 72, 49, 4, 0, 4};
  // {00000001 11000011 11000010 00000101 00000010 01000001 00100011 11010101 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, -61, 67, -96, 64, -126, -60, -85, 0, 0};
  // {00000010 00000000 01000010 00000001 10000000 01000001 00000011 10011101 10001010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 0, 66, -128, 1, -126, -64, -71, 81, 0};
  // {00010100 00101100 11000000 01010101 01010010 011}
  public static final byte[] GRPSPLIT3 = new byte[] {40, 52, 3, -86, 74, 6};
  // {...3 0-bits... 11011111 11111111 11111111 11111111 11111111 01111011 11111111 11111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-5, -1, -1, -1, -1, -34, -1, -1, 127};
  // {00010001 00100000 00000100 10000000 00000000 00010000 10101100 00000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {-120, 4, 32, 1, 0, 8, 53, 0, 0, 0};
  // {00000000 00000010 11000000 01000001 10000100 00100001 00000000 01100000 10000010 00100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 64, 3, -126, 33, -124, 0, 6, 65, 4};
  // {...2 0-bits... 00010000 00000000 00000000 00000000 00000001 00110000 00000000 00000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {8, 0, 0, 0, -128, 12, 0, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_15_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3503.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1929.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (data[2 /* bathrooms */] <1.2480469f ? 
                        -8848.3545f : 
                        -6043.44f) : 
                     (data[1 /* bedrooms */] <2.5f ? 
                        -6518.8926f : 
                        -2872.97f)) : 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 43, 0, data[13])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        -4635.853f : 
                        2272.7563f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -205.24178f : 
                        7513.015f))) : 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2051.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        -1985.2466f : 
                        8130.552f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        2173.3726f : 
                        26936.5f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[14])) ? 
                        3014.5188f : 
                        10282.507f) : 
                    42846.12f))) : 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6562.0f ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(73, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT7, 73, 2, data[14])) ? 
                 (data[11 /* yr_built */] <1986.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 2, data[14]) && !GenModel.bitSetContains(GRPSPLIT8, 72, 2, data[14])) ? 
                        -11148.585f : 
                        -627.5084f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4735.5f ? 
                        5426.337f : 
                        17777.443f)) : 
                 (data[11 /* yr_built */] <1935.5f ? 
                    43030.414f : 
                     (data[2 /* bathrooms */] <3.1171875f ? 
                        5986.329f : 
                        22562.268f))) : 
            77087.05f));
    return pred;
  } // constant pool size = 181B, number of visited nodes = 22, static init size = 546B
  // {00011110 00000000 00000100 01000101 00000000 00110011 10101111 10110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 32, -94, 0, -52, -11, 13, 1, 4};
  // {00000001 11000001 11000010 00010000 01000000 01000000 01000000 01001111 00110010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, -125, 67, 8, 2, 2, 2, -14, 76, 0};
  // {00010101 00100100 11011000 01100011 00010010 101}
  public static final byte[] GRPSPLIT2 = new byte[] {-88, 36, 27, -58, 72, 5};
  // {00000000 00000000 00000000 00000000 00100100 00000000 00000000 00000110 00001100 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 36, 0, 0, 96, 48, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 00100000 00000100 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0, 0, 0, 4, 32, -128};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128};
  // {...3 0-bits... 11001111 11111111 11111111 11010111 11111110 01111111 11100011 01111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-13, -1, -1, -21, 127, -2, -57, -2, -1};
  // {...2 0-bits... 01111101 00001010 00010011 00000100 10010000 01101010 10111000 11000011 0000100}
  public static final byte[] GRPSPLIT7 = new byte[] {-66, 80, -56, 32, 9, 86, 29, -61, 16, 1};
  // {...2 0-bits... 01111111 01111111 11111111 11111111 11111111 11101011 11111111 11011111 101110}
  public static final byte[] GRPSPLIT8 = new byte[] {-2, -2, -1, -1, -1, -41, -1, -5, -35};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_16_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2496.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        -4517.6914f : 
                        -9626.997f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1670.5f ? 
                        -2176.3892f : 
                        3374.1252f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <51003.5f ? 
                        1937.6843f : 
                        10600.561f) : 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <64.5f ? 
                        12681.591f : 
                        37475.16f))) : 
             (data[2 /* bathrooms */] <2.359375f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2716.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 72, 3, data[14])) ? 
                        -9474.209f : 
                        1849.3046f) : 
                    16868.426f) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                     (data[9 /* sqft_above */] <2009.5f ? 
                        -1468.4683f : 
                        18376.748f) : 
                    59459.34f))) : 
         (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[13])) ? 
            13664.018f : 
            99095.87f));
    return pred;
  } // constant pool size = 122B, number of visited nodes = 15, static init size = 360B
  // {00011000 00000000 00000100 11000000 00000000 00000010 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 32, 3, 0, 64, 49, 4, 0, 4};
  // {00000101 01000011 11000010 00000101 10000000 00000001 00100011 11010101 10000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-96, -62, 67, -96, 1, -128, -60, -85, 1, 0};
  // {00000010 00000000 00000000 00000000 00000000 00000001 00100010 10000000 11001010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 0, 0, 0, 0, -128, 68, 1, 83, 0};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128};
  // {00010000 00000000 00000000 00100001 01010000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, -124, 10, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_17_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2165.5f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2616.5f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -6824.837f : 
                        -3337.0898f) : 
                     (data[3 /* sqft_living */] <1428.5f ? 
                        -2515.1445f : 
                        1617.3484f)) : 
                 (Double.isNaN(data[0]) || data[0 /* date */] <1.40311069E12f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1954.5f ? 
                        4842.281f : 
                        -27017.361f) : 
                    91426.62f)) : 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                 (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        2949.1826f : 
                        -5182.446f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 75, 0, data[14])) ? 
                        8157.029f : 
                        35947.67f)) : 
                 (data[9 /* sqft_above */] <2469.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        2806.5457f : 
                        18619.162f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(66, 3, data[14]) || (GenModel.bitSetIsInRange(66, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 66, 3, data[14])) ? 
                        13678.075f : 
                        39737.7f)))) : 
        71374.414f);
    return pred;
  } // constant pool size = 127B, number of visited nodes = 15, static init size = 390B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00011011 00000010 00000010 01000001 10000000 01000011 10101111 10110001 00000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-40, 64, 64, -126, 1, -62, -11, -115, 64, 0};
  // {00111111 01110011 11110111 11110111 11101111 11111111 11111111 11111111 11111110 00101}
  public static final byte[] GRPSPLIT2 = new byte[] {-4, -50, -17, -17, -9, -1, -1, -1, 127, 20};
  // {00011010 00000000 00000100 11000000 00000000 00000011 10101111 11100100 10001000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {88, 0, 32, 3, 0, -64, -11, 39, 17, 0};
  // {00000001 00000000 00000000 00000001 00000000 00010000 00000000 00000001 00000000 001}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 0, -128, 0, 8, 0, -128, 0, 4};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00000001 01010001 0000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 32, 0, 0, -128, -118, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_18_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2496.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        -4103.434f : 
                        -10283.391f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        -1518.0242f : 
                        5979.549f)) : 
                 (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 76, 0, data[14])) ? 
                        -3510.117f : 
                        4149.882f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[14]) || (GenModel.bitSetIsInRange(76, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 76, 0, data[14])) ? 
                        7385.2905f : 
                        31398.512f))) : 
             (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <9068.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2930.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        -9599.2705f : 
                        4053.183f) : 
                    29219.81f) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <3.09375f ? 
                        2240.007f : 
                        25351.957f) : 
                    133243.23f))) : 
         (Double.isNaN(data[12]) || data[12 /* yr_renovated */] <1985.5f ? 
            9899.033f : 
            87834.98f));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 15, static init size = 384B
  // {00011000 00000000 00000000 11000000 00000000 00000010 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {24, 0, 0, 3, 0, 64, 49, 4, 0, 4};
  // {00000111 01000011 11000110 00000111 10100010 00100001 00100011 11011111 10010000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-32, -62, 99, -32, 69, -124, -60, -5, 9, 0};
  // {11011110 10111001 11100110 11011101 11100101 01111011 10101111 10101011 11101000 0010}
  public static final byte[] GRPSPLIT2 = new byte[] {123, -99, 103, -69, -89, -34, -11, -43, 23, 4};
  // {00000001 00000000 00000100 00000000 10000000 00000001 00100010 01000000 10001010 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, 0, 32, 0, 1, -128, 68, 2, 81, 0};
  // {...3 0-bits... 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -65, -1, -1, -1, -1, -1, 127};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000100 00100001 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 32, -124, 0, -128};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_19_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1685.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                        -5581.5903f : 
                        3040.657f) : 
                     (data[3 /* sqft_living */] <1000.5f ? 
                        -5951.7217f : 
                        -1161.7885f)) : 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 43, 0, data[13])) ? 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <17455.5f ? 
                        -2761.7039f : 
                        1184.6603f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        2379.718f : 
                        12109.727f))) : 
             (data[2 /* bathrooms */] <2.109375f ? 
                 (Double.isNaN(data[7]) || data[7 /* view */] <1.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 72, 3, data[14])) ? 
                        -6709.355f : 
                        1315.8157f) : 
                    14234.25f) : 
                 (data[11 /* yr_built */] <1957.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <11254.5f ? 
                        7910.307f : 
                        87885.23f) : 
                     (data[9 /* sqft_above */] <2217.5f ? 
                        -57.22524f : 
                        10053.947f)))) : 
        61224.176f);
    return pred;
  } // constant pool size = 101B, number of visited nodes = 15, static init size = 234B
  // {00011100 00000000 00000100 11000000 00000000 00000010 10101100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {56, 0, 32, 3, 0, 64, 53, 4, 0, 4};
  // {00000001 01010010 10000010 00000101 00001100 00100001 01010011 11011111 00011110 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, 74, 65, -96, 48, -124, -54, -5, 120, 0};
  // {00010011 00000100 10010000 01100011 01110000 001}
  public static final byte[] GRPSPLIT2 = new byte[] {-56, 32, 9, -58, 14, 4};
  // {...3 0-bits... 10011111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-7, -1, -5, -1, -1, -1, -1, -1, 127};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_20_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2130.0f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2616.5f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1812.5f ? 
                        -3503.7832f : 
                        -672.42786f) : 
                     (data[9 /* sqft_above */] <857.5f ? 
                        -5398.937f : 
                        1480.7499f)) : 
                 (Double.isNaN(data[11]) || data[11 /* yr_built */] <1951.5f ? 
                     (data[12 /* yr_renovated */] <1951.5f ? 
                        -19520.992f : 
                        -2870.699f) : 
                    70811.41f)) : 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4263.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 75, 0, data[14])) ? 
                        -4002.4788f : 
                        1592.3328f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(75, 0, data[14]) || (GenModel.bitSetIsInRange(75, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 75, 0, data[14])) ? 
                        5229.4595f : 
                        28020.834f)) : 
                 (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <956.5f ? 
                        9543.539f : 
                        -2867.9094f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(66, 3, data[14]) || (GenModel.bitSetIsInRange(66, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 66, 3, data[14])) ? 
                        9624.11f : 
                        42667.438f)))) : 
        55319.992f);
    return pred;
  } // constant pool size = 127B, number of visited nodes = 15, static init size = 390B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00011000 00000000 00000000 00000001 00000000 00000011 10101111 10110000 00000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 0, -128, 0, -64, -11, 13, 64, 0};
  // {00011110 00000010 01000100 11000001 01000000 00000011 10101111 11100101 10001000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {120, 64, 34, -125, 2, -64, -11, -89, 17, 0};
  // {11111110 11011011 11000111 11011101 11010111 11111011 10111111 11111111 10111000 010}
  public static final byte[] GRPSPLIT3 = new byte[] {127, -37, -29, -69, -21, -33, -3, -1, 29, 2};
  // {00000001 00100000 00000000 00000000 10000000 00010000 00000000 00000000 00000010 000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 4, 0, 0, 1, 8, 0, 0, 64, 0};
  // {...3 0-bits... 00000000 00000000 00100100 00001000 00000000 00000001 01000001 0000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 36, 16, 0, -128, -126, 0, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_21_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2496.5f ? 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 43, 0, data[13])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        -3426.1836f : 
                        -9122.009f) : 
                     (data[3 /* sqft_living */] <1202.5f ? 
                        -3641.5276f : 
                        -130.50368f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        1123.1434f : 
                        8112.022f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        11493.1455f : 
                        23874.617f))) : 
             (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <9068.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 72, 3, data[14])) ? 
                        -13514.079f : 
                        2417.6917f) : 
                     (Double.isNaN(data[5]) || data[5 /* floors */] <1.734375f ? 
                        4568.306f : 
                        32496.281f)) : 
                 (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(42, 2, data[13]) || (GenModel.bitSetIsInRange(42, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 42, 2, data[13])) ? 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <3.109375f ? 
                        -1626.1731f : 
                        20924.455f) : 
                    108625.23f))) : 
         (Double.isNaN(data[0]) || data[0 /* date */] <1.40309325E12f ? 
            70963.5f : 
            -2521.968f));
    return pred;
  } // constant pool size = 112B, number of visited nodes = 16, static init size = 276B
  // {00010000 00000000 00000000 11000000 00000000 00000000 10001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 3, 0, 0, 49, 4, 0, 4};
  // {00010100 00000101 11011000 01100111 01010010 100}
  public static final byte[] GRPSPLIT1 = new byte[] {40, -96, 27, -26, 74, 1};
  // {00001010 00000000 00000000 00000000 00000000 00000010 00100010 10000001 11001010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {80, 0, 0, 0, 0, 64, 68, -127, 83, 0};
  // {...3 0-bits... 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -65, -1, -1, -1, -1, -1, 127};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 01000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 2, 2};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_22_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3392.5f ? 
                        -3776.981f : 
                        -16458.375f) : 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <2.390625f ? 
                        -2627.8962f : 
                        182.48146f)) : 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <3.5f ? 
                        1897.702f : 
                        -13698.988f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                        2648.9116f : 
                        11043.789f))) : 
             (data[9 /* sqft_above */] <1544.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 72, 3, data[14])) ? 
                        -9447.521f : 
                        -577.78375f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        2361.8625f : 
                        20434.633f)) : 
                 (data[9 /* sqft_above */] <1575.5f ? 
                     (data[10 /* sqft_basement */] <89.0f ? 
                        -9921.8f : 
                        90825.98f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                        -14194.352f : 
                        4368.806f)))) : 
        50171.05f);
    return pred;
  } // constant pool size = 129B, number of visited nodes = 16, static init size = 378B
  // {00011110 00000000 00000100 11000001 10000000 01010011 10101111 10110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 0, 32, -125, 1, -54, -11, 13, 1, 4};
  // {00011110 01111011 11000111 11010111 11101111 01111111 11111111 11111111 10100010 00101}
  public static final byte[] GRPSPLIT1 = new byte[] {120, -34, -29, -21, -9, -2, -1, -1, 69, 20};
  // {01111111 11010111 11111111 11101111 11011111 01111111 10111111 11111111 11111001 01111}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, -21, -1, -9, -5, -2, -3, -1, -97, 30};
  // {...3 0-bits... 11111111 11111111 11111111 11111011 11111111 01111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -33, -1, -2, -1, -1, 127};
  // {...3 0-bits... 10100000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {5, 0, 0, 0, 0, 0, 0, 32, -128};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 127};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_23_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1685.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        -3835.9883f : 
                        -9104.54f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                        -1415.9736f : 
                        4396.808f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4904.5f ? 
                        -927.5348f : 
                        13244.854f) : 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        4609.376f : 
                        -2474.9924f))) : 
             (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <9068.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 72, 3, data[14])) ? 
                        -11251.15f : 
                        2982.305f) : 
                     (Double.isNaN(data[5]) || data[5 /* floors */] <1.734375f ? 
                        -102.68029f : 
                        33414.87f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <3.109375f ? 
                        -378.0632f : 
                        16422.629f) : 
                    93764.58f))) : 
         (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 44, 0, data[13])) ? 
            601.1141f : 
            71744.72f));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 16, static init size = 360B
  // {00010000 00000000 00000000 11000000 00000000 00000000 00001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 3, 0, 0, 48, 4, 0, 4};
  // {00011100 11110010 10100010 11010101 01001101 00100011 11111111 11111111 00110110 00101}
  public static final byte[] GRPSPLIT1 = new byte[] {56, 79, 69, -85, -78, -60, -1, -1, 108, 20};
  // {00001110 00100011 00000110 00000000 10100000 01001011 10100011 11010001 11000000 10000}
  public static final byte[] GRPSPLIT2 = new byte[] {112, -60, 96, 0, 5, -46, -59, -117, 3, 1};
  // {...3 0-bits... 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -65, -1, -1, -1, -1, -1, 127};
  // {...3 0-bits... 00000000 00000000 00000100 00000000 00000000 00000000 00000001 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 32, 0, 0, 0, -128, 0, -128};
  // {00010000 00000000 00000000 00100001 01010000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {8, 0, 0, -124, 10, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_24_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2496.5f ? 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(43, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 43, 0, data[13])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        -2462.6626f : 
                        -8202.967f) : 
                     (Double.isNaN(data[8]) || data[8 /* condition */] <3.5f ? 
                        -1697.1188f : 
                        1091.3271f)) : 
                 (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(76, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 76, 0, data[14])) ? 
                        -13498.366f : 
                        1556.1644f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(76, 0, data[14]) || (GenModel.bitSetIsInRange(76, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 76, 0, data[14])) ? 
                        4292.432f : 
                        31919.041f))) : 
             (data[9 /* sqft_above */] <1261.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                     (Double.isNaN(data[0]) || data[0 /* date */] <1.40397235E12f ? 
                        -4086.6045f : 
                        -13829.4f) : 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <2.5f ? 
                        -3226.6665f : 
                        3395.684f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <3.5f ? 
                        4536.8525f : 
                        -16777.922f) : 
                     (data[9 /* sqft_above */] <1568.5f ? 
                        86924.81f : 
                        -12237.322f)))) : 
        43862.043f);
    return pred;
  } // constant pool size = 126B, number of visited nodes = 16, static init size = 360B
  // {00011100 00000000 00000100 11000000 00000000 00000010 10101100 00110000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {56, 0, 32, 3, 0, 64, 53, 12, 0, 4};
  // {00010100 00000101 01011000 01100111 01010010 100}
  public static final byte[] GRPSPLIT1 = new byte[] {40, -96, 26, -26, 74, 1};
  // {11111110 11111111 11110111 11111111 11111111 01111111 10111111 10111111 11101000 1011}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -1, -17, -1, -1, -2, -3, -3, 23, 13};
  // {00000001 00000000 00000000 00000001 00000000 00010000 00000010 00000000 10000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, 0, 0, -128, 0, 8, 64, 0, 1, 0};
  // {...3 0-bits... 11011111 11111111 11011111 11111111 11111111 11111111 11111111 01111111 11111}
  public static final byte[] GRPSPLIT4 = new byte[] {-5, -1, -5, -1, -1, -1, -1, -2, 127};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_25_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2130.0f ? 
         (data[3 /* sqft_living */] <1948.5f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                 (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <34229.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                        -3288.1555f : 
                        888.026f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                        1033.8656f : 
                        14872.438f)) : 
                 (data[3 /* sqft_living */] <1274.5f ? 
                     (data[9 /* sqft_above */] <722.5f ? 
                        -7167.392f : 
                        -1432.6741f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(61, 3, data[14]) || (GenModel.bitSetIsInRange(61, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 61, 3, data[14])) ? 
                        489.12454f : 
                        4327.296f))) : 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <2.5f ? 
                        -737.2888f : 
                        7134.438f) : 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1550.5f ? 
                        3047.2378f : 
                        20207.352f)) : 
                 (Double.isNaN(data[0]) || data[0 /* date */] <1.40273805E12f ? 
                    -22463.443f : 
                    98952.77f))) : 
        41350.5f);
    return pred;
  } // constant pool size = 111B, number of visited nodes = 14, static init size = 318B
  // {00010000 10000000 00000010 00000100 00000000 00110010 00101111 11111001 00000000 00000}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 1, 64, 32, 0, 76, -12, -97, 0, 0};
  // {00000110 00100000 00000100 00000001 01000010 00000100 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {96, 4, 32, -128, 66, 32, 0, 0, 0, 0};
  // {...3 0-bits... 10000000 00000000 00000000 00000000 00000000 00010000 01000110 10}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0, 0, 8, 98, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00011110 00000010 01000100 01000001 00010000 00000011 10111110 00110100 10000110 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {120, 64, 34, -126, 8, -64, 125, 44, 97, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_26_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2038.5f ? 
                 (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                        -3544.3464f : 
                        -1053.4358f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -202.03734f : 
                        12340.648f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[14])) ? 
                        -1680.7736f : 
                        1962.5515f) : 
                     (data[0 /* date */] <1.40057235E12f ? 
                        -1128.2087f : 
                        15804.859f))) : 
             (Double.isNaN(data[12]) || data[12 /* yr_renovated */] <1999.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(42, 2, data[13]) || (GenModel.bitSetIsInRange(42, 2, data[13]) && !GenModel.bitSetContains(GRPSPLIT5, 42, 2, data[13])) ? 
                        -3329.7168f : 
                        10300.569f) : 
                     (Double.isNaN(data[5]) || data[5 /* floors */] <1.734375f ? 
                        2592.7522f : 
                        23367.492f)) : 
                 (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <10079.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <2.3710938f ? 
                        1842.7622f : 
                        -18812.852f) : 
                     (data[4 /* sqft_lot */] <15198.5f ? 
                        107809.195f : 
                        11439.403f)))) : 
         (Double.isNaN(data[12]) || data[12 /* yr_renovated */] <1985.5f ? 
            -930.0193f : 
            62718.36f));
    return pred;
  } // constant pool size = 132B, number of visited nodes = 17, static init size = 372B
  // {00010000 00000000 00000000 11000000 00000000 00000000 00001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 3, 0, 0, 48, 4, 0, 4};
  // {00010011 11111011 11010011 11011101 01101111 00100011 11111111 11111111 00110110 00101}
  public static final byte[] GRPSPLIT1 = new byte[] {-56, -33, -53, -69, -10, -60, -1, -1, 108, 20};
  // {00100100 00000000 00000110 00000000 00011000 00000000 10000000 10011000 00010010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {36, 0, 96, 0, 24, 0, 1, 25, 72, 0};
  // {00001000 00000000 00000000 00000000 00000000 00000000 00100010 00010000 10000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {16, 0, 0, 0, 0, 0, 68, 8, 1, 0};
  // {00111110 01100011 11100110 11010011 11100111 11101011 10101111 01110111 11101000 00101}
  public static final byte[] GRPSPLIT4 = new byte[] {124, -58, 103, -53, -25, -41, -11, -18, 23, 20};
  // {...2 0-bits... 01000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0, 0, 2};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_27_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2606.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (data[8 /* condition */] <2.5f ? 
                        -10408.451f : 
                        -1775.8062f) : 
                     (Double.isNaN(data[8]) || data[8 /* condition */] <3.5f ? 
                        -1210.4985f : 
                        1592.2555f)) : 
                 (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1982.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1549.5f ? 
                        1667.7166f : 
                        12655.15f) : 
                    -19142.156f)) : 
             (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <9068.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(23, 52, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 23, 52, data[14])) ? 
                        -12681.2705f : 
                        1224.0449f) : 
                     (Double.isNaN(data[5]) || data[5 /* floors */] <1.734375f ? 
                        -1189.0183f : 
                        29501.664f)) : 
                67860.47f)) : 
        36104.57f);
    return pred;
  } // constant pool size = 76B, number of visited nodes = 12, static init size = 156B
  // {00000000 00000000 00000000 10000000 00000000 00000000 00001100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 1, 0, 0, 48, 4, 0, 4};
  // {00010011 01100010 10000010 00000100 00000000 01000011 11100011 10011111 01000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {-56, 70, 65, 32, 0, -62, -57, -7, 66, 0};
  // {...52 0-bits... }
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, 63};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_28_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5829.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3615.5f ? 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[13])) ? 
                        -779.1765f : 
                        11423.288f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -749.38043f : 
                        11189.507f)) : 
                -20618.875f) : 
             (Double.isNaN(data[0]) || data[0 /* date */] <1.40343666E12f ? 
                 (Double.isNaN(data[7]) || data[7 /* view */] <1.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1763.5f ? 
                        2528.8079f : 
                        -19635.234f) : 
                    10679.777f) : 
                47903.812f)) : 
         (Double.isNaN(data[0]) || data[0 /* date */] <1.40309325E12f ? 
            53662.188f : 
            -9951.51f));
    return pred;
  } // constant pool size = 71B, number of visited nodes = 10, static init size = 174B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 16, 0, 0, 4};
  // {00000000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 2, 0, 8};
  // {00010110 00000000 10000100 11110011 10100110 10011010 00100000 00010000 11000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {104, 0, 33, -49, 101, 89, 4, 8, 3, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_29_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2130.0f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (Double.isNaN(data[7]) || data[7 /* view */] <0.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <42616.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                        -2415.705f : 
                        130.801f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        512.287f : 
                        14571.435f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                     (Double.isNaN(data[7]) || data[7 /* view */] <3.5f ? 
                        1951.5736f : 
                        -9516.046f) : 
                     (Double.isNaN(data[7]) || data[7 /* view */] <3.5f ? 
                        7604.657f : 
                        22071.518f))) : 
             (Double.isNaN(data[0]) || data[0 /* date */] <1.40343666E12f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2113.0f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1695.5f ? 
                        -4729.0234f : 
                        14765.332f) : 
                    -18830.617f) : 
                64243.55f)) : 
        34085.484f);
    return pred;
  } // constant pool size = 94B, number of visited nodes = 12, static init size = 264B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00010010 11010001 11000010 01010111 10100101 00101011 11101111 11111111 00100010 00101}
  public static final byte[] GRPSPLIT1 = new byte[] {72, -117, 67, -22, -91, -44, -9, -1, 68, 20};
  // {00101110 00100000 01100100 01100001 00000000 01110000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {116, 4, 38, -122, 0, 14, 0, 0, 0, 0};
  // {00000101 00000011 00000110 10100001 00011000 00110000 00101010 10110000 10010000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {-96, -64, 96, -123, 24, 12, 84, 13, 9, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_30_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (data[9 /* sqft_above */] <1314.5f ? 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                 (Double.isNaN(data[2]) || data[2 /* bathrooms */] <2.6279297f ? 
                     (Double.isNaN(data[8]) || data[8 /* condition */] <4.5f ? 
                        -4836.9663f : 
                        779.2503f) : 
                    -18803.773f) : 
                 (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[13])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -1860.0449f : 
                        520.86566f) : 
                    10293.387f)) : 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                 (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1882.0f ? 
                     (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT4, 44, 0, data[13])) ? 
                        -1113.0651f : 
                        1765.5159f) : 
                    -16133.979f) : 
                 (data[9 /* sqft_above */] <1648.0f ? 
                    88087.13f : 
                    -15768.584f))) : 
        31618.129f);
    return pred;
  } // constant pool size = 93B, number of visited nodes = 11, static init size = 282B
  // {00111011 11001000 10110010 10011111 01001111 01010111 11110111 11111111 11111100 01001}
  public static final byte[] GRPSPLIT0 = new byte[] {-36, 19, 77, -7, -14, -22, -17, -1, 63, 18};
  // {00000000 00000000 00000000 00100000 00000000 1000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 4, 0, 1};
  // {00011000 11000000 00000000 00000000 00000010 00010111 10100111 10001000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {24, 3, 0, 0, 64, -24, -27, 17, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00010001 00010101 10011001 01100001 01010000 0001}
  public static final byte[] GRPSPLIT4 = new byte[] {-120, -88, -103, -122, 10, 8};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_31_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5816.5f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3096.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <3.8632812f ? 
                        -544.4032f : 
                        -20231.215f) : 
                     (Double.isNaN(data[0]) || data[0 /* date */] <1.40345999E12f ? 
                        -5385.3823f : 
                        64921.82f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -18730.02f : 
                        2524.291f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <4068.5f ? 
                        16619.646f : 
                        -2623.643f))) : 
            -17807.484f) : 
         (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
            -9313.348f : 
            47250.34f));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 10, static init size = 264B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00010100 00000001 00000001 11000000 00000000 01000000 10000100 01100000 01000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {40, -128, -128, 3, 0, 2, 33, 6, 66, 0};
  // {11111110 11111111 01111111 11111111 11111111 11111110 11111111 11111111 01101111 11011}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -1, -2, -1, -1, 127, -1, -1, -10, 27};
  // {11111111 11111111 11111111 10111111 11011111 01111111 01111111 11111111 10111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -3, -5, -2, -2, -1, -3, 31};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_32_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2130.0f ? 
         (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 44, 0, data[13])) ? 
             (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <30035.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (data[12 /* yr_renovated */] <992.0f ? 
                        -23070.842f : 
                        3733.0535f) : 
                     (data[2 /* bathrooms */] <1.6289062f ? 
                        -3582.9417f : 
                        -1294.9869f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -5841.9897f : 
                        870.64185f) : 
                     (data[9 /* sqft_above */] <1898.5f ? 
                        3191.88f : 
                        9610.463f))) : 
             (data[3 /* sqft_living */] <1973.5f ? 
                 (Double.isNaN(data[8]) || data[8 /* condition */] <3.5f ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 72, 3, data[14])) ? 
                        -14667.186f : 
                        -1366.7906f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 72, 3, data[14])) ? 
                        260.20175f : 
                        9151.896f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(72, 3, data[14]) || (GenModel.bitSetIsInRange(72, 3, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 72, 3, data[14])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        2294.1228f : 
                        -2542.0583f) : 
                     (Double.isNaN(data[12]) || data[12 /* yr_renovated */] <1983.5f ? 
                        -21073.55f : 
                        73659.195f)))) : 
        30291.146f);
    return pred;
  } // constant pool size = 136B, number of visited nodes = 16, static init size = 420B
  // {00110100 00000101 11011001 01100001 01010010 1011}
  public static final byte[] GRPSPLIT0 = new byte[] {44, -96, -101, -122, 74, 13};
  // {11101111 11011111 11111111 01111111 11111111 01111111 11111111 11111111 10111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -5, -1, -2, -1, -2, -1, -1, -3, 31};
  // {10100000 00100000 00100001 10000000 01100000 00000100 00000000 00000000 00000010 01000}
  public static final byte[] GRPSPLIT2 = new byte[] {5, 4, -124, 1, 6, 32, 0, 0, 64, 2};
  // {11111111 01110111 11111111 11111111 11111011 11111111 11111111 11111111 11110111 11101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -18, -1, -1, -33, -1, -1, -1, -17, 23};
  // {...3 0-bits... 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, -1, -1, -1, -1, -1, -1, -1, 125};
  // {...3 0-bits... 10000000 00000000 00000000 00000001 00000000 00000000 00100000 00001110 00000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, -128, 0, 0, 4, 112, -128};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_33_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1883.5f ? 
             (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1549.0f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1452.5f ? 
                        -570.5801f : 
                        -17111.352f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <1531.5f ? 
                        -358.74023f : 
                        4851.851f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -8463.569f : 
                        4900.3027f) : 
                    37122.58f)) : 
            -15626.648f) : 
        28255.197f);
    return pred;
  } // constant pool size = 67B, number of visited nodes = 8, static init size = 198B
  // {00011100 00000010 00000000 00000000 00000000 00000011 00101101 10110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {56, 64, 0, 0, 0, -64, -76, 13, 1, 4};
  // {00000000 00000000 00000100 01000000 00000000 00101000 10000010 00000000 00000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 32, 2, 0, 20, 65, 0, 64, 0};
  // {00010101 00000001 00000000 00000000 00000000 00010000 00000000 00000000 00010000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {-88, -128, 0, 0, 0, 8, 0, 0, 8, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_34_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2130.0f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5816.5f ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4287.5f ? 
                 (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 44, 0, data[13])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        30.744232f : 
                        -3743.9258f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                        3952.5466f : 
                        18589.783f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -15331.049f : 
                        5384.4536f) : 
                    28618.285f)) : 
            -19453.82f) : 
        26830.06f);
    return pred;
  } // constant pool size = 74B, number of visited nodes = 8, static init size = 240B
  // {00000000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 2, 0, 8};
  // {11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -1, 31};
  // {00010001 00100000 00000100 00000001 00000000 00000000 00100000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {-120, 4, 32, -128, 0, 0, 4, 0, 64, 0};
  // {11110101 11110011 11111111 11111111 11111111 11101111 11111111 11010111 11110111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-81, -49, -1, -1, -1, -9, -1, -21, -17, 31};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_35_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6344.0f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3554.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                        -603.0254f : 
                        -3798.7515f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2019.5f ? 
                        -162.36487f : 
                        4287.683f)) : 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (data[11 /* yr_built */] <1992.0f ? 
                        -15759.182f : 
                        1554.7039f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        7931.603f : 
                        19404.834f))) : 
            -21695.516f) : 
         (Double.isNaN(data[12]) || data[12 /* yr_renovated */] <1985.5f ? 
            -5654.576f : 
            47783.33f));
    return pred;
  } // constant pool size = 75B, number of visited nodes = 10, static init size = 198B
  // {00010011 00000000 00000000 00000000 00000000 00000011 10101110 10110000 10010000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {-56, 0, 0, 0, 0, -64, 117, 13, 9, 4};
  // {11101100 11000011 11111111 11111111 11110111 11011111 11111111 11011111 11101111 01111}
  public static final byte[] GRPSPLIT1 = new byte[] {55, -61, -1, -1, -17, -5, -1, -5, -9, 30};
  // {00001000 00000000 00000000 11000000 00000100 00000000 00001000 00000000 00000010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 3, 32, 0, 16, 0, 64, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_36_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1883.5f ? 
             (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1505.0f ? 
                 (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1457.5f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                        -290.807f : 
                        3879.29f) : 
                    -22698.385f) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -11091.722f : 
                        3395.0364f) : 
                    23672.732f)) : 
            -14919.707f) : 
        26177.545f);
    return pred;
  } // constant pool size = 63B, number of visited nodes = 7, static init size = 198B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00101100 00100000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 52, 4, 0, 4};
  // {00000100 00000000 00000100 01000000 00000000 00101000 10000010 10000000 00000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 0, 32, 2, 0, 20, 65, 1, 64, 0};
  // {00010001 00010001 00000000 00000000 10000000 00010001 00000000 00000010 00010000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {-120, -120, 0, 0, 1, -120, 0, 64, 8, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_37_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2130.0f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5816.5f ? 
             (data[9 /* sqft_above */] <1305.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1899.5f ? 
                        -3237.2908f : 
                        -12223.402f) : 
                     (data[9 /* sqft_above */] <799.5f ? 
                        -4825.012f : 
                        -294.84943f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -586.14886f : 
                        1497.8837f) : 
                     (Double.isNaN(data[12]) || data[12 /* yr_renovated */] <1983.5f ? 
                        -21514.41f : 
                        68512.32f))) : 
            -17624.732f) : 
        23805.684f);
    return pred;
  } // constant pool size = 71B, number of visited nodes = 9, static init size = 198B
  // {10111011 11101100 10111010 10011111 01101111 01110111 11111111 11111111 11111110 01001}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, 55, 93, -7, -10, -18, -1, -1, 127, 18};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00111110 00110001 00000110 01000001 10010000 01000010 10111111 11110111 11110010 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {124, -116, 96, -126, 9, 66, -3, -17, 79, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_38_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1977.5f ? 
             (data[9 /* sqft_above */] <1310.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <792.5f ? 
                        -2154.828f : 
                        -7436.2397f) : 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[13])) ? 
                        -470.67468f : 
                        9732.937f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[13])) ? 
                        325.10208f : 
                        10484.514f) : 
                     (data[9 /* sqft_above */] <1681.5f ? 
                        74360.26f : 
                        -18763.162f))) : 
            -16532.957f) : 
        23439.066f);
    return pred;
  } // constant pool size = 74B, number of visited nodes = 9, static init size = 216B
  // {00111001 11101000 10110010 10010111 01001111 01010111 11110111 11001110 01111100 00001}
  public static final byte[] GRPSPLIT0 = new byte[] {-100, 23, 77, -23, -14, -22, -17, 115, 62, 16};
  // {00000000 00000000 00000000 00100000 00000000 1000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 4, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 2, 0, 8};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_39_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6344.0f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3096.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* bathrooms */] <3.8857422f ? 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT0, 44, 0, data[13])) ? 
                        -1140.3716f : 
                        701.201f) : 
                    -17369.93f) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -17251.768f : 
                        2149.633f) : 
                     (Double.isNaN(data[9]) || data[9 /* sqft_above */] <4135.5f ? 
                        14590.048f : 
                        -103.18304f))) : 
            -23043.969f) : 
         (Double.isNaN(data[0]) || data[0 /* date */] <1.40309325E12f ? 
            40087.035f : 
            -12669.561f));
    return pred;
  } // constant pool size = 67B, number of visited nodes = 9, static init size = 174B
  // {00010100 10000101 01001000 01100000 00010000 1001}
  public static final byte[] GRPSPLIT0 = new byte[] {40, -95, 18, 6, 8, 9};
  // {00000110 00000000 00000001 11000000 00000000 01000000 10001000 01100000 01000010 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {96, 0, -128, 3, 0, 2, 17, 6, 66, 0};
  // {01111110 11111111 11111111 11111111 11111111 11111110 11111111 11111111 01101111 11011}
  public static final byte[] GRPSPLIT2 = new byte[] {126, -1, -1, -1, -1, 127, -1, -1, -10, 27};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_40_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_above */] <5261.5f ? 
         (Double.isNaN(data[2]) || data[2 /* bathrooms */] <4.6171875f ? 
             (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1883.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1677.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5117.5f ? 
                        -75.89803f : 
                        -15670.412f) : 
                    12323.365f) : 
                -14515.64f) : 
            15613.886f) : 
        22530.305f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_41_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2130.0f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5816.5f ? 
             (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <9068.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[0]) || data[0 /* date */] <1.40355319E12f ? 
                        -7989.405f : 
                        -35125.035f) : 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4261.5f ? 
                        -520.56305f : 
                        14333.211f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[13])) ? 
                        134.83372f : 
                        15272.951f) : 
                     (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT3, 44, 0, data[13])) ? 
                        5863.3022f : 
                        105993.77f))) : 
            -16568.81f) : 
        21122.63f);
    return pred;
  } // constant pool size = 74B, number of visited nodes = 9, static init size = 216B
  // {11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -5, -1, -1, -1, -1, -1, -1, -1, 27};
  // {00000000 00000000 00000000 00000000 00000000 00000001 00000000 10000000 00000010 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, -128, 0, 1, 64, 4};
  // {00000000 00000000 00000000 00000000 00000000 1001}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 9};
  // {00000000 00000000 00000000 00000000 00010000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 8, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_42_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_above */] <5261.5f ? 
         (Double.isNaN(data[2]) || data[2 /* bathrooms */] <4.6171875f ? 
             (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1977.5f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[13 /* city */]) || !GenModel.bitSetIsInRange(44, 0, data[13]) || (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[13])) ? 
                        -282.48593f : 
                        8393.123f) : 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <2.3554688f ? 
                        -5675.1777f : 
                        16385.662f)) : 
                -15943.621f) : 
            13745.474f) : 
        20602.502f);
    return pred;
  } // constant pool size = 44B, number of visited nodes = 6, static init size = 108B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00001100 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 48, 0, 0, 4};
  // {00000000 00000000 00000000 01000000 00000000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 2, 0, 8};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_43_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6344.0f ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <4888.0f ? 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <51003.5f ? 
                        -661.0041f : 
                        3761.6475f) : 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <2.3808594f ? 
                        -741.3423f : 
                        4181.471f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                    -4742.4697f : 
                    26077.691f)) : 
            -23178.11f) : 
         (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
            -13251.593f : 
            36631.13f));
    return pred;
  } // constant pool size = 67B, number of visited nodes = 8, static init size = 198B
  // {00010100 00000001 00000000 00000000 00000000 00000011 10101100 00110000 10000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {40, -128, 0, 0, 0, -64, 53, 12, 1, 4};
  // {00000000 00100000 00000100 11000000 10000000 00100000 00001000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 4, 32, 3, 1, 4, 16, 0, 0, 0};
  // {11111111 11111111 11111111 10111111 11011111 01111111 01111111 11111111 10111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -3, -5, -2, -2, -1, -3, 31};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_44_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
             (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1934.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (Double.isNaN(data[11]) || data[11 /* yr_built */] <2003.5f ? 
                        -2584.5645f : 
                        -20601.465f) : 
                     (data[3 /* sqft_living */] <1230.5f ? 
                        -1598.6353f : 
                        328.9441f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        400.39886f : 
                        5843.4653f) : 
                     (data[9 /* sqft_above */] <1599.5f ? 
                        80740.04f : 
                        -16081.183f))) : 
             (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                 (Double.isNaN(data[0]) || data[0 /* date */] <1.40318055E12f ? 
                     (Double.isNaN(data[3]) || data[3 /* sqft_living */] <3811.0f ? 
                        -9954.016f : 
                        -28645.111f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(71, 4, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 71, 4, data[14])) ? 
                        -9580.526f : 
                        3655.0085f)) : 
                 (Double.isNaN(data[0]) || data[0 /* date */] <1.40318055E12f ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(69, 1, data[14]) || (GenModel.bitSetIsInRange(69, 1, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 69, 1, data[14])) ? 
                        228.77448f : 
                        10837.87f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(69, 1, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 69, 1, data[14])) ? 
                        -21522.676f : 
                        -105.06606f)))) : 
        20485.36f);
    return pred;
  } // constant pool size = 140B, number of visited nodes = 16, static init size = 444B
  // {00110001 11111101 11111111 10111101 11001111 01110111 01111111 11111111 11111000 11001}
  public static final byte[] GRPSPLIT0 = new byte[] {-116, -65, -1, -67, -13, -18, -2, -1, 31, 19};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00100}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 32, 4};
  // {00001010 00000010 00000000 00000000 00010000 00000001 00101100 00010000 11000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {80, 64, 0, 0, 8, -128, 52, 8, 3, 0};
  // {11110111 11110111 11011110 11011111 11111111 10000111 11011001 00101111 00110100 00011}
  public static final byte[] GRPSPLIT3 = new byte[] {-17, -17, 123, -5, -1, -31, -101, -12, 44, 24};
  // {...4 0-bits... 00000000 00000000 00000010 00000000 00000011 00000000 00100100 00001000 100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 64, 0, -64, 0, 36, 16, 9};
  // {...1 0-bits... 00100010 00000000 00001000 00000000 00000100 00000001 00010000 01000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {68, 0, 16, 0, 32, -128, 8, 2, 0};
  // {...1 0-bits... 11011111 11111111 11110111 01111111 11111011 11111111 11111111 10111111 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {-5, -1, -17, -2, -33, -1, -1, -3, 31};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_45_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <2130.0f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <5778.5f ? 
             (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <9068.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                     (data[3 /* sqft_living */] <1855.5f ? 
                        -2203.9856f : 
                        -22133.332f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                        -3116.9902f : 
                        209.07814f)) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -689.2435f : 
                        1971.6632f) : 
                    88895.05f)) : 
            -15271.497f) : 
        18838.31f);
    return pred;
  } // constant pool size = 78B, number of visited nodes = 8, static init size = 264B
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 27};
  // {11011001 10000011 11110111 11110111 11111111 10101011 11111111 11111111 11010000 01111}
  public static final byte[] GRPSPLIT1 = new byte[] {-101, -63, -17, -17, -1, -43, -1, -1, 11, 30};
  // {00000000 00000000 00000000 00000000 00000000 00000001 00010001 10100000 00000000 00100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, -128, -120, 5, 0, 4};
  // {00100110 01010000 00000010 00000001 01011000 01010110 01100000 01000110 10110110 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {100, 10, 64, -128, 26, 106, 6, 98, 109, 0};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_46_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6344.0f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2673.5f ? 
                 (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1848.5f ? 
                     (data[8 /* condition */] <2.5f ? 
                        -8750.38f : 
                        -330.94144f) : 
                    -16520.104f) : 
                 (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -4674.458f : 
                        1658.8735f) : 
                     (data[0 /* date */] <1.40131749E12f ? 
                        6954.8213f : 
                        19830.562f))) : 
            -17311.408f) : 
         (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <11164.5f ? 
             (Double.isNaN(data[9]) || data[9 /* sqft_above */] <2235.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <1781.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* condition */] <3.5f ? 
                        -8680.164f : 
                        14135.54f) : 
                     (Double.isNaN(data[4]) || data[4 /* sqft_lot */] <5853.5f ? 
                        -39318.344f : 
                        -12629.38f)) : 
                6165.9336f) : 
             (Double.isNaN(data[12]) || data[12 /* yr_renovated */] <1999.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* date */] <1.40186157E12f ? 
                    11573.026f : 
                    -14468.86f) : 
                88798.805f)));
    return pred;
  } // constant pool size = 95B, number of visited nodes = 15, static init size = 198B
  // {00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00001010 00000000 00000000 10000000 00000000 00000010 10101011 10000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {80, 0, 0, 1, 0, 64, -43, 1, 0, 0};
  // {01111110 11110011 11110111 11011111 11001111 11111110 10111111 11100111 11101000 10111}
  public static final byte[] GRPSPLIT2 = new byte[] {126, -49, -17, -5, -13, 127, -3, -25, 23, 29};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_47_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[9]) || data[9 /* sqft_above */] <5261.5f ? 
         (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
             (data[9 /* sqft_above */] <856.5f ? 
                 (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 77, 0, data[14])) ? 
                        -12019.46f : 
                        -7729.6973f) : 
                     (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT3, 77, 0, data[14])) ? 
                        -2808.809f : 
                        5746.2676f)) : 
                 (Double.isNaN(data[1]) || data[1 /* bedrooms */] <4.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1506.5f ? 
                        148.31122f : 
                        8133.492f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 77, 0, data[14])) ? 
                        -7465.4043f : 
                        980.6097f))) : 
             (Double.isNaN(data[0]) || data[0 /* date */] <1.40343666E12f ? 
                 (Double.isNaN(data[3]) || data[3 /* sqft_living */] <2046.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* date */] <1.40188044E12f ? 
                        -1532.2812f : 
                        5465.935f) : 
                    -15868.537f) : 
                53031.824f)) : 
        18334.86f);
    return pred;
  } // constant pool size = 105B, number of visited nodes = 12, static init size = 330B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {10111011 11111011 11100101 10011110 00011111 01111111 11111111 11011111 11110111 01111}
  public static final byte[] GRPSPLIT1 = new byte[] {-35, -33, -89, 121, -8, -2, -1, -5, -17, 30};
  // {11111011 11111011 11110101 10111111 11111111 01111111 11111111 11011111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -33, -81, -3, -1, -2, -1, -5, -1, 31};
  // {00000000 10000000 00000000 00000000 00000110 00000000 00000000 00001000 01000000 00000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 1, 0, 0, 96, 0, 0, 16, 2, 0};
  // {11100111 11110111 11010110 11011111 11111111 10000100 10011001 00101111 00110100 00111}
  public static final byte[] GRPSPLIT4 = new byte[] {-25, -17, 107, -5, -1, 33, -103, -12, 44, 28};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_48_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* waterfront */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6344.0f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                 (Double.isNaN(data[9]) || data[9 /* sqft_above */] <3554.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <3.59375f ? 
                        -175.437f : 
                        -6718.6753f) : 
                     (!Double.isNaN(data[14 /* statezip */]) && (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT1, 77, 0, data[14])) ? 
                        -16632.604f : 
                        6142.3535f)) : 
                 (Double.isNaN(data[0]) || data[0 /* date */] <1.40343666E12f ? 
                     (data[3 /* sqft_living */] <1751.5f ? 
                        3699.22f : 
                        -12263.272f) : 
                    47728.637f)) : 
            -22530.082f) : 
         (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT2, 44, 0, data[13])) ? 
            -12704.086f : 
            32838.47f));
    return pred;
  } // constant pool size = 67B, number of visited nodes = 9, static init size = 174B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {11101110 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11101111 11111}
  public static final byte[] GRPSPLIT1 = new byte[] {119, -1, -1, -1, -1, -1, -1, -5, -9, 31};
  // {11111101 11111111 11111110 11111111 01111111 1011}
  public static final byte[] GRPSPLIT2 = new byte[] {-65, -1, 127, -1, -2, 13};
}


class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_49_class_0.score0(fdata);
  }
}
class gbm_00dd40e8_d8ed_49c7_88de_6be5465afeb4_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* sqft_living */] <6575.0f ? 
         (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1977.5f ? 
             (Double.isNaN(data[14 /* statezip */]) || !GenModel.bitSetIsInRange(77, 0, data[14]) || (GenModel.bitSetIsInRange(77, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 77, 0, data[14])) ? 
                 (!Double.isNaN(data[13 /* city */]) && (GenModel.bitSetIsInRange(44, 0, data[13]) && !GenModel.bitSetContains(GRPSPLIT1, 44, 0, data[13])) ? 
                    -10246.523f : 
                     (Double.isNaN(data[10]) || data[10 /* sqft_basement */] <1545.5f ? 
                        -173.75009f : 
                        7436.918f)) : 
                 (data[5 /* floors */] <1.2539062f ? 
                     (Double.isNaN(data[2]) || data[2 /* bathrooms */] <1.875f ? 
                        -5880.56f : 
                        75350.18f) : 
                     (Double.isNaN(data[8]) || data[8 /* condition */] <3.5f ? 
                        -8334.816f : 
                        8347.562f))) : 
            -13927.398f) : 
        18669.102f);
    return pred;
  } // constant pool size = 52B, number of visited nodes = 8, static init size = 108B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00001100 00000000 00000000 00100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 48, 0, 0, 4};
  // {11111111 01111111 11111101 11111111 11111111 1111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -2, -65, -1, -1, 15};
}


